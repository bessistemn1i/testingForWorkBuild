!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function i(e,t){t=t||ie;var i=t.createElement("script");i.text=e,t.head.appendChild(i).parentNode.removeChild(i)}function n(e){var t=!!e&&"length"in e&&e.length,i=ve.type(e);return"function"!==i&&!ve.isWindow(e)&&("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function o(e,t,i){return ve.isFunction(t)?ve.grep(e,function(e,n){return!!t.call(e,n,e)!==i}):t.nodeType?ve.grep(e,function(e){return e===t!==i}):"string"!=typeof t?ve.grep(e,function(e){return ae.call(t,e)>-1!==i}):Se.test(t)?ve.filter(t,e,i):(t=ve.filter(t,e),ve.grep(e,function(e){return ae.call(t,e)>-1!==i&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return ve.each(e.match(je)||[],function(e,i){t[i]=!0}),t}function l(e){return e}function c(e){throw e}function u(e,t,i,n){var r;try{e&&ve.isFunction(r=e.promise)?r.call(e).done(t).fail(i):e&&ve.isFunction(r=e.then)?r.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}function d(){ie.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),ve.ready()}function p(){this.expando=ve.expando+p.uid++}function h(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ze.test(e)?JSON.parse(e):e)}function f(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(He,"-$&").toLowerCase(),i=e.getAttribute(n),"string"==typeof i){try{i=h(i)}catch(r){}Ie.set(e,t,i)}else i=void 0;return i}function v(e,t,i,n){var r,o=1,s=20,a=n?function(){return n.cur()}:function(){return ve.css(e,t,"")},l=a(),c=i&&i[3]||(ve.cssNumber[t]?"":"px"),u=(ve.cssNumber[t]||"px"!==c&&+l)&&Re.exec(ve.css(e,t));if(u&&u[3]!==c){c=c||u[3],i=i||[],u=+l||1;do o=o||".5",u/=o,ve.style(e,t,u+c);while(o!==(o=a()/l)&&1!==o&&--s)}return i&&(u=+u||+l||0,r=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=u,n.end=r)),r}function g(e){var t,i=e.ownerDocument,n=e.nodeName,r=Ve[n];return r?r:(t=i.body.appendChild(i.createElement(n)),r=ve.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),Ve[n]=r,r)}function m(e,t){for(var i,n,r=[],o=0,s=e.length;o<s;o++)n=e[o],n.style&&(i=n.style.display,t?("none"===i&&(r[o]=Le.get(n,"display")||null,r[o]||(n.style.display="")),""===n.style.display&&qe(n)&&(r[o]=g(n))):"none"!==i&&(r[o]="none",Le.set(n,"display",i)));for(o=0;o<s;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}function y(e,t){var i;return i="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&r(e,t)?ve.merge([e],i):i}function b(e,t){for(var i=0,n=e.length;i<n;i++)Le.set(e[i],"globalEval",!t||Le.get(t[i],"globalEval"))}function w(e,t,i,n,r){for(var o,s,a,l,c,u,d=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if(o=e[h],o||0===o)if("object"===ve.type(o))ve.merge(p,o.nodeType?[o]:o);else if(Ke.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(Ye.exec(o)||["",""])[1].toLowerCase(),l=Ue[a]||Ue._default,s.innerHTML=l[1]+ve.htmlPrefilter(o)+l[2],u=l[0];u--;)s=s.lastChild;ve.merge(p,s.childNodes),s=d.firstChild,s.textContent=""}else p.push(t.createTextNode(o));for(d.textContent="",h=0;o=p[h++];)if(n&&ve.inArray(o,n)>-1)r&&r.push(o);else if(c=ve.contains(o.ownerDocument,o),s=y(d.appendChild(o),"script"),c&&b(s),i)for(u=0;o=s[u++];)Ge.test(o.type||"")&&i.push(o);return d}function T(){return!0}function C(){return!1}function x(){try{return ie.activeElement}catch(e){}}function k(e,t,i,n,r,o){var s,a;if("object"==typeof t){"string"!=typeof i&&(n=n||i,i=void 0);for(a in t)k(e,a,i,n,t[a],o);return e}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),r===!1)r=C;else if(!r)return e;return 1===o&&(s=r,r=function(e){return ve().off(e),s.apply(this,arguments)},r.guid=s.guid||(s.guid=ve.guid++)),e.each(function(){ve.event.add(this,t,r,n,i)})}function S(e,t){return r(e,"table")&&r(11!==t.nodeType?t:t.firstChild,"tr")?ve(">tbody",e)[0]||e:e}function _(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function E(e){var t=rt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function A(e,t){var i,n,r,o,s,a,l,c;if(1===t.nodeType){if(Le.hasData(e)&&(o=Le.access(e),s=Le.set(t,o),c=o.events)){delete s.handle,s.events={};for(r in c)for(i=0,n=c[r].length;i<n;i++)ve.event.add(t,r,c[r][i])}Ie.hasData(e)&&(a=Ie.access(e),l=ve.extend({},a),Ie.set(t,l))}}function P(e,t){var i=t.nodeName.toLowerCase();"input"===i&&Xe.test(e.type)?t.checked=e.checked:"input"!==i&&"textarea"!==i||(t.defaultValue=e.defaultValue)}function M(e,t,n,r){t=oe.apply([],t);var o,s,a,l,c,u,d=0,p=e.length,h=p-1,f=t[0],v=ve.isFunction(f);if(v||p>1&&"string"==typeof f&&!he.checkClone&&nt.test(f))return e.each(function(i){var o=e.eq(i);v&&(t[0]=f.call(this,i,o.html())),M(o,t,n,r)});if(p&&(o=w(t,e[0].ownerDocument,!1,e,r),s=o.firstChild,1===o.childNodes.length&&(o=s),s||r)){for(a=ve.map(y(o,"script"),_),l=a.length;d<p;d++)c=o,d!==h&&(c=ve.clone(c,!0,!0),l&&ve.merge(a,y(c,"script"))),n.call(e[d],c,d);if(l)for(u=a[a.length-1].ownerDocument,ve.map(a,E),d=0;d<l;d++)c=a[d],Ge.test(c.type||"")&&!Le.access(c,"globalEval")&&ve.contains(u,c)&&(c.src?ve._evalUrl&&ve._evalUrl(c.src):i(c.textContent.replace(ot,""),u))}return e}function j(e,t,i){for(var n,r=t?ve.filter(t,e):e,o=0;null!=(n=r[o]);o++)i||1!==n.nodeType||ve.cleanData(y(n)),n.parentNode&&(i&&ve.contains(n.ownerDocument,n)&&b(y(n,"script")),n.parentNode.removeChild(n));return e}function O(e,t,i){var n,r,o,s,a=e.style;return i=i||lt(e),i&&(s=i.getPropertyValue(t)||i[t],""!==s||ve.contains(e.ownerDocument,e)||(s=ve.style(e,t)),!he.pixelMarginRight()&&at.test(s)&&st.test(t)&&(n=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=i.width,a.width=n,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function N(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function D(e){if(e in ft)return e;for(var t=e[0].toUpperCase()+e.slice(1),i=ht.length;i--;)if(e=ht[i]+t,e in ft)return e}function $(e){var t=ve.cssProps[e];return t||(t=ve.cssProps[e]=D(e)||e),t}function L(e,t,i){var n=Re.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function I(e,t,i,n,r){var o,s=0;for(o=i===(n?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===i&&(s+=ve.css(e,i+Be[o],!0,r)),n?("content"===i&&(s-=ve.css(e,"padding"+Be[o],!0,r)),"margin"!==i&&(s-=ve.css(e,"border"+Be[o]+"Width",!0,r))):(s+=ve.css(e,"padding"+Be[o],!0,r),"padding"!==i&&(s+=ve.css(e,"border"+Be[o]+"Width",!0,r)));return s}function z(e,t,i){var n,r=lt(e),o=O(e,t,r),s="border-box"===ve.css(e,"boxSizing",!1,r);return at.test(o)?o:(n=s&&(he.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),o=parseFloat(o)||0,o+I(e,t,i||(s?"border":"content"),n,r)+"px")}function H(e,t,i,n,r){return new H.prototype.init(e,t,i,n,r)}function F(){gt&&(ie.hidden===!1&&e.requestAnimationFrame?e.requestAnimationFrame(F):e.setTimeout(F,ve.fx.interval),ve.fx.tick())}function R(){return e.setTimeout(function(){vt=void 0}),vt=ve.now()}function B(e,t){var i,n=0,r={height:e};for(t=t?1:0;n<4;n+=2-t)i=Be[n],r["margin"+i]=r["padding"+i]=e;return t&&(r.opacity=r.width=e),r}function q(e,t,i){for(var n,r=(X.tweeners[t]||[]).concat(X.tweeners["*"]),o=0,s=r.length;o<s;o++)if(n=r[o].call(i,t,e))return n}function W(e,t,i){var n,r,o,s,a,l,c,u,d="width"in t||"height"in t,p=this,h={},f=e.style,v=e.nodeType&&qe(e),g=Le.get(e,"fxshow");i.queue||(s=ve._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,ve.queue(e,"fx").length||s.empty.fire()})}));for(n in t)if(r=t[n],mt.test(r)){if(delete t[n],o=o||"toggle"===r,r===(v?"hide":"show")){if("show"!==r||!g||void 0===g[n])continue;v=!0}h[n]=g&&g[n]||ve.style(e,n)}if(l=!ve.isEmptyObject(t),l||!ve.isEmptyObject(h)){d&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],c=g&&g.display,null==c&&(c=Le.get(e,"display")),u=ve.css(e,"display"),"none"===u&&(c?u=c:(m([e],!0),c=e.style.display||c,u=ve.css(e,"display"),m([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===ve.css(e,"float")&&(l||(p.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1;for(n in h)l||(g?"hidden"in g&&(v=g.hidden):g=Le.access(e,"fxshow",{display:c}),o&&(g.hidden=!v),v&&m([e],!0),p.done(function(){v||m([e]),Le.remove(e,"fxshow");for(n in h)ve.style(e,n,h[n])})),l=q(v?g[n]:0,n,p),n in g||(g[n]=l.start,v&&(l.end=l.start,l.start=0))}}function V(e,t){var i,n,r,o,s;for(i in e)if(n=ve.camelCase(i),r=t[n],o=e[i],Array.isArray(o)&&(r=o[1],o=e[i]=o[0]),i!==n&&(e[n]=o,delete e[i]),s=ve.cssHooks[n],s&&"expand"in s){o=s.expand(o),delete e[n];for(i in o)i in e||(e[i]=o[i],t[i]=r)}else t[n]=r}function X(e,t,i){var n,r,o=0,s=X.prefilters.length,a=ve.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=vt||R(),i=Math.max(0,c.startTime+c.duration-t),n=i/c.duration||0,o=1-n,s=0,l=c.tweens.length;s<l;s++)c.tweens[s].run(o);return a.notifyWith(e,[c,o,i]),o<1&&l?i:(l||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:ve.extend({},t),opts:ve.extend(!0,{specialEasing:{},easing:ve.easing._default},i),originalProperties:t,originalOptions:i,startTime:vt||R(),duration:i.duration,tweens:[],createTween:function(t,i){var n=ve.Tween(e,c.opts,t,i,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(n),n},stop:function(t){var i=0,n=t?c.tweens.length:0;if(r)return this;for(r=!0;i<n;i++)c.tweens[i].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(V(u,c.opts.specialEasing);o<s;o++)if(n=X.prefilters[o].call(c,e,u,c.opts))return ve.isFunction(n.stop)&&(ve._queueHooks(c.elem,c.opts.queue).stop=ve.proxy(n.stop,n)),n;return ve.map(u,q,c),ve.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),ve.fx.timer(ve.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}function Y(e){var t=e.match(je)||[];return t.join(" ")}function G(e){return e.getAttribute&&e.getAttribute("class")||""}function U(e,t,i,n){var r;if(Array.isArray(t))ve.each(t,function(t,r){i||At.test(e)?n(e,r):U(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,i,n)});else if(i||"object"!==ve.type(t))n(e,t);else for(r in t)U(e+"["+r+"]",t[r],i,n)}function K(e){return function(t,i){"string"!=typeof t&&(i=t,t="*");var n,r=0,o=t.toLowerCase().match(je)||[];if(ve.isFunction(i))for(;n=o[r++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(i)):(e[n]=e[n]||[]).push(i)}}function Q(e,t,i,n){function r(a){var l;return o[a]=!0,ve.each(e[a]||[],function(e,a){var c=a(t,i,n);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),r(c),!1)}),l}var o={},s=e===Ft;return r(t.dataTypes[0])||!o["*"]&&r("*")}function J(e,t){var i,n,r=ve.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((r[i]?e:n||(n={}))[i]=t[i]);return n&&ve.extend(!0,e,n),e}function Z(e,t,i){for(var n,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(r in a)if(a[r]&&a[r].test(n)){l.unshift(r);break}if(l[0]in i)o=l[0];else{for(r in i){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),i[o]}function ee(e,t,i,n){var r,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(i[e.responseFields[o]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(s=c[l+" "+o]||c["* "+o],!s)for(r in c)if(a=r.split(" "),a[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){s===!0?s=c[r]:c[r]!==!0&&(o=a[0],u.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(d){return{state:"parsererror",error:s?d:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}var te=[],ie=e.document,ne=Object.getPrototypeOf,re=te.slice,oe=te.concat,se=te.push,ae=te.indexOf,le={},ce=le.toString,ue=le.hasOwnProperty,de=ue.toString,pe=de.call(Object),he={},fe="3.2.1",ve=function(e,t){return new ve.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ye=/-([a-z])/g,be=function(e,t){return t.toUpperCase()};ve.fn=ve.prototype={jquery:fe,constructor:ve,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=ve.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return ve.each(this,e)},map:function(e){return this.pushStack(ve.map(this,function(t,i){return e.call(t,i,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(i>=0&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:se,sort:te.sort,splice:te.splice},ve.extend=ve.fn.extend=function(){var e,t,i,n,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||ve.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=s[t],n=e[t],s!==n&&(c&&n&&(ve.isPlainObject(n)||(r=Array.isArray(n)))?(r?(r=!1,o=i&&Array.isArray(i)?i:[]):o=i&&ve.isPlainObject(i)?i:{},s[t]=ve.extend(c,o,n)):void 0!==n&&(s[t]=n));return s},ve.extend({expando:"jQuery"+(fe+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ve.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=ve.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==ce.call(e))&&(!(t=ne(e))||(i=ue.call(t,"constructor")&&t.constructor,"function"==typeof i&&de.call(i)===pe))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ce.call(e)]||"object":typeof e},globalEval:function(e){i(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ye,be)},each:function(e,t){var i,r=0;if(n(e))for(i=e.length;r<i&&t.call(e[r],r,e[r])!==!1;r++);else for(r in e)if(t.call(e[r],r,e[r])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(n(Object(e))?ve.merge(i,"string"==typeof e?[e]:e):se.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:ae.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,r=e.length;n<i;n++)e[r++]=t[n];return e.length=r,e},grep:function(e,t,i){for(var n,r=[],o=0,s=e.length,a=!i;o<s;o++)n=!t(e[o],o),n!==a&&r.push(e[o]);return r},map:function(e,t,i){var r,o,s=0,a=[];if(n(e))for(r=e.length;s<r;s++)o=t(e[s],s,i),null!=o&&a.push(o);else for(s in e)o=t(e[s],s,i),null!=o&&a.push(o);return oe.apply([],a)},guid:1,proxy:function(e,t){var i,n,r;if("string"==typeof t&&(i=e[t],t=e,e=i),ve.isFunction(e))return n=re.call(arguments,2),r=function(){return e.apply(t||this,n.concat(re.call(arguments)))},r.guid=e.guid=e.guid||ve.guid++,r},now:Date.now,support:he}),"function"==typeof Symbol&&(ve.fn[Symbol.iterator]=te[Symbol.iterator]),ve.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var we=function(e){function t(e,t,i,n){var r,o,s,a,l,c,u,p=t&&t.ownerDocument,f=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return i;if(!n&&((t?t.ownerDocument||t:R)!==N&&O(t),t=t||N,$)){if(11!==f&&(l=me.exec(e)))if(r=l[1]){if(9===f){if(!(s=t.getElementById(r)))return i;if(s.id===r)return i.push(s),i}else if(p&&(s=p.getElementById(r))&&H(t,s)&&s.id===r)return i.push(s),i}else{if(l[2])return J.apply(i,t.getElementsByTagName(e)),i;if((r=l[3])&&C.getElementsByClassName&&t.getElementsByClassName)return J.apply(i,t.getElementsByClassName(r)),i}if(C.qsa&&!X[e+" "]&&(!L||!L.test(e))){if(1!==f)p=t,u=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(Te,Ce):t.setAttribute("id",a=F),c=_(e),o=c.length;o--;)c[o]="#"+a+" "+h(c[o]);u=c.join(","),p=ye.test(e)&&d(t.parentNode)||t}if(u)try{return J.apply(i,p.querySelectorAll(u)),i}catch(v){}finally{a===F&&t.removeAttribute("id")}}}return A(e.replace(ae,"$1"),t,i,n)}function i(){function e(i,n){return t.push(i+" ")>x.cacheLength&&delete e[t.shift()],e[i+" "]=n}var t=[];return e}function n(e){return e[F]=!0,e}function r(e){var t=N.createElement("fieldset");try{return!!e(t)}catch(i){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var i=e.split("|"),n=i.length;n--;)x.attrHandle[i[n]]=t}function s(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function a(e){return function(t){var i=t.nodeName.toLowerCase();return"input"===i&&t.type===e}}function l(e){return function(t){var i=t.nodeName.toLowerCase();return("input"===i||"button"===i)&&t.type===e}}function c(e){return function(t){return"form"in t?t.parentNode&&t.disabled===!1?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ke(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function u(e){return n(function(t){return t=+t,n(function(i,n){for(var r,o=e([],i.length,t),s=o.length;s--;)i[r=o[s]]&&(i[r]=!(n[r]=i[r]))})})}function d(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function p(){}function h(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function f(e,t,i){var n=t.dir,r=t.next,o=r||n,s=i&&"parentNode"===o,a=q++;return t.first?function(t,i,r){for(;t=t[n];)if(1===t.nodeType||s)return e(t,i,r);return!1}:function(t,i,l){var c,u,d,p=[B,a];if(l){for(;t=t[n];)if((1===t.nodeType||s)&&e(t,i,l))return!0}else for(;t=t[n];)if(1===t.nodeType||s)if(d=t[F]||(t[F]={}),u=d[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[n]||t;else{if((c=u[o])&&c[0]===B&&c[1]===a)return p[2]=c[2];if(u[o]=p,p[2]=e(t,i,l))return!0}return!1}}function v(e){return e.length>1?function(t,i,n){for(var r=e.length;r--;)if(!e[r](t,i,n))return!1;return!0}:e[0]}function g(e,i,n){for(var r=0,o=i.length;r<o;r++)t(e,i[r],n);return n}function m(e,t,i,n,r){for(var o,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(o=e[a])&&(i&&!i(o,n,r)||(s.push(o),c&&t.push(a)));return s}function y(e,t,i,r,o,s){return r&&!r[F]&&(r=y(r)),o&&!o[F]&&(o=y(o,s)),n(function(n,s,a,l){var c,u,d,p=[],h=[],f=s.length,v=n||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!n&&t?v:m(v,p,e,a,l),b=i?o||(n?e:f||r)?[]:s:y;if(i&&i(y,b,a,l),r)for(c=m(b,h),r(c,[],a,l),u=c.length;u--;)(d=c[u])&&(b[h[u]]=!(y[h[u]]=d));if(n){if(o||e){if(o){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(y[u]=d);o(null,b=[],c,l)}for(u=b.length;u--;)(d=b[u])&&(c=o?ee(n,d):p[u])>-1&&(n[c]=!(s[c]=d))}}else b=m(b===s?b.splice(f,b.length):b),o?o(null,s,b,l):J.apply(s,b)})}function b(e){for(var t,i,n,r=e.length,o=x.relative[e[0].type],s=o||x.relative[" "],a=o?1:0,l=f(function(e){return e===t},s,!0),c=f(function(e){return ee(t,e)>-1},s,!0),u=[function(e,i,n){var r=!o&&(n||i!==P)||((t=i).nodeType?l(e,i,n):c(e,i,n));return t=null,r}];a<r;a++)if(i=x.relative[e[a].type])u=[f(v(u),i)];else{if(i=x.filter[e[a].type].apply(null,e[a].matches),i[F]){for(n=++a;n<r&&!x.relative[e[n].type];n++);return y(a>1&&v(u),a>1&&h(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),i,a<n&&b(e.slice(a,n)),n<r&&b(e=e.slice(n)),n<r&&h(e))}u.push(i)}return v(u)}function w(e,i){var r=i.length>0,o=e.length>0,s=function(n,s,a,l,c){var u,d,p,h=0,f="0",v=n&&[],g=[],y=P,b=n||o&&x.find.TAG("*",c),w=B+=null==y?1:Math.random()||.1,T=b.length;for(c&&(P=s===N||s||c);f!==T&&null!=(u=b[f]);f++){if(o&&u){for(d=0,s||u.ownerDocument===N||(O(u),a=!$);p=e[d++];)if(p(u,s||N,a)){l.push(u);break}c&&(B=w)}r&&((u=!p&&u)&&h--,n&&v.push(u))}if(h+=f,r&&f!==h){for(d=0;p=i[d++];)p(v,g,s,a);if(n){if(h>0)for(;f--;)v[f]||g[f]||(g[f]=K.call(l));g=m(g)}J.apply(l,g),c&&!n&&g.length>0&&h+i.length>1&&t.uniqueSort(l)}return c&&(B=w,P=y),v};return r?n(s):s}var T,C,x,k,S,_,E,A,P,M,j,O,N,D,$,L,I,z,H,F="sizzle"+1*new Date,R=e.document,B=0,q=0,W=i(),V=i(),X=i(),Y=function(e,t){return e===t&&(j=!0),0},G={}.hasOwnProperty,U=[],K=U.pop,Q=U.push,J=U.push,Z=U.slice,ee=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ie="[\\x20\\t\\r\\n\\f]",ne="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",re="\\["+ie+"*("+ne+")(?:"+ie+"*([*^$|!~]?=)"+ie+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ne+"))|)"+ie+"*\\]",oe=":("+ne+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+re+")*)|.*)\\)|)",se=new RegExp(ie+"+","g"),ae=new RegExp("^"+ie+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ie+"+$","g"),le=new RegExp("^"+ie+"*,"+ie+"*"),ce=new RegExp("^"+ie+"*([>+~]|"+ie+")"+ie+"*"),ue=new RegExp("="+ie+"*([^\\]'\"]*?)"+ie+"*\\]","g"),de=new RegExp(oe),pe=new RegExp("^"+ne+"$"),he={ID:new RegExp("^#("+ne+")"),CLASS:new RegExp("^\\.("+ne+")"),TAG:new RegExp("^("+ne+"|[*])"),ATTR:new RegExp("^"+re),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ie+"*(even|odd|(([+-]|)(\\d*)n|)"+ie+"*(?:([+-]|)"+ie+"*(\\d+)|))"+ie+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ie+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ie+"*((?:-\\d)?\\d*)"+ie+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,ve=/^h\d$/i,ge=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,be=new RegExp("\\\\([\\da-f]{1,6}"+ie+"?|("+ie+")|.)","ig"),we=function(e,t,i){var n="0x"+t-65536;return n!==n||i?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},Te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Ce=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},xe=function(){O()},ke=f(function(e){return e.disabled===!0&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{J.apply(U=Z.call(R.childNodes),R.childNodes),U[R.childNodes.length].nodeType}catch(Se){J={apply:U.length?function(e,t){Q.apply(e,Z.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}C=t.support={},S=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},O=t.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:R;return n!==N&&9===n.nodeType&&n.documentElement?(N=n,D=N.documentElement,$=!S(N),R!==N&&(i=N.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",xe,!1):i.attachEvent&&i.attachEvent("onunload",xe)),C.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),C.getElementsByTagName=r(function(e){return e.appendChild(N.createComment("")),!e.getElementsByTagName("*").length}),C.getElementsByClassName=ge.test(N.getElementsByClassName),C.getById=r(function(e){return D.appendChild(e).id=F,!N.getElementsByName||!N.getElementsByName(F).length}),C.getById?(x.filter.ID=function(e){var t=e.replace(be,we);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&$){var i=t.getElementById(e);return i?[i]:[]}}):(x.filter.ID=function(e){var t=e.replace(be,we);return function(e){var i="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return i&&i.value===t}},x.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&$){var i,n,r,o=t.getElementById(e);if(o){if(i=o.getAttributeNode("id"),i&&i.value===e)return[o];for(r=t.getElementsByName(e),n=0;o=r[n++];)if(i=o.getAttributeNode("id"),i&&i.value===e)return[o]}return[]}}),x.find.TAG=C.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):C.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;i=o[r++];)1===i.nodeType&&n.push(i);return n}return o},x.find.CLASS=C.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&$)return t.getElementsByClassName(e)},I=[],L=[],(C.qsa=ge.test(N.querySelectorAll))&&(r(function(e){D.appendChild(e).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+ie+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||L.push("\\["+ie+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+F+"-]").length||L.push("~="),e.querySelectorAll(":checked").length||L.push(":checked"),e.querySelectorAll("a#"+F+"+*").length||L.push(".#.+[+~]")}),r(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=N.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&L.push("name"+ie+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&L.push(":enabled",":disabled"),D.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&L.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),L.push(",.*:")})),(C.matchesSelector=ge.test(z=D.matches||D.webkitMatchesSelector||D.mozMatchesSelector||D.oMatchesSelector||D.msMatchesSelector))&&r(function(e){C.disconnectedMatch=z.call(e,"*"),z.call(e,"[s!='']:x"),I.push("!=",oe)}),L=L.length&&new RegExp(L.join("|")),I=I.length&&new RegExp(I.join("|")),t=ge.test(D.compareDocumentPosition),H=t||ge.test(D.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},Y=t?function(e,t){if(e===t)return j=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i?i:(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&i||!C.sortDetached&&t.compareDocumentPosition(e)===i?e===N||e.ownerDocument===R&&H(R,e)?-1:t===N||t.ownerDocument===R&&H(R,t)?1:M?ee(M,e)-ee(M,t):0:4&i?-1:1)}:function(e,t){if(e===t)return j=!0,0;var i,n=0,r=e.parentNode,o=t.parentNode,a=[e],l=[t];if(!r||!o)return e===N?-1:t===N?1:r?-1:o?1:M?ee(M,e)-ee(M,t):0;if(r===o)return s(e,t);for(i=e;i=i.parentNode;)a.unshift(i);for(i=t;i=i.parentNode;)l.unshift(i);for(;a[n]===l[n];)n++;return n?s(a[n],l[n]):a[n]===R?-1:l[n]===R?1:0},N):N},t.matches=function(e,i){return t(e,null,null,i)},t.matchesSelector=function(e,i){if((e.ownerDocument||e)!==N&&O(e),i=i.replace(ue,"='$1']"),C.matchesSelector&&$&&!X[i+" "]&&(!I||!I.test(i))&&(!L||!L.test(i)))try{var n=z.call(e,i);if(n||C.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(r){}return t(i,N,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==N&&O(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==N&&O(e);var i=x.attrHandle[t.toLowerCase()],n=i&&G.call(x.attrHandle,t.toLowerCase())?i(e,t,!$):void 0;return void 0!==n?n:C.attributes||!$?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},t.escape=function(e){return(e+"").replace(Te,Ce)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,i=[],n=0,r=0;if(j=!C.detectDuplicates,M=!C.sortStable&&e.slice(0),e.sort(Y),j){for(;t=e[r++];)t===e[r]&&(n=i.push(r));for(;n--;)e.splice(i[n],1)}return M=null,e},k=t.getText=function(e){var t,i="",n=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=k(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[n++];)i+=k(t);return i},x=t.selectors={cacheLength:50,createPseudo:n,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,we),e[3]=(e[3]||e[4]||e[5]||"").replace(be,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&de.test(i)&&(t=_(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ie+")"+e+"("+ie+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,i,n){return function(r){var o=t.attr(r,e);return null==o?"!="===i:!i||(o+="","="===i?o===n:"!="===i?o!==n:"^="===i?n&&0===o.indexOf(n):"*="===i?n&&o.indexOf(n)>-1:"$="===i?n&&o.slice(-n.length)===n:"~="===i?(" "+o.replace(se," ")+" ").indexOf(n)>-1:"|="===i&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,i,n,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===n&&0===r?function(e){return!!e.parentNode}:function(t,i,l){var c,u,d,p,h,f,v=o!==s?"nextSibling":"previousSibling",g=t.parentNode,m=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(o){for(;v;){for(p=t;p=p[v];)if(a?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;f=v="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?g.firstChild:g.lastChild],s&&y){for(p=g,d=p[F]||(p[F]={}),u=d[p.uniqueID]||(d[p.uniqueID]={}),c=u[e]||[],h=c[0]===B&&c[1],b=h&&c[2],p=h&&g.childNodes[h];p=++h&&p&&p[v]||(b=h=0)||f.pop();)if(1===p.nodeType&&++b&&p===t){u[e]=[B,h,b];break}}else if(y&&(p=t,d=p[F]||(p[F]={}),u=d[p.uniqueID]||(d[p.uniqueID]={}),c=u[e]||[],h=c[0]===B&&c[1],b=h),b===!1)for(;(p=++h&&p&&p[v]||(b=h=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++b||(y&&(d=p[F]||(p[F]={}),u=d[p.uniqueID]||(d[p.uniqueID]={}),u[e]=[B,b]),p!==t)););return b-=r,b===n||b%n===0&&b/n>=0}}},PSEUDO:function(e,i){var r,o=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[F]?o(i):o.length>1?(r=[e,e,"",i],x.setFilters.hasOwnProperty(e.toLowerCase())?n(function(e,t){for(var n,r=o(e,i),s=r.length;s--;)n=ee(e,r[s]),e[n]=!(t[n]=r[s])}):function(e){return o(e,0,r)}):o}},pseudos:{not:n(function(e){var t=[],i=[],r=E(e.replace(ae,"$1"));return r[F]?n(function(e,t,i,n){for(var o,s=r(e,null,n,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,n,o){return t[0]=e,r(t,null,o,i),t[0]=null,!i.pop()}}),has:n(function(e){return function(i){return t(e,i).length>0}}),contains:n(function(e){return e=e.replace(be,we),function(t){return(t.textContent||t.innerText||k(t)).indexOf(e)>-1}}),lang:n(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,we).toLowerCase(),function(t){var i;do if(i=$?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return i=i.toLowerCase(),i===e||0===i.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1;
}}),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===D},focus:function(e){return e===N.activeElement&&(!N.hasFocus||N.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return ve.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,i){return[i<0?i+t:i]}),even:u(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:u(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:u(function(e,t,i){for(var n=i<0?i+t:i;--n>=0;)e.push(n);return e}),gt:u(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}},x.pseudos.nth=x.pseudos.eq;for(T in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[T]=a(T);for(T in{submit:!0,reset:!0})x.pseudos[T]=l(T);return p.prototype=x.filters=x.pseudos,x.setFilters=new p,_=t.tokenize=function(e,i){var n,r,o,s,a,l,c,u=V[e+" "];if(u)return i?0:u.slice(0);for(a=e,l=[],c=x.preFilter;a;){n&&!(r=le.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),n=!1,(r=ce.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(ae," ")}),a=a.slice(n.length));for(s in x.filter)!(r=he[s].exec(a))||c[s]&&!(r=c[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return i?a.length:a?t.error(e):V(e,l).slice(0)},E=t.compile=function(e,t){var i,n=[],r=[],o=X[e+" "];if(!o){for(t||(t=_(e)),i=t.length;i--;)o=b(t[i]),o[F]?n.push(o):r.push(o);o=X(e,w(r,n)),o.selector=e}return o},A=t.select=function(e,t,i,n){var r,o,s,a,l,c="function"==typeof e&&e,u=!n&&_(e=c.selector||e);if(i=i||[],1===u.length){if(o=u[0]=u[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&9===t.nodeType&&$&&x.relative[o[1].type]){if(t=(x.find.ID(s.matches[0].replace(be,we),t)||[])[0],!t)return i;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=he.needsContext.test(e)?0:o.length;r--&&(s=o[r],!x.relative[a=s.type]);)if((l=x.find[a])&&(n=l(s.matches[0].replace(be,we),ye.test(o[0].type)&&d(t.parentNode)||t))){if(o.splice(r,1),e=n.length&&h(o),!e)return J.apply(i,n),i;break}}return(c||E(e,u))(n,t,!$,i,!t||ye.test(e)&&d(t.parentNode)||t),i},C.sortStable=F.split("").sort(Y).join("")===F,C.detectDuplicates=!!j,O(),C.sortDetached=r(function(e){return 1&e.compareDocumentPosition(N.createElement("fieldset"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),C.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,i){var n;if(!i)return e[t]===!0?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),t}(e);ve.find=we,ve.expr=we.selectors,ve.expr[":"]=ve.expr.pseudos,ve.uniqueSort=ve.unique=we.uniqueSort,ve.text=we.getText,ve.isXMLDoc=we.isXML,ve.contains=we.contains,ve.escapeSelector=we.escape;var Te=function(e,t,i){for(var n=[],r=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&ve(e).is(i))break;n.push(e)}return n},Ce=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},xe=ve.expr.match.needsContext,ke=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Se=/^.[^:#\[\.,]*$/;ve.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?ve.find.matchesSelector(n,e)?[n]:[]:ve.find.matches(e,ve.grep(t,function(e){return 1===e.nodeType}))},ve.fn.extend({find:function(e){var t,i,n=this.length,r=this;if("string"!=typeof e)return this.pushStack(ve(e).filter(function(){for(t=0;t<n;t++)if(ve.contains(r[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)ve.find(e,r[t],i);return n>1?ve.uniqueSort(i):i},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(e){return!!o(this,"string"==typeof e&&xe.test(e)?ve(e):e||[],!1).length}});var _e,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Ae=ve.fn.init=function(e,t,i){var n,r;if(!e)return this;if(i=i||_e,"string"==typeof e){if(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ee.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof ve?t[0]:t,ve.merge(this,ve.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:ie,!0)),ke.test(n[1])&&ve.isPlainObject(t))for(n in t)ve.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return r=ie.getElementById(n[2]),r&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):ve.isFunction(e)?void 0!==i.ready?i.ready(e):e(ve):ve.makeArray(e,this)};Ae.prototype=ve.fn,_e=ve(ie);var Pe=/^(?:parents|prev(?:Until|All))/,Me={children:!0,contents:!0,next:!0,prev:!0};ve.fn.extend({has:function(e){var t=ve(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(ve.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,r=this.length,o=[],s="string"!=typeof e&&ve(e);if(!xe.test(e))for(;n<r;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(s?s.index(i)>-1:1===i.nodeType&&ve.find.matchesSelector(i,e))){o.push(i);break}return this.pushStack(o.length>1?ve.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?ae.call(ve(e),this[0]):ae.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ve.uniqueSort(ve.merge(this.get(),ve(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ve.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Te(e,"parentNode")},parentsUntil:function(e,t,i){return Te(e,"parentNode",i)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return Te(e,"nextSibling")},prevAll:function(e){return Te(e,"previousSibling")},nextUntil:function(e,t,i){return Te(e,"nextSibling",i)},prevUntil:function(e,t,i){return Te(e,"previousSibling",i)},siblings:function(e){return Ce((e.parentNode||{}).firstChild,e)},children:function(e){return Ce(e.firstChild)},contents:function(e){return r(e,"iframe")?e.contentDocument:(r(e,"template")&&(e=e.content||e),ve.merge([],e.childNodes))}},function(e,t){ve.fn[e]=function(i,n){var r=ve.map(this,t,i);return"Until"!==e.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=ve.filter(n,r)),this.length>1&&(Me[e]||ve.uniqueSort(r),Pe.test(e)&&r.reverse()),this.pushStack(r)}});var je=/[^\x20\t\r\n\f]+/g;ve.Callbacks=function(e){e="string"==typeof e?a(e):ve.extend({},e);var t,i,n,r,o=[],s=[],l=-1,c=function(){for(r=r||e.once,n=t=!0;s.length;l=-1)for(i=s.shift();++l<o.length;)o[l].apply(i[0],i[1])===!1&&e.stopOnFalse&&(l=o.length,i=!1);e.memory||(i=!1),t=!1,r&&(o=i?[]:"")},u={add:function(){return o&&(i&&!t&&(l=o.length-1,s.push(i)),function n(t){ve.each(t,function(t,i){ve.isFunction(i)?e.unique&&u.has(i)||o.push(i):i&&i.length&&"string"!==ve.type(i)&&n(i)})}(arguments),i&&!t&&c()),this},remove:function(){return ve.each(arguments,function(e,t){for(var i;(i=ve.inArray(t,o,i))>-1;)o.splice(i,1),i<=l&&l--}),this},has:function(e){return e?ve.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=i="",this},disabled:function(){return!o},lock:function(){return r=s=[],i||t||(o=i=""),this},locked:function(){return!!r},fireWith:function(e,i){return r||(i=i||[],i=[e,i.slice?i.slice():i],s.push(i),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!n}};return u},ve.extend({Deferred:function(t){var i=[["notify","progress",ve.Callbacks("memory"),ve.Callbacks("memory"),2],["resolve","done",ve.Callbacks("once memory"),ve.Callbacks("once memory"),0,"resolved"],["reject","fail",ve.Callbacks("once memory"),ve.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return r.then(null,e)},pipe:function(){var e=arguments;return ve.Deferred(function(t){ve.each(i,function(i,n){var r=ve.isFunction(e[n[4]])&&e[n[4]];o[n[1]](function(){var e=r&&r.apply(this,arguments);e&&ve.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[n[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,n,r){function o(t,i,n,r){return function(){var a=this,u=arguments,d=function(){var e,d;if(!(t<s)){if(e=n.apply(a,u),e===i.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,ve.isFunction(d)?r?d.call(e,o(s,i,l,r),o(s,i,c,r)):(s++,d.call(e,o(s,i,l,r),o(s,i,c,r),o(s,i,l,i.notifyWith))):(n!==l&&(a=void 0,u=[e]),(r||i.resolveWith)(a,u))}},p=r?d:function(){try{d()}catch(e){ve.Deferred.exceptionHook&&ve.Deferred.exceptionHook(e,p.stackTrace),t+1>=s&&(n!==c&&(a=void 0,u=[e]),i.rejectWith(a,u))}};t?p():(ve.Deferred.getStackHook&&(p.stackTrace=ve.Deferred.getStackHook()),e.setTimeout(p))}}var s=0;return ve.Deferred(function(e){i[0][3].add(o(0,e,ve.isFunction(r)?r:l,e.notifyWith)),i[1][3].add(o(0,e,ve.isFunction(t)?t:l)),i[2][3].add(o(0,e,ve.isFunction(n)?n:c))}).promise()},promise:function(e){return null!=e?ve.extend(e,r):r}},o={};return ve.each(i,function(e,t){var s=t[2],a=t[5];r[t[1]]=s.add,a&&s.add(function(){n=a},i[3-e][2].disable,i[0][2].lock),s.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=s.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,i=t,n=Array(i),r=re.call(arguments),o=ve.Deferred(),s=function(e){return function(i){n[e]=this,r[e]=arguments.length>1?re.call(arguments):i,--t||o.resolveWith(n,r)}};if(t<=1&&(u(e,o.done(s(i)).resolve,o.reject,!t),"pending"===o.state()||ve.isFunction(r[i]&&r[i].then)))return o.then();for(;i--;)u(r[i],s(i),o.reject);return o.promise()}});var Oe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ve.Deferred.exceptionHook=function(t,i){e.console&&e.console.warn&&t&&Oe.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,i)},ve.readyException=function(t){e.setTimeout(function(){throw t})};var Ne=ve.Deferred();ve.fn.ready=function(e){return Ne.then(e)["catch"](function(e){ve.readyException(e)}),this},ve.extend({isReady:!1,readyWait:1,ready:function(e){(e===!0?--ve.readyWait:ve.isReady)||(ve.isReady=!0,e!==!0&&--ve.readyWait>0||Ne.resolveWith(ie,[ve]))}}),ve.ready.then=Ne.then,"complete"===ie.readyState||"loading"!==ie.readyState&&!ie.documentElement.doScroll?e.setTimeout(ve.ready):(ie.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var De=function(e,t,i,n,r,o,s){var a=0,l=e.length,c=null==i;if("object"===ve.type(i)){r=!0;for(a in i)De(e,t,a,i[a],!0,o,s)}else if(void 0!==n&&(r=!0,ve.isFunction(n)||(s=!0),c&&(s?(t.call(e,n),t=null):(c=t,t=function(e,t,i){return c.call(ve(e),i)})),t))for(;a<l;a++)t(e[a],i,s?n:n.call(e[a],a,t(e[a],i)));return r?e:c?t.call(e):l?t(e[0],i):o},$e=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};p.uid=1,p.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$e(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,r=this.cache(e);if("string"==typeof t)r[ve.camelCase(t)]=i;else for(n in t)r[ve.camelCase(n)]=t[n];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][ve.camelCase(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){Array.isArray(t)?t=t.map(ve.camelCase):(t=ve.camelCase(t),t=t in n?[t]:t.match(je)||[]),i=t.length;for(;i--;)delete n[t[i]]}(void 0===t||ve.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ve.isEmptyObject(t)}};var Le=new p,Ie=new p,ze=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,He=/[A-Z]/g;ve.extend({hasData:function(e){return Ie.hasData(e)||Le.hasData(e)},data:function(e,t,i){return Ie.access(e,t,i)},removeData:function(e,t){Ie.remove(e,t)},_data:function(e,t,i){return Le.access(e,t,i)},_removeData:function(e,t){Le.remove(e,t)}}),ve.fn.extend({data:function(e,t){var i,n,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=Ie.get(o),1===o.nodeType&&!Le.get(o,"hasDataAttrs"))){for(i=s.length;i--;)s[i]&&(n=s[i].name,0===n.indexOf("data-")&&(n=ve.camelCase(n.slice(5)),f(o,n,r[n])));Le.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Ie.set(this,e)}):De(this,function(t){var i;if(o&&void 0===t){if(i=Ie.get(o,e),void 0!==i)return i;if(i=f(o,e),void 0!==i)return i}else this.each(function(){Ie.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ie.remove(this,e)})}}),ve.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=Le.get(e,t),i&&(!n||Array.isArray(i)?n=Le.access(e,t,ve.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=ve.queue(e,t),n=i.length,r=i.shift(),o=ve._queueHooks(e,t),s=function(){ve.dequeue(e,t)};"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===t&&i.unshift("inprogress"),delete o.stop,r.call(e,s,o)),!n&&o&&o.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return Le.get(e,i)||Le.access(e,i,{empty:ve.Callbacks("once memory").add(function(){Le.remove(e,[t+"queue",i])})})}}),ve.fn.extend({queue:function(e,t){var i=2;return"string"!=typeof e&&(t=e,e="fx",i--),arguments.length<i?ve.queue(this[0],e):void 0===t?this:this.each(function(){var i=ve.queue(this,e,t);ve._queueHooks(this,e),"fx"===e&&"inprogress"!==i[0]&&ve.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ve.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,r=ve.Deferred(),o=this,s=this.length,a=function(){--n||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)i=Le.get(o[s],e+"queueHooks"),i&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(t)}});var Fe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Re=new RegExp("^(?:([+-])=|)("+Fe+")([a-z%]*)$","i"),Be=["Top","Right","Bottom","Left"],qe=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&ve.contains(e.ownerDocument,e)&&"none"===ve.css(e,"display")},We=function(e,t,i,n){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];r=i.apply(e,n||[]);for(o in t)e.style[o]=s[o];return r},Ve={};ve.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){qe(this)?ve(this).show():ve(this).hide()})}});var Xe=/^(?:checkbox|radio)$/i,Ye=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ge=/^$|\/(?:java|ecma)script/i,Ue={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ue.optgroup=Ue.option,Ue.tbody=Ue.tfoot=Ue.colgroup=Ue.caption=Ue.thead,Ue.th=Ue.td;var Ke=/<|&#?\w+;/;!function(){var e=ie.createDocumentFragment(),t=e.appendChild(ie.createElement("div")),i=ie.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),t.appendChild(i),he.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",he.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Qe=ie.documentElement,Je=/^key/,Ze=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,et=/^([^.]*)(?:\.(.+)|)/;ve.event={global:{},add:function(e,t,i,n,r){var o,s,a,l,c,u,d,p,h,f,v,g=Le.get(e);if(g)for(i.handler&&(o=i,i=o.handler,r=o.selector),r&&ve.find.matchesSelector(Qe,r),i.guid||(i.guid=ve.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(t){return"undefined"!=typeof ve&&ve.event.triggered!==t.type?ve.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(je)||[""],c=t.length;c--;)a=et.exec(t[c])||[],h=v=a[1],f=(a[2]||"").split(".").sort(),h&&(d=ve.event.special[h]||{},h=(r?d.delegateType:d.bindType)||h,d=ve.event.special[h]||{},u=ve.extend({type:h,origType:v,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&ve.expr.match.needsContext.test(r),namespace:f.join(".")},o),(p=l[h])||(p=l[h]=[],p.delegateCount=0,d.setup&&d.setup.call(e,n,f,s)!==!1||e.addEventListener&&e.addEventListener(h,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=i.guid)),r?p.splice(p.delegateCount++,0,u):p.push(u),ve.event.global[h]=!0)},remove:function(e,t,i,n,r){var o,s,a,l,c,u,d,p,h,f,v,g=Le.hasData(e)&&Le.get(e);if(g&&(l=g.events)){for(t=(t||"").match(je)||[""],c=t.length;c--;)if(a=et.exec(t[c])||[],h=v=a[1],f=(a[2]||"").split(".").sort(),h){for(d=ve.event.special[h]||{},h=(n?d.delegateType:d.bindType)||h,p=l[h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)u=p[o],!r&&v!==u.origType||i&&i.guid!==u.guid||a&&!a.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&d.teardown.call(e,f,g.handle)!==!1||ve.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)ve.event.remove(e,h+t[c],i,n,!0);ve.isEmptyObject(l)&&Le.remove(e,"handle events")}},dispatch:function(e){var t,i,n,r,o,s,a=ve.event.fix(e),l=new Array(arguments.length),c=(Le.get(this,"events")||{})[a.type]||[],u=ve.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,a)!==!1){for(s=ve.event.handlers.call(this,a,c),t=0;(r=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(o=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,n=((ve.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l),void 0!==n&&(a.result=n)===!1&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(e,t){var i,n,r,o,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||c.disabled!==!0)){for(o=[],s={},i=0;i<l;i++)n=t[i],r=n.selector+" ",void 0===s[r]&&(s[r]=n.needsContext?ve(r,this).index(c)>-1:ve.find(r,this,null,[c]).length),s[r]&&o.push(n);o.length&&a.push({elem:c,handlers:o})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(ve.Event.prototype,e,{enumerable:!0,configurable:!0,get:ve.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[ve.expando]?e:new ve.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==x()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===x()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(e){return r(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ve.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},ve.Event=function(e,t){return this instanceof ve.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?T:C,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&ve.extend(this,t),this.timeStamp=e&&e.timeStamp||ve.now(),void(this[ve.expando]=!0)):new ve.Event(e,t)},ve.Event.prototype={constructor:ve.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=T,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=T,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=T,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ve.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Je.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ze.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},ve.event.addProp),ve.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ve.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===n||ve.contains(n,r))||(e.type=o.origType,i=o.handler.apply(this,arguments),e.type=t),i}}}),ve.fn.extend({on:function(e,t,i,n){return k(this,e,t,i,n)},one:function(e,t,i,n){return k(this,e,t,i,n,1)},off:function(e,t,i){var n,r;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,ve(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return t!==!1&&"function"!=typeof t||(i=t,t=void 0),i===!1&&(i=C),this.each(function(){ve.event.remove(this,e,i,t)})}});var tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,it=/<script|<style|<link/i,nt=/checked\s*(?:[^=]|=\s*.checked.)/i,rt=/^true\/(.*)/,ot=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ve.extend({htmlPrefilter:function(e){return e.replace(tt,"<$1></$2>")},clone:function(e,t,i){var n,r,o,s,a=e.cloneNode(!0),l=ve.contains(e.ownerDocument,e);if(!(he.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ve.isXMLDoc(e)))for(s=y(a),o=y(e),n=0,r=o.length;n<r;n++)P(o[n],s[n]);if(t)if(i)for(o=o||y(e),s=s||y(a),n=0,r=o.length;n<r;n++)A(o[n],s[n]);else A(e,a);return s=y(a,"script"),s.length>0&&b(s,!l&&y(e,"script")),a},cleanData:function(e){for(var t,i,n,r=ve.event.special,o=0;void 0!==(i=e[o]);o++)if($e(i)){if(t=i[Le.expando]){if(t.events)for(n in t.events)r[n]?ve.event.remove(i,n):ve.removeEvent(i,n,t.handle);i[Le.expando]=void 0}i[Ie.expando]&&(i[Ie.expando]=void 0)}}}),ve.fn.extend({detach:function(e){return j(this,e,!0)},remove:function(e){return j(this,e)},text:function(e){return De(this,function(e){return void 0===e?ve.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return M(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=S(this,e);t.appendChild(e)}})},prepend:function(){return M(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=S(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return M(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return M(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ve.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ve.clone(this,e,t)})},html:function(e){return De(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!it.test(e)&&!Ue[(Ye.exec(e)||["",""])[1].toLowerCase()]){e=ve.htmlPrefilter(e);try{for(;i<n;i++)t=this[i]||{},1===t.nodeType&&(ve.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(r){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return M(this,arguments,function(t){var i=this.parentNode;ve.inArray(this,e)<0&&(ve.cleanData(y(this)),i&&i.replaceChild(t,this))},e)}}),ve.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ve.fn[e]=function(e){for(var i,n=[],r=ve(e),o=r.length-1,s=0;s<=o;s++)i=s===o?this:this.clone(!0),ve(r[s])[t](i),se.apply(n,i.get());return this.pushStack(n)}});var st=/^margin/,at=new RegExp("^("+Fe+")(?!px)[a-z%]+$","i"),lt=function(t){var i=t.ownerDocument.defaultView;return i&&i.opener||(i=e),i.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Qe.appendChild(s);var t=e.getComputedStyle(a);i="1%"!==t.top,o="2px"===t.marginLeft,n="4px"===t.width,a.style.marginRight="50%",r="4px"===t.marginRight,Qe.removeChild(s),a=null}}var i,n,r,o,s=ie.createElement("div"),a=ie.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",he.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),ve.extend(he,{pixelPosition:function(){return t(),i},boxSizingReliable:function(){return t(),n},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),o}}))}();var ct=/^(none|table(?!-c[ea]).+)/,ut=/^--/,dt={position:"absolute",visibility:"hidden",display:"block"},pt={letterSpacing:"0",fontWeight:"400"},ht=["Webkit","Moz","ms"],ft=ie.createElement("div").style;ve.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=O(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=ve.camelCase(t),l=ut.test(t),c=e.style;return l||(t=$(a)),s=ve.cssHooks[t]||ve.cssHooks[a],void 0===i?s&&"get"in s&&void 0!==(r=s.get(e,!1,n))?r:c[t]:(o=typeof i,"string"===o&&(r=Re.exec(i))&&r[1]&&(i=v(e,t,r),o="number"),null!=i&&i===i&&("number"===o&&(i+=r&&r[3]||(ve.cssNumber[a]?"":"px")),he.clearCloneStyle||""!==i||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(i=s.set(e,i,n))||(l?c.setProperty(t,i):c[t]=i)),void 0)}},css:function(e,t,i,n){var r,o,s,a=ve.camelCase(t),l=ut.test(t);return l||(t=$(a)),s=ve.cssHooks[t]||ve.cssHooks[a],s&&"get"in s&&(r=s.get(e,!0,i)),void 0===r&&(r=O(e,t,n)),"normal"===r&&t in pt&&(r=pt[t]),""===i||i?(o=parseFloat(r),i===!0||isFinite(o)?o||0:r):r}}),ve.each(["height","width"],function(e,t){ve.cssHooks[t]={get:function(e,i,n){if(i)return!ct.test(ve.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?z(e,t,n):We(e,dt,function(){return z(e,t,n)})},set:function(e,i,n){var r,o=n&&lt(e),s=n&&I(e,t,n,"border-box"===ve.css(e,"boxSizing",!1,o),o);return s&&(r=Re.exec(i))&&"px"!==(r[3]||"px")&&(e.style[t]=i,i=ve.css(e,t)),L(e,i,s)}}}),ve.cssHooks.marginLeft=N(he.reliableMarginLeft,function(e,t){if(t)return(parseFloat(O(e,"marginLeft"))||e.getBoundingClientRect().left-We(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ve.each({margin:"",padding:"",border:"Width"},function(e,t){ve.cssHooks[e+t]={expand:function(i){for(var n=0,r={},o="string"==typeof i?i.split(" "):[i];n<4;n++)r[e+Be[n]+t]=o[n]||o[n-2]||o[0];return r}},st.test(e)||(ve.cssHooks[e+t].set=L)}),ve.fn.extend({css:function(e,t){return De(this,function(e,t,i){var n,r,o={},s=0;if(Array.isArray(t)){for(n=lt(e),r=t.length;s<r;s++)o[t[s]]=ve.css(e,t[s],!1,n);return o}return void 0!==i?ve.style(e,t,i):ve.css(e,t)},e,t,arguments.length>1)}}),ve.Tween=H,H.prototype={constructor:H,init:function(e,t,i,n,r,o){this.elem=e,this.prop=i,this.easing=r||ve.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=o||(ve.cssNumber[i]?"":"px")},cur:function(){var e=H.propHooks[this.prop];return e&&e.get?e.get(this):H.propHooks._default.get(this)},run:function(e){var t,i=H.propHooks[this.prop];return this.options.duration?this.pos=t=ve.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):H.propHooks._default.set(this),this}},H.prototype.init.prototype=H.prototype,H.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ve.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){ve.fx.step[e.prop]?ve.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[ve.cssProps[e.prop]]&&!ve.cssHooks[e.prop]?e.elem[e.prop]=e.now:ve.style(e.elem,e.prop,e.now+e.unit)}}},H.propHooks.scrollTop=H.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ve.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ve.fx=H.prototype.init,ve.fx.step={};var vt,gt,mt=/^(?:toggle|show|hide)$/,yt=/queueHooks$/;ve.Animation=ve.extend(X,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return v(i.elem,e,Re.exec(t),i),i}]},tweener:function(e,t){ve.isFunction(e)?(t=e,e=["*"]):e=e.match(je);for(var i,n=0,r=e.length;n<r;n++)i=e[n],X.tweeners[i]=X.tweeners[i]||[],X.tweeners[i].unshift(t)},prefilters:[W],prefilter:function(e,t){t?X.prefilters.unshift(e):X.prefilters.push(e)}}),ve.speed=function(e,t,i){var n=e&&"object"==typeof e?ve.extend({},e):{complete:i||!i&&t||ve.isFunction(e)&&e,duration:e,easing:i&&t||t&&!ve.isFunction(t)&&t};return ve.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in ve.fx.speeds?n.duration=ve.fx.speeds[n.duration]:n.duration=ve.fx.speeds._default),null!=n.queue&&n.queue!==!0||(n.queue="fx"),n.old=n.complete,n.complete=function(){ve.isFunction(n.old)&&n.old.call(this),n.queue&&ve.dequeue(this,n.queue)},n},ve.fn.extend({fadeTo:function(e,t,i,n){return this.filter(qe).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(e,t,i,n){var r=ve.isEmptyObject(e),o=ve.speed(t,i,n),s=function(){var t=X(this,ve.extend({},e),o);(r||Le.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,i){var n=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof e&&(i=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=ve.timers,s=Le.get(this);if(r)s[r]&&s[r].stop&&n(s[r]);else for(r in s)s[r]&&s[r].stop&&yt.test(r)&&n(s[r]);
for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(i),t=!1,o.splice(r,1));!t&&i||ve.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,i=Le.get(this),n=i[e+"queue"],r=i[e+"queueHooks"],o=ve.timers,s=n?n.length:0;for(i.finish=!0,ve.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete i.finish})}}),ve.each(["toggle","show","hide"],function(e,t){var i=ve.fn[t];ve.fn[t]=function(e,n,r){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(B(t,!0),e,n,r)}}),ve.each({slideDown:B("show"),slideUp:B("hide"),slideToggle:B("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ve.fn[e]=function(e,i,n){return this.animate(t,e,i,n)}}),ve.timers=[],ve.fx.tick=function(){var e,t=0,i=ve.timers;for(vt=ve.now();t<i.length;t++)e=i[t],e()||i[t]!==e||i.splice(t--,1);i.length||ve.fx.stop(),vt=void 0},ve.fx.timer=function(e){ve.timers.push(e),ve.fx.start()},ve.fx.interval=13,ve.fx.start=function(){gt||(gt=!0,F())},ve.fx.stop=function(){gt=null},ve.fx.speeds={slow:600,fast:200,_default:400},ve.fn.delay=function(t,i){return t=ve.fx?ve.fx.speeds[t]||t:t,i=i||"fx",this.queue(i,function(i,n){var r=e.setTimeout(i,t);n.stop=function(){e.clearTimeout(r)}})},function(){var e=ie.createElement("input"),t=ie.createElement("select"),i=t.appendChild(ie.createElement("option"));e.type="checkbox",he.checkOn=""!==e.value,he.optSelected=i.selected,e=ie.createElement("input"),e.value="t",e.type="radio",he.radioValue="t"===e.value}();var bt,wt=ve.expr.attrHandle;ve.fn.extend({attr:function(e,t){return De(this,ve.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ve.removeAttr(this,e)})}}),ve.extend({attr:function(e,t,i){var n,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?ve.prop(e,t,i):(1===o&&ve.isXMLDoc(e)||(r=ve.attrHooks[t.toLowerCase()]||(ve.expr.match.bool.test(t)?bt:void 0)),void 0!==i?null===i?void ve.removeAttr(e,t):r&&"set"in r&&void 0!==(n=r.set(e,i,t))?n:(e.setAttribute(t,i+""),i):r&&"get"in r&&null!==(n=r.get(e,t))?n:(n=ve.find.attr(e,t),null==n?void 0:n))},attrHooks:{type:{set:function(e,t){if(!he.radioValue&&"radio"===t&&r(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,r=t&&t.match(je);if(r&&1===e.nodeType)for(;i=r[n++];)e.removeAttribute(i)}}),bt={set:function(e,t,i){return t===!1?ve.removeAttr(e,i):e.setAttribute(i,i),i}},ve.each(ve.expr.match.bool.source.match(/\w+/g),function(e,t){var i=wt[t]||ve.find.attr;wt[t]=function(e,t,n){var r,o,s=t.toLowerCase();return n||(o=wt[s],wt[s]=r,r=null!=i(e,t,n)?s:null,wt[s]=o),r}});var Tt=/^(?:input|select|textarea|button)$/i,Ct=/^(?:a|area)$/i;ve.fn.extend({prop:function(e,t){return De(this,ve.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[ve.propFix[e]||e]})}}),ve.extend({prop:function(e,t,i){var n,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ve.isXMLDoc(e)||(t=ve.propFix[t]||t,r=ve.propHooks[t]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(e,i,t))?n:e[t]=i:r&&"get"in r&&null!==(n=r.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=ve.find.attr(e,"tabindex");return t?parseInt(t,10):Tt.test(e.nodeName)||Ct.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),he.optSelected||(ve.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ve.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ve.propFix[this.toLowerCase()]=this}),ve.fn.extend({addClass:function(e){var t,i,n,r,o,s,a,l=0;if(ve.isFunction(e))return this.each(function(t){ve(this).addClass(e.call(this,t,G(this)))});if("string"==typeof e&&e)for(t=e.match(je)||[];i=this[l++];)if(r=G(i),n=1===i.nodeType&&" "+Y(r)+" "){for(s=0;o=t[s++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");a=Y(n),r!==a&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,n,r,o,s,a,l=0;if(ve.isFunction(e))return this.each(function(t){ve(this).removeClass(e.call(this,t,G(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(je)||[];i=this[l++];)if(r=G(i),n=1===i.nodeType&&" "+Y(r)+" "){for(s=0;o=t[s++];)for(;n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");a=Y(n),r!==a&&i.setAttribute("class",a)}return this},toggleClass:function(e,t){var i=typeof e;return"boolean"==typeof t&&"string"===i?t?this.addClass(e):this.removeClass(e):ve.isFunction(e)?this.each(function(i){ve(this).toggleClass(e.call(this,i,G(this),t),t)}):this.each(function(){var t,n,r,o;if("string"===i)for(n=0,r=ve(this),o=e.match(je)||[];t=o[n++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==i||(t=G(this),t&&Le.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":Le.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&(" "+Y(G(i))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;ve.fn.extend({val:function(e){var t,i,n,r=this[0];{if(arguments.length)return n=ve.isFunction(e),this.each(function(i){var r;1===this.nodeType&&(r=n?e.call(this,i,ve(this).val()):e,null==r?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=ve.map(r,function(e){return null==e?"":e+""})),t=ve.valHooks[this.type]||ve.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return t=ve.valHooks[r.type]||ve.valHooks[r.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(i=t.get(r,"value"))?i:(i=r.value,"string"==typeof i?i.replace(xt,""):null==i?"":i)}}}),ve.extend({valHooks:{option:{get:function(e){var t=ve.find.attr(e,"value");return null!=t?t:Y(ve.text(e))}},select:{get:function(e){var t,i,n,o=e.options,s=e.selectedIndex,a="select-one"===e.type,l=a?null:[],c=a?s+1:o.length;for(n=s<0?c:a?s:0;n<c;n++)if(i=o[n],(i.selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!r(i.parentNode,"optgroup"))){if(t=ve(i).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var i,n,r=e.options,o=ve.makeArray(t),s=r.length;s--;)n=r[s],(n.selected=ve.inArray(ve.valHooks.option.get(n),o)>-1)&&(i=!0);return i||(e.selectedIndex=-1),o}}}}),ve.each(["radio","checkbox"],function(){ve.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=ve.inArray(ve(e).val(),t)>-1}},he.checkOn||(ve.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var kt=/^(?:focusinfocus|focusoutblur)$/;ve.extend(ve.event,{trigger:function(t,i,n,r){var o,s,a,l,c,u,d,p=[n||ie],h=ue.call(t,"type")?t.type:t,f=ue.call(t,"namespace")?t.namespace.split("."):[];if(s=a=n=n||ie,3!==n.nodeType&&8!==n.nodeType&&!kt.test(h+ve.event.triggered)&&(h.indexOf(".")>-1&&(f=h.split("."),h=f.shift(),f.sort()),c=h.indexOf(":")<0&&"on"+h,t=t[ve.expando]?t:new ve.Event(h,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),i=null==i?[t]:ve.makeArray(i,[t]),d=ve.event.special[h]||{},r||!d.trigger||d.trigger.apply(n,i)!==!1)){if(!r&&!d.noBubble&&!ve.isWindow(n)){for(l=d.delegateType||h,kt.test(l+h)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(n.ownerDocument||ie)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=p[o++])&&!t.isPropagationStopped();)t.type=o>1?l:d.bindType||h,u=(Le.get(s,"events")||{})[t.type]&&Le.get(s,"handle"),u&&u.apply(s,i),u=c&&s[c],u&&u.apply&&$e(s)&&(t.result=u.apply(s,i),t.result===!1&&t.preventDefault());return t.type=h,r||t.isDefaultPrevented()||d._default&&d._default.apply(p.pop(),i)!==!1||!$e(n)||c&&ve.isFunction(n[h])&&!ve.isWindow(n)&&(a=n[c],a&&(n[c]=null),ve.event.triggered=h,n[h](),ve.event.triggered=void 0,a&&(n[c]=a)),t.result}},simulate:function(e,t,i){var n=ve.extend(new ve.Event,i,{type:e,isSimulated:!0});ve.event.trigger(n,null,t)}}),ve.fn.extend({trigger:function(e,t){return this.each(function(){ve.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return ve.event.trigger(e,t,i,!0)}}),ve.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){ve.fn[t]=function(e,i){return arguments.length>0?this.on(t,null,e,i):this.trigger(t)}}),ve.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),he.focusin="onfocusin"in e,he.focusin||ve.each({focus:"focusin",blur:"focusout"},function(e,t){var i=function(e){ve.event.simulate(t,e.target,ve.event.fix(e))};ve.event.special[t]={setup:function(){var n=this.ownerDocument||this,r=Le.access(n,t);r||n.addEventListener(e,i,!0),Le.access(n,t,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=Le.access(n,t)-1;r?Le.access(n,t,r):(n.removeEventListener(e,i,!0),Le.remove(n,t))}}});var St=e.location,_t=ve.now(),Et=/\?/;ve.parseXML=function(t){var i;if(!t||"string"!=typeof t)return null;try{i=(new e.DOMParser).parseFromString(t,"text/xml")}catch(n){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||ve.error("Invalid XML: "+t),i};var At=/\[\]$/,Pt=/\r?\n/g,Mt=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;ve.param=function(e,t){var i,n=[],r=function(e,t){var i=ve.isFunction(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(e)||e.jquery&&!ve.isPlainObject(e))ve.each(e,function(){r(this.name,this.value)});else for(i in e)U(i,e[i],t,r);return n.join("&")},ve.fn.extend({serialize:function(){return ve.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ve.prop(this,"elements");return e?ve.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ve(this).is(":disabled")&&jt.test(this.nodeName)&&!Mt.test(e)&&(this.checked||!Xe.test(e))}).map(function(e,t){var i=ve(this).val();return null==i?null:Array.isArray(i)?ve.map(i,function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}}):{name:t.name,value:i.replace(Pt,"\r\n")}}).get()}});var Ot=/%20/g,Nt=/#.*$/,Dt=/([?&])_=[^&]*/,$t=/^(.*?):[ \t]*([^\r\n]*)$/gm,Lt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,It=/^(?:GET|HEAD)$/,zt=/^\/\//,Ht={},Ft={},Rt="*/".concat("*"),Bt=ie.createElement("a");Bt.href=St.href,ve.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:Lt.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":ve.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?J(J(e,ve.ajaxSettings),t):J(ve.ajaxSettings,e)},ajaxPrefilter:K(Ht),ajaxTransport:K(Ft),ajax:function(t,i){function n(t,i,n,a){var c,p,h,w,T,C=i;u||(u=!0,l&&e.clearTimeout(l),r=void 0,s=a||"",x.readyState=t>0?4:0,c=t>=200&&t<300||304===t,n&&(w=Z(f,x,n)),w=ee(f,w,x,c),c?(f.ifModified&&(T=x.getResponseHeader("Last-Modified"),T&&(ve.lastModified[o]=T),T=x.getResponseHeader("etag"),T&&(ve.etag[o]=T)),204===t||"HEAD"===f.type?C="nocontent":304===t?C="notmodified":(C=w.state,p=w.data,h=w.error,c=!h)):(h=C,!t&&C||(C="error",t<0&&(t=0))),x.status=t,x.statusText=(i||C)+"",c?m.resolveWith(v,[p,C,x]):m.rejectWith(v,[x,C,h]),x.statusCode(b),b=void 0,d&&g.trigger(c?"ajaxSuccess":"ajaxError",[x,f,c?p:h]),y.fireWith(v,[x,C]),d&&(g.trigger("ajaxComplete",[x,f]),--ve.active||ve.event.trigger("ajaxStop")))}"object"==typeof t&&(i=t,t=void 0),i=i||{};var r,o,s,a,l,c,u,d,p,h,f=ve.ajaxSetup({},i),v=f.context||f,g=f.context&&(v.nodeType||v.jquery)?ve(v):ve.event,m=ve.Deferred(),y=ve.Callbacks("once memory"),b=f.statusCode||{},w={},T={},C="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=$t.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?s:null},setRequestHeader:function(e,t){return null==u&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)x.always(e[x.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||C;return r&&r.abort(t),n(0,t),this}};if(m.promise(x),f.url=((t||f.url||St.href)+"").replace(zt,St.protocol+"//"),f.type=i.method||i.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(je)||[""],null==f.crossDomain){c=ie.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=Bt.protocol+"//"+Bt.host!=c.protocol+"//"+c.host}catch(k){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=ve.param(f.data,f.traditional)),Q(Ht,f,i,x),u)return x;d=ve.event&&f.global,d&&0===ve.active++&&ve.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!It.test(f.type),o=f.url.replace(Nt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Ot,"+")):(h=f.url.slice(o.length),f.data&&(o+=(Et.test(o)?"&":"?")+f.data,delete f.data),f.cache===!1&&(o=o.replace(Dt,"$1"),h=(Et.test(o)?"&":"?")+"_="+_t++ +h),f.url=o+h),f.ifModified&&(ve.lastModified[o]&&x.setRequestHeader("If-Modified-Since",ve.lastModified[o]),ve.etag[o]&&x.setRequestHeader("If-None-Match",ve.etag[o])),(f.data&&f.hasContent&&f.contentType!==!1||i.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Rt+"; q=0.01":""):f.accepts["*"]);for(p in f.headers)x.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(f.beforeSend.call(v,x,f)===!1||u))return x.abort();if(C="abort",y.add(f.complete),x.done(f.success),x.fail(f.error),r=Q(Ft,f,i,x)){if(x.readyState=1,d&&g.trigger("ajaxSend",[x,f]),u)return x;f.async&&f.timeout>0&&(l=e.setTimeout(function(){x.abort("timeout")},f.timeout));try{u=!1,r.send(w,n)}catch(k){if(u)throw k;n(-1,k)}}else n(-1,"No Transport");return x},getJSON:function(e,t,i){return ve.get(e,t,i,"json")},getScript:function(e,t){return ve.get(e,void 0,t,"script")}}),ve.each(["get","post"],function(e,t){ve[t]=function(e,i,n,r){return ve.isFunction(i)&&(r=r||n,n=i,i=void 0),ve.ajax(ve.extend({url:e,type:t,dataType:r,data:i,success:n},ve.isPlainObject(e)&&e))}}),ve._evalUrl=function(e){return ve.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},ve.fn.extend({wrapAll:function(e){var t;return this[0]&&(ve.isFunction(e)&&(e=e.call(this[0])),t=ve(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return ve.isFunction(e)?this.each(function(t){ve(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ve(this),i=t.contents();i.length?i.wrapAll(e):t.append(e)})},wrap:function(e){var t=ve.isFunction(e);return this.each(function(i){ve(this).wrapAll(t?e.call(this,i):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){ve(this).replaceWith(this.childNodes)}),this}}),ve.expr.pseudos.hidden=function(e){return!ve.expr.pseudos.visible(e)},ve.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},ve.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var qt={0:200,1223:204},Wt=ve.ajaxSettings.xhr();he.cors=!!Wt&&"withCredentials"in Wt,he.ajax=Wt=!!Wt,ve.ajaxTransport(function(t){var i,n;if(he.cors||Wt&&!t.crossDomain)return{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);i=function(e){return function(){i&&(i=n=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(qt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),n=a.onerror=i("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){i&&n()})},i=i("abort");try{a.send(t.hasContent&&t.data||null)}catch(l){if(i)throw l}},abort:function(){i&&i()}}}),ve.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),ve.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ve.globalEval(e),e}}}),ve.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ve.ajaxTransport("script",function(e){if(e.crossDomain){var t,i;return{send:function(n,r){t=ve("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove(),i=null,e&&r("error"===e.type?404:200,e.type)}),ie.head.appendChild(t[0])},abort:function(){i&&i()}}}});var Vt=[],Xt=/(=)\?(?=&|$)|\?\?/;ve.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||ve.expando+"_"+_t++;return this[e]=!0,e}}),ve.ajaxPrefilter("json jsonp",function(t,i,n){var r,o,s,a=t.jsonp!==!1&&(Xt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=ve.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Xt,"$1"+r):t.jsonp!==!1&&(t.url+=(Et.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||ve.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){s=arguments},n.always(function(){void 0===o?ve(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=i.jsonpCallback,Vt.push(r)),s&&ve.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),he.createHTMLDocument=function(){var e=ie.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),ve.parseHTML=function(e,t,i){if("string"!=typeof e)return[];"boolean"==typeof t&&(i=t,t=!1);var n,r,o;return t||(he.createHTMLDocument?(t=ie.implementation.createHTMLDocument(""),n=t.createElement("base"),n.href=ie.location.href,t.head.appendChild(n)):t=ie),r=ke.exec(e),o=!i&&[],r?[t.createElement(r[1])]:(r=w([e],t,o),o&&o.length&&ve(o).remove(),ve.merge([],r.childNodes))},ve.fn.load=function(e,t,i){var n,r,o,s=this,a=e.indexOf(" ");return a>-1&&(n=Y(e.slice(a)),e=e.slice(0,a)),ve.isFunction(t)?(i=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&ve.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(n?ve("<div>").append(ve.parseHTML(e)).find(n):e)}).always(i&&function(e,t){s.each(function(){i.apply(this,o||[e.responseText,t,e])})}),this},ve.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ve.fn[t]=function(e){return this.on(t,e)}}),ve.expr.pseudos.animated=function(e){return ve.grep(ve.timers,function(t){return e===t.elem}).length},ve.offset={setOffset:function(e,t,i){var n,r,o,s,a,l,c,u=ve.css(e,"position"),d=ve(e),p={};"static"===u&&(e.style.position="relative"),a=d.offset(),o=ve.css(e,"top"),l=ve.css(e,"left"),c=("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1,c?(n=d.position(),s=n.top,r=n.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),ve.isFunction(t)&&(t=t.call(e,i,ve.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+r),"using"in t?t.using.call(e,p):d.css(p)}},ve.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ve.offset.setOffset(this,e,t)});var t,i,n,r,o=this[0];if(o)return o.getClientRects().length?(n=o.getBoundingClientRect(),t=o.ownerDocument,i=t.documentElement,r=t.defaultView,{top:n.top+r.pageYOffset-i.clientTop,left:n.left+r.pageXOffset-i.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,i=this[0],n={top:0,left:0};return"fixed"===ve.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),r(e[0],"html")||(n=e.offset()),n={top:n.top+ve.css(e[0],"borderTopWidth",!0),left:n.left+ve.css(e[0],"borderLeftWidth",!0)}),{top:t.top-n.top-ve.css(i,"marginTop",!0),left:t.left-n.left-ve.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===ve.css(e,"position");)e=e.offsetParent;return e||Qe})}}),ve.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var i="pageYOffset"===t;ve.fn[e]=function(n){return De(this,function(e,n,r){var o;return ve.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r?o?o[t]:e[n]:void(o?o.scrollTo(i?o.pageXOffset:r,i?r:o.pageYOffset):e[n]=r)},e,n,arguments.length)}}),ve.each(["top","left"],function(e,t){ve.cssHooks[t]=N(he.pixelPosition,function(e,i){if(i)return i=O(e,t),at.test(i)?ve(e).position()[t]+"px":i})}),ve.each({Height:"height",Width:"width"},function(e,t){ve.each({padding:"inner"+e,content:t,"":"outer"+e},function(i,n){ve.fn[n]=function(r,o){var s=arguments.length&&(i||"boolean"!=typeof r),a=i||(r===!0||o===!0?"margin":"border");return De(this,function(t,i,r){var o;return ve.isWindow(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?ve.css(t,i,a):ve.style(t,i,r,a)},t,s?r:void 0,s)}})}),ve.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)}}),ve.holdReady=function(e){e?ve.readyWait++:ve.ready(!0)},ve.isArray=Array.isArray,ve.parseJSON=JSON.parse,ve.nodeName=r,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ve});var Yt=e.jQuery,Gt=e.$;return ve.noConflict=function(t){return e.$===ve&&(e.$=Gt),t&&e.jQuery===ve&&(e.jQuery=Yt),ve},t||(e.jQuery=e.$=ve),ve}),!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.ProgressBar=e()}}(function(){var e;return function t(e,i,n){function r(s,a){if(!i[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=i[s]={exports:{}};e[s][0].call(u.exports,function(t){var i=e[s][1][t];return r(i?i:t)},u,u.exports,t,e,i,n)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<n.length;s++)r(n[s]);return r}({1:[function(t,i,n){(function(){var t=this||Function("return this")(),r=function(){"use strict";function r(){}function o(e,t){var i;for(i in e)Object.hasOwnProperty.call(e,i)&&t(i)}function s(e,t){return o(t,function(i){e[i]=t[i]}),e}function a(e,t){o(t,function(i){"undefined"==typeof e[i]&&(e[i]=t[i])})}function l(e,t,i,n,r,o,s){var a,l,u,d=o>e?0:(e-o)/r;for(a in t)t.hasOwnProperty(a)&&(l=s[a],u="function"==typeof l?l:f[l],t[a]=c(i[a],n[a],u,d));return t}function c(e,t,i,n){return e+(t-e)*i(n)}function u(e,t){var i=h.prototype.filter,n=e._filterArgs;o(i,function(r){"undefined"!=typeof i[r][t]&&i[r][t].apply(e,n)})}function d(e,t,i,n,r,o,s,a,c,d,p){T=t+i+n,C=Math.min(p||w(),T),x=C>=T,k=n-(T-C),e.isPlaying()&&(x?(c(s,e._attachment,k),e.stop(!0)):(e._scheduleId=d(e._timeoutHandler,y),u(e,"beforeTween"),t+i>C?l(1,r,o,s,1,1,a):l(C,r,o,s,n,t+i,a),u(e,"afterTween"),c(r,e._attachment,k)))}function p(e,t){var i={},n=typeof t;return"string"===n||"function"===n?o(e,function(e){i[e]=t}):o(e,function(e){i[e]||(i[e]=t[e]||g)}),i}function h(e,t){this._currentState=e||{},this._configured=!1,this._scheduleFunction=v,"undefined"!=typeof t&&this.setConfig(t)}var f,v,g="linear",m=500,y=1e3/60,b=Date.now?Date.now:function(){return+new Date},w="undefined"!=typeof SHIFTY_DEBUG_NOW?SHIFTY_DEBUG_NOW:b;v="undefined"!=typeof window?window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||window.mozCancelRequestAnimationFrame&&window.mozRequestAnimationFrame||setTimeout:setTimeout;var T,C,x,k;return h.prototype.tween=function(e){return this._isTweening?this:(void 0===e&&this._configured||this.setConfig(e),this._timestamp=w(),this._start(this.get(),this._attachment),this.resume())},h.prototype.setConfig=function(e){e=e||{},this._configured=!0,this._attachment=e.attachment,this._pausedAtTime=null,this._scheduleId=null,this._delay=e.delay||0,this._start=e.start||r,this._step=e.step||r,this._finish=e.finish||r,this._duration=e.duration||m,this._currentState=s({},e.from)||this.get(),this._originalState=this.get(),this._targetState=s({},e.to)||this.get();var t=this;this._timeoutHandler=function(){d(t,t._timestamp,t._delay,t._duration,t._currentState,t._originalState,t._targetState,t._easing,t._step,t._scheduleFunction)};var i=this._currentState,n=this._targetState;return a(n,i),this._easing=p(i,e.easing||g),this._filterArgs=[i,this._originalState,n,this._easing],u(this,"tweenCreated"),this},h.prototype.get=function(){return s({},this._currentState)},h.prototype.set=function(e){this._currentState=e},h.prototype.pause=function(){return this._pausedAtTime=w(),this._isPaused=!0,this},h.prototype.resume=function(){return this._isPaused&&(this._timestamp+=w()-this._pausedAtTime),this._isPaused=!1,this._isTweening=!0,this._timeoutHandler(),this},h.prototype.seek=function(e){e=Math.max(e,0);var t=w();return this._timestamp+e===0?this:(this._timestamp=t-e,this.isPlaying()||(this._isTweening=!0,this._isPaused=!1,d(this,this._timestamp,this._delay,this._duration,this._currentState,this._originalState,this._targetState,this._easing,this._step,this._scheduleFunction,t),this.pause()),this)},h.prototype.stop=function(e){return this._isTweening=!1,this._isPaused=!1,this._timeoutHandler=r,(t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.oCancelAnimationFrame||t.msCancelAnimationFrame||t.mozCancelRequestAnimationFrame||t.clearTimeout)(this._scheduleId),e&&(u(this,"beforeTween"),l(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),u(this,"afterTween"),u(this,"afterTweenEnd"),this._finish.call(this,this._currentState,this._attachment)),this},h.prototype.isPlaying=function(){return this._isTweening&&!this._isPaused},h.prototype.setScheduleFunction=function(e){this._scheduleFunction=e},h.prototype.dispose=function(){var e;for(e in this)this.hasOwnProperty(e)&&delete this[e]},h.prototype.filter={},h.prototype.formula={linear:function(e){return e}},f=h.prototype.formula,s(h,{now:w,each:o,tweenProps:l,tweenProp:c,applyFilter:u,shallowCopy:s,defaults:a,composeEasingObject:p}),"function"==typeof SHIFTY_DEBUG_NOW&&(t.timeoutHandler=d),"object"==typeof n?i.exports=h:"function"==typeof e&&e.amd?e(function(){return h}):"undefined"==typeof t.Tweenable&&(t.Tweenable=h),h}();!function(){r.shallowCopy(r.prototype.formula,{easeInQuad:function(e){return Math.pow(e,2)},easeOutQuad:function(e){return-(Math.pow(e-1,2)-1)},easeInOutQuad:function(e){return(e/=.5)<1?.5*Math.pow(e,2):-.5*((e-=2)*e-2)},easeInCubic:function(e){return Math.pow(e,3)},easeOutCubic:function(e){return Math.pow(e-1,3)+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*Math.pow(e,3):.5*(Math.pow(e-2,3)+2)},easeInQuart:function(e){return Math.pow(e,4)},easeOutQuart:function(e){return-(Math.pow(e-1,4)-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*Math.pow(e,4):-.5*((e-=2)*Math.pow(e,3)-2)},easeInQuint:function(e){return Math.pow(e,5)},easeOutQuint:function(e){return Math.pow(e-1,5)+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*Math.pow(e,5):.5*(Math.pow(e-2,5)+2)},easeInSine:function(e){return-Math.cos(e*(Math.PI/2))+1},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:-Math.pow(2,-10*e)+1},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(-Math.pow(2,-10*--e)+2)},easeInCirc:function(e){return-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-Math.pow(e-1,2))},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeOutBounce:function(e){return 1/2.75>e?7.5625*e*e:2/2.75>e?7.5625*(e-=1.5/2.75)*e+.75:2.5/2.75>e?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?.5*(e*e*(((t*=1.525)+1)*e-t)):.5*((e-=2)*e*(((t*=1.525)+1)*e+t)+2)},elastic:function(e){return-1*Math.pow(4,-8*e)*Math.sin((6*e-1)*(2*Math.PI)/2)+1},swingFromTo:function(e){var t=1.70158;return(e/=.5)<1?.5*(e*e*(((t*=1.525)+1)*e-t)):.5*((e-=2)*e*(((t*=1.525)+1)*e+t)+2)},swingFrom:function(e){var t=1.70158;return e*e*((t+1)*e-t)},swingTo:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},bounce:function(e){return 1/2.75>e?7.5625*e*e:2/2.75>e?7.5625*(e-=1.5/2.75)*e+.75:2.5/2.75>e?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},bouncePast:function(e){return 1/2.75>e?7.5625*e*e:2/2.75>e?2-(7.5625*(e-=1.5/2.75)*e+.75):2.5/2.75>e?2-(7.5625*(e-=2.25/2.75)*e+.9375):2-(7.5625*(e-=2.625/2.75)*e+.984375)},easeFromTo:function(e){return(e/=.5)<1?.5*Math.pow(e,4):-.5*((e-=2)*Math.pow(e,3)-2)},easeFrom:function(e){return Math.pow(e,4)},easeTo:function(e){return Math.pow(e,.25)}})}(),function(){function e(e,t,i,n,r,o){function s(e){return((h*e+f)*e+v)*e}function a(e){return((g*e+m)*e+y)*e}function l(e){return(3*h*e+2*f)*e+v}function c(e){return 1/(200*e)}function u(e,t){return a(p(e,t))}function d(e){return e>=0?e:0-e}function p(e,t){var i,n,r,o,a,c;for(r=e,c=0;8>c;c++){if(o=s(r)-e,d(o)<t)return r;if(a=l(r),d(a)<1e-6)break;r-=o/a}if(i=0,n=1,r=e,i>r)return i;if(r>n)return n;for(;n>i;){if(o=s(r),d(o-e)<t)return r;e>o?i=r:n=r,r=.5*(n-i)+i}return r}var h=0,f=0,v=0,g=0,m=0,y=0;return v=3*t,f=3*(n-t)-v,h=1-v-f,y=3*i,m=3*(r-i)-y,g=1-y-m,u(e,c(o))}function t(t,i,n,r){return function(o){return e(o,t,i,n,r,1)}}r.setBezierFunction=function(e,i,n,o,s){var a=t(i,n,o,s);return a.displayName=e,a.x1=i,a.y1=n,a.x2=o,a.y2=s,r.prototype.formula[e]=a},r.unsetBezierFunction=function(e){delete r.prototype.formula[e]}}(),function(){function e(e,t,i,n,o,s){return r.tweenProps(n,t,e,i,1,s,o)}var t=new r;t._filterArgs=[],r.interpolate=function(i,n,o,s,a){var l=r.shallowCopy({},i),c=a||0,u=r.composeEasingObject(i,s||"linear");t.set({});var d=t._filterArgs;d.length=0,d[0]=l,d[1]=i,d[2]=n,d[3]=u,r.applyFilter(t,"tweenCreated"),r.applyFilter(t,"beforeTween");var p=e(i,l,n,o,u,c);return r.applyFilter(t,"afterTween"),p}}(),function(e){function t(e,t){var i,n=[],r=e.length;for(i=0;r>i;i++)n.push("_"+t+"_"+i);
return n}function i(e){var t=e.match(T);return t?(1===t.length||e[0].match(w))&&t.unshift(""):t=["",""],t.join(_)}function n(t){e.each(t,function(e){var i=t[e];"string"==typeof i&&i.match(S)&&(t[e]=r(i))})}function r(e){return l(S,e,o)}function o(e){var t=s(e);return"rgb("+t[0]+","+t[1]+","+t[2]+")"}function s(e){return e=e.replace(/#/,""),3===e.length&&(e=e.split(""),e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),E[0]=a(e.substr(0,2)),E[1]=a(e.substr(2,2)),E[2]=a(e.substr(4,2)),E}function a(e){return parseInt(e,16)}function l(e,t,i){var n=t.match(e),r=t.replace(e,_);if(n)for(var o,s=n.length,a=0;s>a;a++)o=n.shift(),r=r.replace(_,i(o));return r}function c(e){return l(x,e,u)}function u(e){for(var t=e.match(C),i=t.length,n=e.match(k)[0],r=0;i>r;r++)n+=parseInt(t[r],10)+",";return n=n.slice(0,-1)+")"}function d(n){var r={};return e.each(n,function(e){var o=n[e];if("string"==typeof o){var s=m(o);r[e]={formatString:i(o),chunkNames:t(s,e)}}}),r}function p(t,i){e.each(i,function(e){for(var n=t[e],r=m(n),o=r.length,s=0;o>s;s++)t[i[e].chunkNames[s]]=+r[s];delete t[e]})}function h(t,i){e.each(i,function(e){var n=t[e],r=f(t,i[e].chunkNames),o=v(r,i[e].chunkNames);n=g(i[e].formatString,o),t[e]=c(n)})}function f(e,t){for(var i,n={},r=t.length,o=0;r>o;o++)i=t[o],n[i]=e[i],delete e[i];return n}function v(e,t){A.length=0;for(var i=t.length,n=0;i>n;n++)A.push(e[t[n]]);return A}function g(e,t){for(var i=e,n=t.length,r=0;n>r;r++)i=i.replace(_,+t[r].toFixed(4));return i}function m(e){return e.match(C)}function y(t,i){e.each(i,function(e){var n,r=i[e],o=r.chunkNames,s=o.length,a=t[e];if("string"==typeof a){var l=a.split(" "),c=l[l.length-1];for(n=0;s>n;n++)t[o[n]]=l[n]||c}else for(n=0;s>n;n++)t[o[n]]=a;delete t[e]})}function b(t,i){e.each(i,function(e){var n=i[e],r=n.chunkNames,o=r.length,s=t[r[0]],a=typeof s;if("string"===a){for(var l="",c=0;o>c;c++)l+=" "+t[r[c]],delete t[r[c]];t[e]=l.substr(1)}else t[e]=s})}var w=/(\d|\-|\.)/,T=/([^\-0-9\.]+)/g,C=/[0-9.\-]+/g,x=new RegExp("rgb\\("+C.source+/,\s*/.source+C.source+/,\s*/.source+C.source+"\\)","g"),k=/^.*\(/,S=/#([0-9]|[a-f]){3,6}/gi,_="VAL",E=[],A=[];e.prototype.filter.token={tweenCreated:function(e,t,i,r){n(e),n(t),n(i),this._tokenData=d(e)},beforeTween:function(e,t,i,n){y(n,this._tokenData),p(e,this._tokenData),p(t,this._tokenData),p(i,this._tokenData)},afterTween:function(e,t,i,n){h(e,this._tokenData),h(t,this._tokenData),h(i,this._tokenData),b(n,this._tokenData)}}}(r)}).call(null)},{}],2:[function(e,t,i){var n=e("./shape"),r=e("./utils"),o=function(e,t){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,n.apply(this,arguments)};o.prototype=new n,o.prototype.constructor=o,o.prototype._pathString=function(e){var t=e.strokeWidth;e.trailWidth&&e.trailWidth>e.strokeWidth&&(t=e.trailWidth);var i=50-t/2;return r.render(this._pathTemplate,{radius:i,"2radius":2*i})},o.prototype._trailString=function(e){return this._pathString(e)},t.exports=o},{"./shape":7,"./utils":8}],3:[function(e,t,i){var n=e("./shape"),r=e("./utils"),o=function(e,t){this._pathTemplate="M 0,{center} L 100,{center}",n.apply(this,arguments)};o.prototype=new n,o.prototype.constructor=o,o.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 "+t.strokeWidth),e.setAttribute("preserveAspectRatio","none")},o.prototype._pathString=function(e){return r.render(this._pathTemplate,{center:e.strokeWidth/2})},o.prototype._trailString=function(e){return this._pathString(e)},t.exports=o},{"./shape":7,"./utils":8}],4:[function(e,t,i){t.exports={Line:e("./line"),Circle:e("./circle"),SemiCircle:e("./semicircle"),Path:e("./path"),Shape:e("./shape"),utils:e("./utils")}},{"./circle":2,"./line":3,"./path":5,"./semicircle":6,"./shape":7,"./utils":8}],5:[function(e,t,i){var n=e("shifty"),r=e("./utils"),o={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},s=function a(e,t){if(!(this instanceof a))throw new Error("Constructor was called without new keyword");t=r.extend({duration:800,easing:"linear",from:{},to:{},step:function(){}},t);var i;i=r.isString(e)?document.querySelector(e):e,this.path=i,this._opts=t,this._tweenable=null;var n=this.path.getTotalLength();this.path.style.strokeDasharray=n+" "+n,this.set(0)};s.prototype.value=function(){var e=this._getComputedDashOffset(),t=this.path.getTotalLength(),i=1-e/t;return parseFloat(i.toFixed(6),10)},s.prototype.set=function(e){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(e);var t=this._opts.step;if(r.isFunction(t)){var i=this._easing(this._opts.easing),n=this._calculateTo(e,i),o=this._opts.shape||this;t(n,o,this._opts.attachment)}},s.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},s.prototype.animate=function(e,t,i){t=t||{},r.isFunction(t)&&(i=t,t={});var o=r.extend({},t),s=r.extend({},this._opts);t=r.extend(s,t);var a=this._easing(t.easing),l=this._resolveFromAndTo(e,a,o);this.stop(),this.path.getBoundingClientRect();var c=this._getComputedDashOffset(),u=this._progressToOffset(e),d=this;this._tweenable=new n,this._tweenable.tween({from:r.extend({offset:c},l.from),to:r.extend({offset:u},l.to),duration:t.duration,easing:a,step:function(e){d.path.style.strokeDashoffset=e.offset;var i=t.shape||d;t.step(e,i,t.attachment)},finish:function(e){r.isFunction(i)&&i()}})},s.prototype._getComputedDashOffset=function(){var e=window.getComputedStyle(this.path,null);return parseFloat(e.getPropertyValue("stroke-dashoffset"),10)},s.prototype._progressToOffset=function(e){var t=this.path.getTotalLength();return t-e*t},s.prototype._resolveFromAndTo=function(e,t,i){return i.from&&i.to?{from:i.from,to:i.to}:{from:this._calculateFrom(t),to:this._calculateTo(e,t)}},s.prototype._calculateFrom=function(e){return n.interpolate(this._opts.from,this._opts.to,this.value(),e)},s.prototype._calculateTo=function(e,t){return n.interpolate(this._opts.from,this._opts.to,e,t)},s.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(),this._tweenable=null)},s.prototype._easing=function(e){return o.hasOwnProperty(e)?o[e]:e},t.exports=s},{"./utils":8,shifty:1}],6:[function(e,t,i){var n=e("./shape"),r=e("./circle"),o=e("./utils"),s=function(e,t){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,n.apply(this,arguments)};s.prototype=new n,s.prototype.constructor=s,s.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 50")},s.prototype._initializeTextContainer=function(e,t,i){e.text.style&&(i.style.top="auto",i.style.bottom="0",e.text.alignToBottom?o.setStyle(i,"transform","translate(-50%, 0)"):o.setStyle(i,"transform","translate(-50%, 50%)"))},s.prototype._pathString=r.prototype._pathString,s.prototype._trailString=r.prototype._trailString,t.exports=s},{"./circle":2,"./shape":7,"./utils":8}],7:[function(e,t,i){var n=e("./path"),r=e("./utils"),o="Object is destroyed",s=function a(e,t){if(!(this instanceof a))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=r.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},t,!0),r.isObject(t)&&void 0!==t.svgStyle&&(this._opts.svgStyle=t.svgStyle),r.isObject(t)&&r.isObject(t.text)&&void 0!==t.text.style&&(this._opts.text.style=t.text.style);var i,o=this._createSvgView(this._opts);if(i=r.isString(e)?document.querySelector(e):e,!i)throw new Error("Container does not exist: "+e);this._container=i,this._container.appendChild(o.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&r.setStyles(o.svg,this._opts.svgStyle),this.svg=o.svg,this.path=o.path,this.trail=o.trail,this.text=null;var s=r.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new n(o.path,s),r.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};s.prototype.animate=function(e,t,i){if(null===this._progressPath)throw new Error(o);this._progressPath.animate(e,t,i)},s.prototype.stop=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath.stop()},s.prototype.destroy=function(){if(null===this._progressPath)throw new Error(o);this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},s.prototype.set=function(e){if(null===this._progressPath)throw new Error(o);this._progressPath.set(e)},s.prototype.value=function(){if(null===this._progressPath)throw new Error(o);return void 0===this._progressPath?0:this._progressPath.value()},s.prototype.setText=function(e){if(null===this._progressPath)throw new Error(o);null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),r.isObject(e)?(r.removeChildren(this.text),this.text.appendChild(e)):this.text.innerHTML=e},s.prototype._createSvgView=function(e){var t=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(t,e);var i=null;(e.trailColor||e.trailWidth)&&(i=this._createTrail(e),t.appendChild(i));var n=this._createPath(e);return t.appendChild(n),{svg:t,path:n,trail:i}},s.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 100")},s.prototype._createPath=function(e){var t=this._pathString(e);return this._createPathElement(t,e)},s.prototype._createTrail=function(e){var t=this._trailString(e),i=r.extend({},e);return i.trailColor||(i.trailColor="#eee"),i.trailWidth||(i.trailWidth=i.strokeWidth),i.color=i.trailColor,i.strokeWidth=i.trailWidth,i.fill=null,this._createPathElement(t,i)},s.prototype._createPathElement=function(e,t){var i=document.createElementNS("http://www.w3.org/2000/svg","path");return i.setAttribute("d",e),i.setAttribute("stroke",t.color),i.setAttribute("stroke-width",t.strokeWidth),t.fill?i.setAttribute("fill",t.fill):i.setAttribute("fill-opacity","0"),i},s.prototype._createTextContainer=function(e,t){var i=document.createElement("div");i.className=e.text.className;var n=e.text.style;return n&&(e.text.autoStyleContainer&&(t.style.position="relative"),r.setStyles(i,n),n.color||(i.style.color=e.color)),this._initializeTextContainer(e,t,i),i},s.prototype._initializeTextContainer=function(e,t,i){},s.prototype._pathString=function(e){throw new Error("Override this function for each progress bar")},s.prototype._trailString=function(e){throw new Error("Override this function for each progress bar")},s.prototype._warnContainerAspectRatio=function(e){if(this.containerAspectRatio){var t=window.getComputedStyle(e,null),i=parseFloat(t.getPropertyValue("width"),10),n=parseFloat(t.getPropertyValue("height"),10);r.floatEquals(this.containerAspectRatio,i/n)||(console.warn("Incorrect aspect ratio of container","#"+e.id,"detected:",t.getPropertyValue("width")+"(width)","/",t.getPropertyValue("height")+"(height)","=",i/n),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},t.exports=s},{"./path":5,"./utils":8}],8:[function(e,t,i){function n(e,t,i){e=e||{},t=t||{},i=i||!1;for(var r in t)if(t.hasOwnProperty(r)){var o=e[r],s=t[r];i&&d(o)&&d(s)?e[r]=n(o,s,i):e[r]=s}return e}function r(e,t){var i=e;for(var n in t)if(t.hasOwnProperty(n)){var r=t[n],o="\\{"+n+"\\}",s=new RegExp(o,"g");i=i.replace(s,r)}return i}function o(e,t,i){for(var n=e.style,r=0;r<v.length;++r){var o=v[r];n[o+a(t)]=i}n[t]=i}function s(e,t){p(t,function(t,i){null!==t&&void 0!==t&&(d(t)&&t.prefix===!0?o(e,i,t.value):e.style[i]=t)})}function a(e){return e.charAt(0).toUpperCase()+e.slice(1)}function l(e){return"string"==typeof e||e instanceof String}function c(e){return"function"==typeof e}function u(e){return"[object Array]"===Object.prototype.toString.call(e)}function d(e){if(u(e))return!1;var t=typeof e;return"object"===t&&!!e}function p(e,t){for(var i in e)if(e.hasOwnProperty(i)){var n=e[i];t(n,i)}}function h(e,t){return Math.abs(e-t)<g}function f(e){for(;e.firstChild;)e.removeChild(e.firstChild)}var v="Webkit Moz O ms".split(" "),g=.001;t.exports={extend:n,render:r,setStyle:o,setStyles:s,capitalize:a,isString:l,isFunction:c,isObject:d,forEachObject:p,floatEquals:h,removeChildren:f}},{}]},{},[4])(4)}),!function(e){e.fn.viewportChecker=function(t){var i={classToAdd:"visible",classToRemove:"invisible",classToAddForFullView:"full-visible",removeClassAfterAnimation:!1,offset:100,repeat:!1,invertBottomOffset:!0,callbackFunction:function(e,t){},scrollHorizontal:!1,scrollBox:window};e.extend(i,t);var n=this,r={height:e(i.scrollBox).height(),width:e(i.scrollBox).width()};return this.checkElements=function(){var t,o;i.scrollHorizontal?(t=Math.max(e("html").scrollLeft(),e("body").scrollLeft(),e(window).scrollLeft()),o=t+r.width):(t=Math.max(e("html").scrollTop(),e("body").scrollTop(),e(window).scrollTop()),o=t+r.height),n.each(function(){var n=e(this),s={},a={};if(n.data("vp-add-class")&&(a.classToAdd=n.data("vp-add-class")),n.data("vp-remove-class")&&(a.classToRemove=n.data("vp-remove-class")),n.data("vp-add-class-full-view")&&(a.classToAddForFullView=n.data("vp-add-class-full-view")),n.data("vp-keep-add-class")&&(a.removeClassAfterAnimation=n.data("vp-remove-after-animation")),n.data("vp-offset")&&(a.offset=n.data("vp-offset")),n.data("vp-repeat")&&(a.repeat=n.data("vp-repeat")),n.data("vp-scrollHorizontal")&&(a.scrollHorizontal=n.data("vp-scrollHorizontal")),n.data("vp-invertBottomOffset")&&(a.scrollHorizontal=n.data("vp-invertBottomOffset")),e.extend(s,i),e.extend(s,a),!n.data("vp-animated")||s.repeat){String(s.offset).indexOf("%")>0&&(s.offset=parseInt(s.offset)/100*r.height);var l=s.scrollHorizontal?n.offset().left:n.offset().top,c=s.scrollHorizontal?l+n.width():l+n.height(),u=Math.round(l)+s.offset,d=s.scrollHorizontal?u+n.width():u+n.height();s.invertBottomOffset&&(d-=2*s.offset),u<o&&d>t?(n.removeClass(s.classToRemove),n.addClass(s.classToAdd),s.callbackFunction(n,"add"),c<=o&&l>=t?n.addClass(s.classToAddForFullView):n.removeClass(s.classToAddForFullView),n.data("vp-animated",!0),s.removeClassAfterAnimation&&n.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",function(){n.removeClass(s.classToAdd)})):n.hasClass(s.classToAdd)&&s.repeat&&(n.removeClass(s.classToAdd+" "+s.classToAddForFullView),s.callbackFunction(n,"remove"),n.data("vp-animated",!1))}})},("ontouchstart"in window||"onmsgesturechange"in window)&&e(document).bind("touchmove MSPointerMove pointermove",this.checkElements),e(i.scrollBox).bind("load scroll",this.checkElements),e(window).resize(function(t){r={height:e(i.scrollBox).height(),width:e(i.scrollBox).width()},n.checkElements()}),this.checkElements(),this}}(jQuery),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){"use strict";var t=window.Slick||{};t=function(){function t(t,n){var r,o=this;o.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(t),appendDots:e(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,i){return e('<button type="button" />')},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},o.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(o,o.initials),o.activeBreakpoint=null,o.animType=null,o.animProp=null,o.breakpoints=[],o.breakpointSettings=[],o.cssTransitions=!1,o.focussed=!1,o.interrupted=!1,o.hidden="hidden",o.paused=!0,o.positionProp=null,o.respondTo=null,o.rowCount=1,o.shouldClick=!0,o.$slider=e(t),o.$slidesCache=null,o.transformType=null,o.transitionType=null,o.visibilityChange="visibilitychange",o.windowWidth=0,o.windowTimer=null,r=e(t).data("slick")||{},o.options=e.extend({},o.defaults,n,r),o.currentSlide=o.options.initialSlide,o.originalSettings=o.options,"undefined"!=typeof document.mozHidden?(o.hidden="mozHidden",o.visibilityChange="mozvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(o.hidden="webkitHidden",o.visibilityChange="webkitvisibilitychange"),o.autoPlay=e.proxy(o.autoPlay,o),o.autoPlayClear=e.proxy(o.autoPlayClear,o),o.autoPlayIterator=e.proxy(o.autoPlayIterator,o),o.changeSlide=e.proxy(o.changeSlide,o),o.clickHandler=e.proxy(o.clickHandler,o),o.selectHandler=e.proxy(o.selectHandler,o),o.setPosition=e.proxy(o.setPosition,o),o.swipeHandler=e.proxy(o.swipeHandler,o),o.dragHandler=e.proxy(o.dragHandler,o),o.keyHandler=e.proxy(o.keyHandler,o),o.instanceUid=i++,o.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,o.registerBreakpoints(),o.init(!0)}var i=0;return t}(),t.prototype.activateADA=function(){var e=this;e.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},t.prototype.addSlide=t.prototype.slickAdd=function(t,i,n){var r=this;if("boolean"==typeof i)n=i,i=null;else if(i<0||i>=r.slideCount)return!1;r.unload(),"number"==typeof i?0===i&&0===r.$slides.length?e(t).appendTo(r.$slideTrack):n?e(t).insertBefore(r.$slides.eq(i)):e(t).insertAfter(r.$slides.eq(i)):n===!0?e(t).prependTo(r.$slideTrack):e(t).appendTo(r.$slideTrack),r.$slides=r.$slideTrack.children(this.options.slide),r.$slideTrack.children(this.options.slide).detach(),r.$slideTrack.append(r.$slides),r.$slides.each(function(t,i){e(i).attr("data-slick-index",t)}),r.$slidesCache=r.$slides,r.reinit()},t.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&e.options.adaptiveHeight===!0&&e.options.vertical===!1){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},t.prototype.animateSlide=function(t,i){var n={},r=this;r.animateHeight(),r.options.rtl===!0&&r.options.vertical===!1&&(t=-t),r.transformsEnabled===!1?r.options.vertical===!1?r.$slideTrack.animate({left:t},r.options.speed,r.options.easing,i):r.$slideTrack.animate({top:t},r.options.speed,r.options.easing,i):r.cssTransitions===!1?(r.options.rtl===!0&&(r.currentLeft=-r.currentLeft),e({animStart:r.currentLeft}).animate({animStart:t},{duration:r.options.speed,easing:r.options.easing,step:function(e){e=Math.ceil(e),r.options.vertical===!1?(n[r.animType]="translate("+e+"px, 0px)",r.$slideTrack.css(n)):(n[r.animType]="translate(0px,"+e+"px)",r.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(r.applyTransition(),t=Math.ceil(t),r.options.vertical===!1?n[r.animType]="translate3d("+t+"px, 0px, 0px)":n[r.animType]="translate3d(0px,"+t+"px, 0px)",r.$slideTrack.css(n),i&&setTimeout(function(){r.disableTransition(),i.call()},r.options.speed))},t.prototype.getNavTarget=function(){var t=this,i=t.options.asNavFor;return i&&null!==i&&(i=e(i).not(t.$slider)),i},t.prototype.asNavFor=function(t){var i=this,n=i.getNavTarget();null!==n&&"object"==typeof n&&n.each(function(){var i=e(this).slick("getSlick");i.unslicked||i.slideHandler(t,!0)})},t.prototype.applyTransition=function(e){var t=this,i={};t.options.fade===!1?i[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:i[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,t.options.fade===!1?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},t.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},t.prototype.autoPlayClear=function(){var e=this;e.autoPlayTimer&&clearInterval(e.autoPlayTimer)},t.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(e.options.infinite===!1&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1===0&&(e.direction=1))),e.slideHandler(t))},t.prototype.buildArrows=function(){var t=this;t.options.arrows===!0&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),t.options.infinite!==!0&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},t.prototype.buildDots=function(){var t,i,n=this;if(n.options.dots===!0&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),i=e("<ul />").addClass(n.options.dotsClass),t=0;t<=n.getDotCount();t+=1)i.append(e("<li />").append(n.options.customPaging.call(this,n,t)));n.$dots=i.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},t.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,i){e(i).attr("data-slick-index",t).data("originalStyling",e(i).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),t.options.centerMode!==!0&&t.options.swipeToSlide!==!0||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.options.draggable===!0&&t.$list.addClass("draggable")},t.prototype.buildRows=function(){var e,t,i,n,r,o,s,a=this;if(n=document.createDocumentFragment(),o=a.$slider.children(),a.options.rows>0){for(s=a.options.slidesPerRow*a.options.rows,r=Math.ceil(o.length/s),e=0;e<r;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var u=e*s+(t*a.options.slidesPerRow+i);o.get(u)&&c.appendChild(o.get(u))}l.appendChild(c)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},t.prototype.checkResponsive=function(t,i){var n,r,o,s=this,a=!1,l=s.$slider.width(),c=window.innerWidth||e(window).width();if("window"===s.respondTo?o=c:"slider"===s.respondTo?o=l:"min"===s.respondTo&&(o=Math.min(c,l)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){r=null;for(n in s.breakpoints)s.breakpoints.hasOwnProperty(n)&&(s.originalSettings.mobileFirst===!1?o<s.breakpoints[n]&&(r=s.breakpoints[n]):o>s.breakpoints[n]&&(r=s.breakpoints[n]));null!==r?null!==s.activeBreakpoint?(r!==s.activeBreakpoint||i)&&(s.activeBreakpoint=r,"unslick"===s.breakpointSettings[r]?s.unslick(r):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[r]),t===!0&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=r):(s.activeBreakpoint=r,"unslick"===s.breakpointSettings[r]?s.unslick(r):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[r]),t===!0&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=r):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,t===!0&&(s.currentSlide=s.options.initialSlide),s.refresh(t),a=r),t||a===!1||s.$slider.trigger("breakpoint",[s,a])}},t.prototype.changeSlide=function(t,i){var n,r,o,s=this,a=e(t.currentTarget);switch(a.is("a")&&t.preventDefault(),a.is("li")||(a=a.closest("li")),o=s.slideCount%s.options.slidesToScroll!==0,n=o?0:(s.slideCount-s.currentSlide)%s.options.slidesToScroll,t.data.message){case"previous":r=0===n?s.options.slidesToScroll:s.options.slidesToShow-n,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide-r,!1,i);break;case"next":r=0===n?s.options.slidesToScroll:n,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide+r,!1,i);break;case"index":var l=0===t.data.index?0:t.data.index||a.index()*s.options.slidesToScroll;s.slideHandler(s.checkNavigable(l),!1,i),a.children().trigger("focus");break;default:return}},t.prototype.checkNavigable=function(e){var t,i,n=this;if(t=n.getNavigableIndexes(),i=0,e>t[t.length-1])e=t[t.length-1];else for(var r in t){if(e<t[r]){e=i;break}i=t[r]}return e},t.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),t.options.accessibility===!0&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),t.options.arrows===!0&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),t.options.accessibility===!0&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),t.options.accessibility===!0&&t.$list.off("keydown.slick",t.keyHandler),t.options.focusOnSelect===!0&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},t.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>0&&(e=t.$slides.children().children(),e.removeAttr("style"),t.$slider.empty().append(e))},t.prototype.clickHandler=function(e){var t=this;t.shouldClick===!1&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},t.prototype.destroy=function(t){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),e(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){e(this).attr("style",e(this).data("originalStyling"))}),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,t||i.$slider.trigger("destroy",[i])},t.prototype.disableTransition=function(e){var t=this,i={};i[t.transitionType]="",t.options.fade===!1?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},t.prototype.fadeSlide=function(e,t){var i=this;i.cssTransitions===!1?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout(function(){i.disableTransition(e),t.call()},i.options.speed))},t.prototype.fadeSlideOut=function(e){var t=this;t.cssTransitions===!1?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},t.prototype.filterSlides=t.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},t.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(i){i.stopImmediatePropagation();var n=e(this);setTimeout(function(){t.options.pauseOnFocus&&(t.focussed=n.is(":focus"),t.autoPlay())},0)})},t.prototype.getCurrent=t.prototype.slickCurrentSlide=function(){var e=this;return e.currentSlide},t.prototype.getDotCount=function(){var e=this,t=0,i=0,n=0;if(e.options.infinite===!0)if(e.slideCount<=e.options.slidesToShow)++n;else for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(e.options.centerMode===!0)n=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else n=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return n-1},t.prototype.getLeft=function(e){var t,i,n,r,o=this,s=0;return o.slideOffset=0,i=o.$slides.first().outerHeight(!0),o.options.infinite===!0?(o.slideCount>o.options.slidesToShow&&(o.slideOffset=o.slideWidth*o.options.slidesToShow*-1,r=-1,o.options.vertical===!0&&o.options.centerMode===!0&&(2===o.options.slidesToShow?r=-1.5:1===o.options.slidesToShow&&(r=-2)),s=i*o.options.slidesToShow*r),o.slideCount%o.options.slidesToScroll!==0&&e+o.options.slidesToScroll>o.slideCount&&o.slideCount>o.options.slidesToShow&&(e>o.slideCount?(o.slideOffset=(o.options.slidesToShow-(e-o.slideCount))*o.slideWidth*-1,s=(o.options.slidesToShow-(e-o.slideCount))*i*-1):(o.slideOffset=o.slideCount%o.options.slidesToScroll*o.slideWidth*-1,s=o.slideCount%o.options.slidesToScroll*i*-1))):e+o.options.slidesToShow>o.slideCount&&(o.slideOffset=(e+o.options.slidesToShow-o.slideCount)*o.slideWidth,s=(e+o.options.slidesToShow-o.slideCount)*i),o.slideCount<=o.options.slidesToShow&&(o.slideOffset=0,s=0),o.options.centerMode===!0&&o.slideCount<=o.options.slidesToShow?o.slideOffset=o.slideWidth*Math.floor(o.options.slidesToShow)/2-o.slideWidth*o.slideCount/2:o.options.centerMode===!0&&o.options.infinite===!0?o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)-o.slideWidth:o.options.centerMode===!0&&(o.slideOffset=0,
o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)),t=o.options.vertical===!1?e*o.slideWidth*-1+o.slideOffset:e*i*-1+s,o.options.variableWidth===!0&&(n=o.slideCount<=o.options.slidesToShow||o.options.infinite===!1?o.$slideTrack.children(".slick-slide").eq(e):o.$slideTrack.children(".slick-slide").eq(e+o.options.slidesToShow),t=o.options.rtl===!0?n[0]?(o.$slideTrack.width()-n[0].offsetLeft-n.width())*-1:0:n[0]?n[0].offsetLeft*-1:0,o.options.centerMode===!0&&(n=o.slideCount<=o.options.slidesToShow||o.options.infinite===!1?o.$slideTrack.children(".slick-slide").eq(e):o.$slideTrack.children(".slick-slide").eq(e+o.options.slidesToShow+1),t=o.options.rtl===!0?n[0]?(o.$slideTrack.width()-n[0].offsetLeft-n.width())*-1:0:n[0]?n[0].offsetLeft*-1:0,t+=(o.$list.width()-n.outerWidth())/2)),t},t.prototype.getOption=t.prototype.slickGetOption=function(e){var t=this;return t.options[e]},t.prototype.getNavigableIndexes=function(){var e,t=this,i=0,n=0,r=[];for(t.options.infinite===!1?e=t.slideCount:(i=t.options.slidesToScroll*-1,n=t.options.slidesToScroll*-1,e=2*t.slideCount);i<e;)r.push(i),i=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return r},t.prototype.getSlick=function(){return this},t.prototype.getSlideCount=function(){var t,i,n,r=this;return n=r.options.centerMode===!0?r.slideWidth*Math.floor(r.options.slidesToShow/2):0,r.options.swipeToSlide===!0?(r.$slideTrack.find(".slick-slide").each(function(t,o){if(o.offsetLeft-n+e(o).outerWidth()/2>r.swipeLeft*-1)return i=o,!1}),t=Math.abs(e(i).attr("data-slick-index")-r.currentSlide)||1):r.options.slidesToScroll},t.prototype.goTo=t.prototype.slickGoTo=function(e,t){var i=this;i.changeSlide({data:{message:"index",index:parseInt(e)}},t)},t.prototype.init=function(t){var i=this;e(i.$slider).hasClass("slick-initialized")||(e(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),t&&i.$slider.trigger("init",[i]),i.options.accessibility===!0&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},t.prototype.initADA=function(){var t=this,i=Math.ceil(t.slideCount/t.options.slidesToShow),n=t.getNavigableIndexes().filter(function(e){return e>=0&&e<t.slideCount});t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each(function(i){var r=n.indexOf(i);if(e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+i,tabindex:-1}),r!==-1){var o="slick-slide-control"+t.instanceUid+r;e("#"+o).length&&e(this).attr({"aria-describedby":o})}}),t.$dots.attr("role","tablist").find("li").each(function(r){var o=n[r];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+r,"aria-controls":"slick-slide"+t.instanceUid+o,"aria-label":r+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var r=t.currentSlide,o=r+t.options.slidesToShow;r<o;r++)t.options.focusOnChange?t.$slides.eq(r).attr({tabindex:"0"}):t.$slides.eq(r).removeAttr("tabindex");t.activateADA()},t.prototype.initArrowEvents=function(){var e=this;e.options.arrows===!0&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),e.options.accessibility===!0&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},t.prototype.initDotEvents=function(){var t=this;t.options.dots===!0&&t.slideCount>t.options.slidesToShow&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),t.options.accessibility===!0&&t.$dots.on("keydown.slick",t.keyHandler)),t.options.dots===!0&&t.options.pauseOnDotsHover===!0&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},t.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),t.options.accessibility===!0&&t.$list.on("keydown.slick",t.keyHandler),t.options.focusOnSelect===!0&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},t.prototype.initUI=function(){var e=this;e.options.arrows===!0&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),e.options.dots===!0&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},t.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&t.options.accessibility===!0?t.changeSlide({data:{message:t.options.rtl===!0?"next":"previous"}}):39===e.keyCode&&t.options.accessibility===!0&&t.changeSlide({data:{message:t.options.rtl===!0?"previous":"next"}}))},t.prototype.lazyLoad=function(){function t(t){e("img[data-lazy]",t).each(function(){var t=e(this),i=e(this).attr("data-lazy"),n=e(this).attr("data-srcset"),r=e(this).attr("data-sizes")||s.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){t.animate({opacity:0},100,function(){n&&(t.attr("srcset",n),r&&t.attr("sizes",r)),t.attr("src",i).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),s.$slider.trigger("lazyLoaded",[s,t,i])})},o.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,i])},o.src=i})}var i,n,r,o,s=this;if(s.options.centerMode===!0?s.options.infinite===!0?(r=s.currentSlide+(s.options.slidesToShow/2+1),o=r+s.options.slidesToShow+2):(r=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),o=2+(s.options.slidesToShow/2+1)+s.currentSlide):(r=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,o=Math.ceil(r+s.options.slidesToShow),s.options.fade===!0&&(r>0&&r--,o<=s.slideCount&&o++)),i=s.$slider.find(".slick-slide").slice(r,o),"anticipated"===s.options.lazyLoad)for(var a=r-1,l=o,c=s.$slider.find(".slick-slide"),u=0;u<s.options.slidesToScroll;u++)a<0&&(a=s.slideCount-1),i=i.add(c.eq(a)),i=i.add(c.eq(l)),a--,l++;t(i),s.slideCount<=s.options.slidesToShow?(n=s.$slider.find(".slick-slide"),t(n)):s.currentSlide>=s.slideCount-s.options.slidesToShow?(n=s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow),t(n)):0===s.currentSlide&&(n=s.$slider.find(".slick-cloned").slice(s.options.slidesToShow*-1),t(n))},t.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},t.prototype.next=t.prototype.slickNext=function(){var e=this;e.changeSlide({data:{message:"next"}})},t.prototype.orientationChange=function(){var e=this;e.checkResponsive(),e.setPosition()},t.prototype.pause=t.prototype.slickPause=function(){var e=this;e.autoPlayClear(),e.paused=!0},t.prototype.play=t.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},t.prototype.postSlide=function(t){var i=this;if(!i.unslicked&&(i.$slider.trigger("afterChange",[i,t]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),i.options.accessibility===!0&&(i.initADA(),i.options.focusOnChange))){var n=e(i.$slides.get(i.currentSlide));n.attr("tabindex",0).focus()}},t.prototype.prev=t.prototype.slickPrev=function(){var e=this;e.changeSlide({data:{message:"previous"}})},t.prototype.preventDefault=function(e){e.preventDefault()},t.prototype.progressiveLazyLoad=function(t){t=t||1;var i,n,r,o,s,a=this,l=e("img[data-lazy]",a.$slider);l.length?(i=l.first(),n=i.attr("data-lazy"),r=i.attr("data-srcset"),o=i.attr("data-sizes")||a.$slider.attr("data-sizes"),s=document.createElement("img"),s.onload=function(){r&&(i.attr("srcset",r),o&&i.attr("sizes",o)),i.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),a.options.adaptiveHeight===!0&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,n]),a.progressiveLazyLoad()},s.onerror=function(){t<3?setTimeout(function(){a.progressiveLazyLoad(t+1)},500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,n]),a.progressiveLazyLoad())},s.src=n):a.$slider.trigger("allImagesLoaded",[a])},t.prototype.refresh=function(t){var i,n,r=this;n=r.slideCount-r.options.slidesToShow,!r.options.infinite&&r.currentSlide>n&&(r.currentSlide=n),r.slideCount<=r.options.slidesToShow&&(r.currentSlide=0),i=r.currentSlide,r.destroy(!0),e.extend(r,r.initials,{currentSlide:i}),r.init(),t||r.changeSlide({data:{message:"index",index:i}},!1)},t.prototype.registerBreakpoints=function(){var t,i,n,r=this,o=r.options.responsive||null;if("array"===e.type(o)&&o.length){r.respondTo=r.options.respondTo||"window";for(t in o)if(n=r.breakpoints.length-1,o.hasOwnProperty(t)){for(i=o[t].breakpoint;n>=0;)r.breakpoints[n]&&r.breakpoints[n]===i&&r.breakpoints.splice(n,1),n--;r.breakpoints.push(i),r.breakpointSettings[i]=o[t].settings}r.breakpoints.sort(function(e,t){return r.options.mobileFirst?e-t:t-e})}},t.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),t.options.focusOnSelect===!0&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},t.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},t.prototype.removeSlide=t.prototype.slickRemove=function(e,t,i){var n=this;return"boolean"==typeof e?(t=e,e=t===!0?0:n.slideCount-1):e=t===!0?--e:e,!(n.slideCount<1||e<0||e>n.slideCount-1)&&(n.unload(),i===!0?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(e).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,void n.reinit())},t.prototype.setCSS=function(e){var t,i,n=this,r={};n.options.rtl===!0&&(e=-e),t="left"==n.positionProp?Math.ceil(e)+"px":"0px",i="top"==n.positionProp?Math.ceil(e)+"px":"0px",r[n.positionProp]=e,n.transformsEnabled===!1?n.$slideTrack.css(r):(r={},n.cssTransitions===!1?(r[n.animType]="translate("+t+", "+i+")",n.$slideTrack.css(r)):(r[n.animType]="translate3d("+t+", "+i+", 0px)",n.$slideTrack.css(r)))},t.prototype.setDimensions=function(){var e=this;e.options.vertical===!1?e.options.centerMode===!0&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),e.options.centerMode===!0&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),e.options.vertical===!1&&e.options.variableWidth===!1?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):e.options.variableWidth===!0?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();e.options.variableWidth===!1&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},t.prototype.setFade=function(){var t,i=this;i.$slides.each(function(n,r){t=i.slideWidth*n*-1,i.options.rtl===!0?e(r).css({position:"relative",right:t,top:0,zIndex:i.options.zIndex-2,opacity:0}):e(r).css({position:"relative",left:t,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},t.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&e.options.adaptiveHeight===!0&&e.options.vertical===!1){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},t.prototype.setOption=t.prototype.slickSetOption=function(){var t,i,n,r,o,s=this,a=!1;if("object"===e.type(arguments[0])?(n=arguments[0],a=arguments[1],o="multiple"):"string"===e.type(arguments[0])&&(n=arguments[0],r=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?o="responsive":"undefined"!=typeof arguments[1]&&(o="single")),"single"===o)s.options[n]=r;else if("multiple"===o)e.each(n,function(e,t){s.options[e]=t});else if("responsive"===o)for(i in r)if("array"!==e.type(s.options.responsive))s.options.responsive=[r[i]];else{for(t=s.options.responsive.length-1;t>=0;)s.options.responsive[t].breakpoint===r[i].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(r[i])}a&&(s.unload(),s.reinit())},t.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),e.options.fade===!1?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},t.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=e.options.vertical===!0?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||e.options.useCSS===!0&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&e.animType!==!1&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&e.animType!==!1},t.prototype.setSlideClasses=function(e){var t,i,n,r,o=this;if(i=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),o.$slides.eq(e).addClass("slick-current"),o.options.centerMode===!0){var s=o.options.slidesToShow%2===0?1:0;t=Math.floor(o.options.slidesToShow/2),o.options.infinite===!0&&(e>=t&&e<=o.slideCount-1-t?o.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(n=o.options.slidesToShow+e,i.slice(n-t+1+s,n+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?i.eq(i.length-1-o.options.slidesToShow).addClass("slick-center"):e===o.slideCount-1&&i.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=o.slideCount-o.options.slidesToShow?o.$slides.slice(e,e+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=o.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(r=o.slideCount%o.options.slidesToShow,n=o.options.infinite===!0?o.options.slidesToShow+e:e,o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-e<o.options.slidesToShow?i.slice(n-(o.options.slidesToShow-r),n+r).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},t.prototype.setupInfinite=function(){var t,i,n,r=this;if(r.options.fade===!0&&(r.options.centerMode=!1),r.options.infinite===!0&&r.options.fade===!1&&(i=null,r.slideCount>r.options.slidesToShow)){for(n=r.options.centerMode===!0?r.options.slidesToShow+1:r.options.slidesToShow,t=r.slideCount;t>r.slideCount-n;t-=1)i=t-1,e(r.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-r.slideCount).prependTo(r.$slideTrack).addClass("slick-cloned");for(t=0;t<n+r.slideCount;t+=1)i=t,e(r.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+r.slideCount).appendTo(r.$slideTrack).addClass("slick-cloned");r.$slideTrack.find(".slick-cloned").find("[id]").each(function(){e(this).attr("id","")})}},t.prototype.interrupt=function(e){var t=this;e||t.autoPlay(),t.interrupted=e},t.prototype.selectHandler=function(t){var i=this,n=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),r=parseInt(n.attr("data-slick-index"));return r||(r=0),i.slideCount<=i.options.slidesToShow?void i.slideHandler(r,!1,!0):void i.slideHandler(r)},t.prototype.slideHandler=function(e,t,i){var n,r,o,s,a,l=null,c=this;if(t=t||!1,!(c.animating===!0&&c.options.waitForAnimate===!0||c.options.fade===!0&&c.currentSlide===e))return t===!1&&c.asNavFor(e),n=e,l=c.getLeft(n),s=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?s:c.swipeLeft,c.options.infinite===!1&&c.options.centerMode===!1&&(e<0||e>c.getDotCount()*c.options.slidesToScroll)?void(c.options.fade===!1&&(n=c.currentSlide,i!==!0&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(n)}):c.postSlide(n))):c.options.infinite===!1&&c.options.centerMode===!0&&(e<0||e>c.slideCount-c.options.slidesToScroll)?void(c.options.fade===!1&&(n=c.currentSlide,i!==!0&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(n)}):c.postSlide(n))):(c.options.autoplay&&clearInterval(c.autoPlayTimer),r=n<0?c.slideCount%c.options.slidesToScroll!==0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+n:n>=c.slideCount?c.slideCount%c.options.slidesToScroll!==0?0:n-c.slideCount:n,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,r]),o=c.currentSlide,c.currentSlide=r,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(a=c.getNavTarget(),a=a.slick("getSlick"),a.slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide)),c.updateDots(),c.updateArrows(),c.options.fade===!0?(i!==!0?(c.fadeSlideOut(o),c.fadeSlide(r,function(){c.postSlide(r)})):c.postSlide(r),void c.animateHeight()):void(i!==!0&&c.slideCount>c.options.slidesToShow?c.animateSlide(l,function(){c.postSlide(r)}):c.postSlide(r)))},t.prototype.startLoad=function(){var e=this;e.options.arrows===!0&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),e.options.dots===!0&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},t.prototype.swipeDirection=function(){var e,t,i,n,r=this;return e=r.touchObject.startX-r.touchObject.curX,t=r.touchObject.startY-r.touchObject.curY,i=Math.atan2(t,e),n=Math.round(180*i/Math.PI),n<0&&(n=360-Math.abs(n)),n<=45&&n>=0?r.options.rtl===!1?"left":"right":n<=360&&n>=315?r.options.rtl===!1?"left":"right":n>=135&&n<=225?r.options.rtl===!1?"right":"left":r.options.verticalSwiping===!0?n>=35&&n<=135?"down":"up":"vertical"},t.prototype.swipeEnd=function(e){var t,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1,!1;if(n.interrupted=!1,n.shouldClick=!(n.touchObject.swipeLength>10),void 0===n.touchObject.curX)return!1;if(n.touchObject.edgeHit===!0&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(t),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},t.prototype.swipeHandler=function(e){var t=this;if(!(t.options.swipe===!1||"ontouchend"in document&&t.options.swipe===!1||t.options.draggable===!1&&e.type.indexOf("mouse")!==-1))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,t.options.verticalSwiping===!0&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},t.prototype.swipeMove=function(e){var t,i,n,r,o,s,a=this;return o=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||o&&1!==o.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==o?o[0].pageX:e.clientX,a.touchObject.curY=void 0!==o?o[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&s>4?(a.scrolling=!0,!1):(a.options.verticalSwiping===!0&&(a.touchObject.swipeLength=s),i=a.swipeDirection(),void 0!==e.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,e.preventDefault()),r=(a.options.rtl===!1?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),a.options.verticalSwiping===!0&&(r=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,a.options.infinite===!1&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),a.options.vertical===!1?a.swipeLeft=t+n*r:a.swipeLeft=t+n*(a.$list.height()/a.listWidth)*r,a.options.verticalSwiping===!0&&(a.swipeLeft=t+n*r),a.options.fade!==!0&&a.options.touchMove!==!1&&(a.animating===!0?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},t.prototype.swipeStart=function(e){var t,i=this;return i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow?(i.touchObject={},!1):(void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==t?t.pageX:e.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==t?t.pageY:e.clientY,void(i.dragging=!0))},t.prototype.unfilterSlides=t.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},t.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},t.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},t.prototype.updateArrows=function(){var e,t=this;e=Math.floor(t.options.slidesToShow/2),t.options.arrows===!0&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):t.currentSlide>=t.slideCount-t.options.slidesToShow&&t.options.centerMode===!1?(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):t.currentSlide>=t.slideCount-1&&t.options.centerMode===!0&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},t.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},t.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,i,n=this,r=arguments[0],o=Array.prototype.slice.call(arguments,1),s=n.length;for(e=0;e<s;e++)if("object"==typeof r||"undefined"==typeof r?n[e].slick=new t(n[e],r):i=n[e].slick[r].apply(n[e].slick,o),"undefined"!=typeof i)return i;return n}}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Swiper=t()}(this,function(){"use strict";function e(e,t){var i=[],n=0;if(e&&!t&&e instanceof W)return e;if(e)if("string"==typeof e){var r,o,s=e.trim();if(s.indexOf("<")>=0&&s.indexOf(">")>=0){var a="div";for(0===s.indexOf("<li")&&(a="ul"),0===s.indexOf("<tr")&&(a="tbody"),0!==s.indexOf("<td")&&0!==s.indexOf("<th")||(a="tr"),0===s.indexOf("<tbody")&&(a="table"),0===s.indexOf("<option")&&(a="select"),o=document.createElement(a),o.innerHTML=s,n=0;n<o.childNodes.length;n+=1)i.push(o.childNodes[n])}else for(r=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||document).querySelectorAll(e.trim()):[document.getElementById(e.trim().split("#")[1])],n=0;n<r.length;n+=1)r[n]&&i.push(r[n])}else if(e.nodeType||e===window||e===document)i.push(e);else if(e.length>0&&e[0].nodeType)for(n=0;n<e.length;n+=1)i.push(e[n]);return new W(i)}function t(e){for(var t=[],i=0;i<e.length;i+=1)t.indexOf(e[i])===-1&&t.push(e[i]);return t}function i(e){var t=this;if("undefined"==typeof e)return this;for(var i=e.split(" "),n=0;n<i.length;n+=1)for(var r=0;r<this.length;r+=1)"undefined"!=typeof t[r].classList&&t[r].classList.add(i[n]);return this}function n(e){for(var t=this,i=e.split(" "),n=0;n<i.length;n+=1)for(var r=0;r<this.length;r+=1)"undefined"!=typeof t[r].classList&&t[r].classList.remove(i[n]);return this}function r(e){return!!this[0]&&this[0].classList.contains(e)}function o(e){for(var t=this,i=e.split(" "),n=0;n<i.length;n+=1)for(var r=0;r<this.length;r+=1)"undefined"!=typeof t[r].classList&&t[r].classList.toggle(i[n]);return this}function s(e,t){var i=arguments,n=this;if(1!==arguments.length||"string"!=typeof e){for(var r=0;r<this.length;r+=1)if(2===i.length)n[r].setAttribute(e,t);else for(var o in e)n[r][o]=e[o],n[r].setAttribute(o,e[o]);return this}if(this[0])return this[0].getAttribute(e)}function a(e){for(var t=this,i=0;i<this.length;i+=1)t[i].removeAttribute(e);return this}function l(e,t){var i,n=this;if("undefined"!=typeof t){for(var r=0;r<this.length;r+=1)i=n[r],i.dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0]){if(i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[e];var o=i.getAttribute("data-"+e);if(o)return o}else;}function c(e){for(var t=this,i=0;i<this.length;i+=1){var n=t[i].style;n.webkitTransform=e,n.transform=e}return this}function u(e){var t=this;"string"!=typeof e&&(e+="ms");for(var i=0;i<this.length;i+=1){var n=t[i].style;n.webkitTransitionDuration=e,n.transitionDuration=e}return this}function d(){function t(t){var i=t.target;if(i){var n=t.target.dom7EventData||[];if(n.unshift(t),e(i).is(a))l.apply(i,n);else for(var r=e(i).parents(),o=0;o<r.length;o+=1)e(r[o]).is(a)&&l.apply(r[o],n)}}function i(e){var t=e&&e.target?e.target.dom7EventData||[]:[];t.unshift(e),l.apply(this,t)}for(var n=this,r=[],o=arguments.length;o--;)r[o]=arguments[o];var s=r[0],a=r[1],l=r[2],c=r[3];if("function"==typeof r[1]){var u;u=r,s=u[0],l=u[1],c=u[2],a=void 0}c||(c=!1);for(var d,p=s.split(" "),h=0;h<this.length;h+=1){var f=n[h];if(a)for(d=0;d<p.length;d+=1)f.dom7LiveListeners||(f.dom7LiveListeners=[]),f.dom7LiveListeners.push({type:s,listener:l,proxyListener:t}),f.addEventListener(p[d],t,c);else for(d=0;d<p.length;d+=1)f.dom7Listeners||(f.dom7Listeners=[]),f.dom7Listeners.push({type:s,listener:l,proxyListener:i}),f.addEventListener(p[d],i,c)}return this}function p(){for(var e=this,t=[],i=arguments.length;i--;)t[i]=arguments[i];var n=t[0],r=t[1],o=t[2],s=t[3];if("function"==typeof t[1]){var a;a=t,n=a[0],o=a[1],s=a[2],r=void 0}s||(s=!1);for(var l=n.split(" "),c=0;c<l.length;c+=1)for(var u=0;u<this.length;u+=1){var d=e[u];if(r){if(d.dom7LiveListeners)for(var p=0;p<d.dom7LiveListeners.length;p+=1)o?d.dom7LiveListeners[p].listener===o&&d.removeEventListener(l[c],d.dom7LiveListeners[p].proxyListener,s):d.dom7LiveListeners[p].type===l[c]&&d.removeEventListener(l[c],d.dom7LiveListeners[p].proxyListener,s)}else if(d.dom7Listeners)for(var h=0;h<d.dom7Listeners.length;h+=1)o?d.dom7Listeners[h].listener===o&&d.removeEventListener(l[c],d.dom7Listeners[h].proxyListener,s):d.dom7Listeners[h].type===l[c]&&d.removeEventListener(l[c],d.dom7Listeners[h].proxyListener,s)}return this}function h(){for(var e=this,t=[],i=arguments.length;i--;)t[i]=arguments[i];for(var n=t[0].split(" "),r=t[1],o=0;o<n.length;o+=1)for(var s=0;s<this.length;s+=1){var a=void 0;try{a=new window.CustomEvent(n[o],{detail:r,bubbles:!0,cancelable:!0})}catch(l){a=document.createEvent("Event"),a.initEvent(n[o],!0,!0),a.detail=r}e[s].dom7EventData=t.filter(function(e,t){return t>0}),e[s].dispatchEvent(a),e[s].dom7EventData=[],delete e[s].dom7EventData}return this}function f(e){function t(o){if(o.target===this)for(e.call(this,o),i=0;i<n.length;i+=1)r.off(n[i],t)}var i,n=["webkitTransitionEnd","transitionend"],r=this;if(e)for(i=0;i<n.length;i+=1)r.on(n[i],t);return this}function v(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null}function g(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null}function m(){if(this.length>0){var e=this[0],t=e.getBoundingClientRect(),i=document.body,n=e.clientTop||i.clientTop||0,r=e.clientLeft||i.clientLeft||0,o=e===window?window.scrollY:e.scrollTop,s=e===window?window.scrollX:e.scrollLeft;return{top:t.top+o-n,
left:t.left+s-r}}return null}function y(){return this[0]?window.getComputedStyle(this[0],null):{}}function b(e,t){var i,n=this;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var r in e)n[i].style[r]=e[r];return this}if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)n[i].style[e]=t;return this}return this}function w(e){var t=this;if(!e)return this;for(var i=0;i<this.length;i+=1)if(e.call(t[i],i,t[i])===!1)return t;return this}function T(e){var t=this;if("undefined"==typeof e)return this[0]?this[0].innerHTML:void 0;for(var i=0;i<this.length;i+=1)t[i].innerHTML=e;return this}function C(e){var t=this;if("undefined"==typeof e)return this[0]?this[0].textContent.trim():null;for(var i=0;i<this.length;i+=1)t[i].textContent=e;return this}function x(t){var i,n,r=this[0];if(!r||"undefined"==typeof t)return!1;if("string"==typeof t){if(r.matches)return r.matches(t);if(r.webkitMatchesSelector)return r.webkitMatchesSelector(t);if(r.msMatchesSelector)return r.msMatchesSelector(t);for(i=e(t),n=0;n<i.length;n+=1)if(i[n]===r)return!0;return!1}if(t===document)return r===document;if(t===window)return r===window;if(t.nodeType||t instanceof W){for(i=t.nodeType?[t]:t,n=0;n<i.length;n+=1)if(i[n]===r)return!0;return!1}return!1}function k(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}}function S(e){if("undefined"==typeof e)return this;var t,i=this.length;return e>i-1?new W([]):e<0?(t=i+e,new W(t<0?[]:[this[t]])):new W([this[e]])}function _(){for(var e=this,t=[],i=arguments.length;i--;)t[i]=arguments[i];for(var n,r=0;r<t.length;r+=1){n=t[r];for(var o=0;o<this.length;o+=1)if("string"==typeof n){var s=document.createElement("div");for(s.innerHTML=n;s.firstChild;)e[o].appendChild(s.firstChild)}else if(n instanceof W)for(var a=0;a<n.length;a+=1)e[o].appendChild(n[a]);else e[o].appendChild(n)}return this}function E(e){var t,i,n=this;for(t=0;t<this.length;t+=1)if("string"==typeof e){var r=document.createElement("div");for(r.innerHTML=e,i=r.childNodes.length-1;i>=0;i-=1)n[t].insertBefore(r.childNodes[i],n[t].childNodes[0])}else if(e instanceof W)for(i=0;i<e.length;i+=1)n[t].insertBefore(e[i],n[t].childNodes[0]);else n[t].insertBefore(e,n[t].childNodes[0]);return this}function A(t){return new W(this.length>0?t?this[0].nextElementSibling&&e(this[0].nextElementSibling).is(t)?[this[0].nextElementSibling]:[]:this[0].nextElementSibling?[this[0].nextElementSibling]:[]:[])}function P(t){var i=[],n=this[0];if(!n)return new W([]);for(;n.nextElementSibling;){var r=n.nextElementSibling;t?e(r).is(t)&&i.push(r):i.push(r),n=r}return new W(i)}function M(t){if(this.length>0){var i=this[0];return new W(t?i.previousElementSibling&&e(i.previousElementSibling).is(t)?[i.previousElementSibling]:[]:i.previousElementSibling?[i.previousElementSibling]:[])}return new W([])}function j(t){var i=[],n=this[0];if(!n)return new W([]);for(;n.previousElementSibling;){var r=n.previousElementSibling;t?e(r).is(t)&&i.push(r):i.push(r),n=r}return new W(i)}function O(i){for(var n=this,r=[],o=0;o<this.length;o+=1)null!==n[o].parentNode&&(i?e(n[o].parentNode).is(i)&&r.push(n[o].parentNode):r.push(n[o].parentNode));return e(t(r))}function N(i){for(var n=this,r=[],o=0;o<this.length;o+=1)for(var s=n[o].parentNode;s;)i?e(s).is(i)&&r.push(s):r.push(s),s=s.parentNode;return e(t(r))}function D(e){var t=this;return"undefined"==typeof e?new W([]):(t.is(e)||(t=t.parents(e).eq(0)),t)}function $(e){for(var t=this,i=[],n=0;n<this.length;n+=1)for(var r=t[n].querySelectorAll(e),o=0;o<r.length;o+=1)i.push(r[o]);return new W(i)}function L(i){for(var n=this,r=[],o=0;o<this.length;o+=1)for(var s=n[o].childNodes,a=0;a<s.length;a+=1)i?1===s[a].nodeType&&e(s[a]).is(i)&&r.push(s[a]):1===s[a].nodeType&&r.push(s[a]);return new W(t(r))}function I(){for(var e=this,t=0;t<this.length;t+=1)e[t].parentNode&&e[t].parentNode.removeChild(e[t]);return this}function z(){for(var t=[],i=arguments.length;i--;)t[i]=arguments[i];var n,r,o=this;for(n=0;n<t.length;n+=1){var s=e(t[n]);for(r=0;r<s.length;r+=1)o[o.length]=s[r],o.length+=1}return o}function H(){var e=this,t=e.params,i=e.touchEvents,n=e.el,r=e.wrapperEl;e.onTouchStart=Ie.bind(e),e.onTouchMove=ze.bind(e),e.onTouchEnd=He.bind(e),e.onClick=Re.bind(e);var o="container"===t.touchEventsTarget?n:r,s=!!t.nested;if(me.ie)o.addEventListener(i.start,e.onTouchStart,!1),(U.touch?o:G).addEventListener(i.move,e.onTouchMove,s),(U.touch?o:G).addEventListener(i.end,e.onTouchEnd,!1);else{if(U.touch){var a=!("touchstart"!==i.start||!U.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};o.addEventListener(i.start,e.onTouchStart,a),o.addEventListener(i.move,e.onTouchMove,U.passiveListener?{passive:!1,capture:s}:s),o.addEventListener(i.end,e.onTouchEnd,a)}(t.simulateTouch&&!Le.ios&&!Le.android||t.simulateTouch&&!U.touch&&Le.ios)&&(o.addEventListener("mousedown",e.onTouchStart,!1),G.addEventListener("mousemove",e.onTouchMove,s),G.addEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&o.addEventListener("click",e.onClick,!0),e.on("resize observerUpdate",Fe)}function F(){var e=this,t=e.params,i=e.touchEvents,n=e.el,r=e.wrapperEl,o="container"===t.touchEventsTarget?n:r,s=!!t.nested;if(me.ie)o.removeEventListener(i.start,e.onTouchStart,!1),(U.touch?o:G).removeEventListener(i.move,e.onTouchMove,s),(U.touch?o:G).removeEventListener(i.end,e.onTouchEnd,!1);else{if(U.touch){var a=!("onTouchStart"!==i.start||!U.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};o.removeEventListener(i.start,e.onTouchStart,a),o.removeEventListener(i.move,e.onTouchMove,s),o.removeEventListener(i.end,e.onTouchEnd,a)}(t.simulateTouch&&!Le.ios&&!Le.android||t.simulateTouch&&!U.touch&&Le.ios)&&(o.removeEventListener("mousedown",e.onTouchStart,!1),G.removeEventListener("mousemove",e.onTouchMove,s),G.removeEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&o.removeEventListener("click",e.onClick,!0),e.off("resize observerUpdate",Fe)}function R(){var e="onwheel",t=e in G;if(!t){var i=G.createElement("div");i.setAttribute(e,"return;"),t="function"==typeof i[e]}return!t&&G.implementation&&G.implementation.hasFeature&&G.implementation.hasFeature("","")!==!0&&(t=G.implementation.hasFeature("Events.wheel","3.0")),t}var B;B="undefined"==typeof window?{navigator:{userAgent:""},location:{},history:{},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{}},Image:function(){},Date:function(){},screen:{}}:window;var q=B,W=function(e){for(var t=this,i=0;i<e.length;i+=1)t[i]=e[i];return t.length=e.length,this};e.fn=W.prototype,e.Class=W,e.Dom7=W;var V=("resize scroll".split(" "),{addClass:i,removeClass:n,hasClass:r,toggleClass:o,attr:s,removeAttr:a,data:l,transform:c,transition:u,on:d,off:p,trigger:h,transitionEnd:f,outerWidth:v,outerHeight:g,offset:m,css:b,each:w,html:T,text:C,is:x,index:k,eq:S,append:_,prepend:E,next:A,nextAll:P,prev:M,prevAll:j,parent:O,parents:N,closest:D,find:$,children:L,remove:I,add:z,styles:y});Object.keys(V).forEach(function(t){e.fn[t]=V[t]});var X,Y={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(i){}try{delete t[e]}catch(i){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){void 0===t&&(t="x");var i,n,r,o=q.getComputedStyle(e,null);return q.WebKitCSSMatrix?(n=o.transform||o.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),r=new q.WebKitCSSMatrix("none"===n?"":n)):(r=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=r.toString().split(",")),"x"===t&&(n=q.WebKitCSSMatrix?r.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=q.WebKitCSSMatrix?r.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0},parseUrlQuery:function(e){var t,i,n,r,o={},s=e||q.location.href;if("string"==typeof s&&s.length)for(s=s.indexOf("?")>-1?s.replace(/\S*\?/,""):"",i=s.split("&").filter(function(e){return""!==e}),r=i.length,t=0;t<r;t+=1)n=i[t].replace(/#\S+/g,"").split("="),o[decodeURIComponent(n[0])]="undefined"==typeof n[1]?void 0:decodeURIComponent(n[1])||"";return o},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),n=1;n<e.length;n+=1){var r=e[n];if(void 0!==r&&null!==r)for(var o=Object.keys(Object(r)),s=0,a=o.length;s<a;s+=1){var l=o[s],c=Object.getOwnPropertyDescriptor(r,l);void 0!==c&&c.enumerable&&(Y.isObject(i[l])&&Y.isObject(r[l])?Y.extend(i[l],r[l]):!Y.isObject(i[l])&&Y.isObject(r[l])?(i[l]={},Y.extend(i[l],r[l])):i[l]=r[l])}}return i}};X="undefined"==typeof document?{addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return{}},querySelectorAll:function(){return[]},createElement:function(){return{style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document;var G=X,U=function(){return{touch:q.Modernizr&&q.Modernizr.touch===!0||function(){return!!("ontouchstart"in q||q.DocumentTouch&&G instanceof q.DocumentTouch)}(),transforms3d:q.Modernizr&&q.Modernizr.csstransforms3d===!0||function(){var e=G.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=G.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),i=0;i<t.length;i+=1)if(t[i]in e)return!0;return!1}(),observer:function(){return"MutationObserver"in q||"WebkitMutationObserver"in q}(),passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});q.addEventListener("testPassiveListener",null,t)}catch(i){}return e}(),gestures:function(){return"ongesturestart"in q}()}}(),K=function(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})},Q={components:{}};K.prototype.on=function(e,t){var i=this;return"function"!=typeof t?i:(e.split(" ").forEach(function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e].push(t)}),i)},K.prototype.once=function(e,t){function i(){for(var r=[],o=arguments.length;o--;)r[o]=arguments[o];t.apply(n,r),n.off(e,i)}var n=this;return"function"!=typeof t?n:n.on(e,i)},K.prototype.off=function(e,t){var i=this;return e.split(" ").forEach(function(e){"undefined"==typeof t?i.eventsListeners[e]=[]:i.eventsListeners[e].forEach(function(n,r){n===t&&i.eventsListeners[e].splice(r,1)})}),i},K.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=this;if(!i.eventsListeners)return i;var n,r,o;"string"==typeof e[0]||Array.isArray(e[0])?(n=e[0],r=e.slice(1,e.length),o=i):(n=e[0].events,r=e[0].data,o=e[0].context||i);var s=Array.isArray(n)?n:n.split(" ");return s.forEach(function(e){if(i.eventsListeners[e]){var t=[];i.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(o,r)})}}),i},K.prototype.useModulesParams=function(e){var t=this;t.modules&&Object.keys(t.modules).forEach(function(i){var n=t.modules[i];n.params&&Y.extend(e,n.params)})},K.prototype.useModules=function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach(function(i){var n=t.modules[i],r=e[i]||{};n.instance&&Object.keys(n.instance).forEach(function(e){var i=n.instance[e];"function"==typeof i?t[e]=i.bind(t):t[e]=i}),n.on&&t.on&&Object.keys(n.on).forEach(function(e){t.on(e,n.on[e])}),n.create&&n.create.bind(t)(r)})},Q.components.set=function(e){var t=this;t.use&&t.use(e)},K.installModule=function(e){for(var t=[],i=arguments.length-1;i-- >0;)t[i]=arguments[i+1];var n=this;n.prototype.modules||(n.prototype.modules={});var r=e.name||Object.keys(n.prototype.modules).length+"_"+Y.now();return n.prototype.modules[r]=e,e.proto&&Object.keys(e.proto).forEach(function(t){n.prototype[t]=e.proto[t]}),e["static"]&&Object.keys(e["static"]).forEach(function(t){n[t]=e["static"][t]}),e.install&&e.install.apply(n,t),n},K.use=function(e){for(var t=[],i=arguments.length-1;i-- >0;)t[i]=arguments[i+1];var n=this;return Array.isArray(e)?(e.forEach(function(e){return n.installModule(e)}),n):n.installModule.apply(n,[e].concat(t))},Object.defineProperties(K,Q);var J=function(){var e,t,i=this,n=i.$el;e="undefined"!=typeof i.params.width?i.params.width:n[0].clientWidth,t="undefined"!=typeof i.params.height?i.params.height:n[0].clientHeight,0===e&&i.isHorizontal()||0===t&&i.isVertical()||(e=e-parseInt(n.css("padding-left"),10)-parseInt(n.css("padding-right"),10),t=t-parseInt(n.css("padding-top"),10)-parseInt(n.css("padding-bottom"),10),Y.extend(i,{width:e,height:t,size:i.isHorizontal()?e:t}))},Z=function(){var e=this,t=e.params,i=e.$wrapperEl,n=e.size,r=e.rtl,o=e.wrongRTL,s=i.children("."+e.params.slideClass),a=e.virtual&&t.virtual.enabled,l=a?e.virtual.slides.length:s.length,c=[],u=[],d=[],p=t.slidesOffsetBefore;"function"==typeof p&&(p=t.slidesOffsetBefore.call(e));var h=t.slidesOffsetAfter;"function"==typeof h&&(h=t.slidesOffsetAfter.call(e));var f=l,v=e.snapGrid.length,g=e.snapGrid.length,m=t.spaceBetween,y=-p,b=0,w=0;if("undefined"!=typeof n){"string"==typeof m&&m.indexOf("%")>=0&&(m=parseFloat(m.replace("%",""))/100*n),e.virtualSize=-m,r?s.css({marginLeft:"",marginTop:""}):s.css({marginRight:"",marginBottom:""});var T;t.slidesPerColumn>1&&(T=Math.floor(l/t.slidesPerColumn)===l/e.params.slidesPerColumn?l:Math.ceil(l/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(T=Math.max(T,t.slidesPerView*t.slidesPerColumn)));for(var C,x=t.slidesPerColumn,k=T/x,S=k-(t.slidesPerColumn*k-l),_=0;_<l;_+=1){C=0;var E=s.eq(_);if(t.slidesPerColumn>1){var A=void 0,P=void 0,M=void 0;"column"===t.slidesPerColumnFill?(P=Math.floor(_/x),M=_-P*x,(P>S||P===S&&M===x-1)&&(M+=1,M>=x&&(M=0,P+=1)),A=P+M*T/x,E.css({"-webkit-box-ordinal-group":A,"-moz-box-ordinal-group":A,"-ms-flex-order":A,"-webkit-order":A,order:A})):(M=Math.floor(_/k),P=_-M*k),E.css("margin-"+(e.isHorizontal()?"top":"left"),0!==M&&t.spaceBetween&&t.spaceBetween+"px").attr("data-swiper-column",P).attr("data-swiper-row",M)}"none"!==E.css("display")&&("auto"===t.slidesPerView?(C=e.isHorizontal()?E.outerWidth(!0):E.outerHeight(!0),t.roundLengths&&(C=Math.floor(C))):(C=(n-(t.slidesPerView-1)*m)/t.slidesPerView,t.roundLengths&&(C=Math.floor(C)),s[_]&&(e.isHorizontal()?s[_].style.width=C+"px":s[_].style.height=C+"px")),s[_]&&(s[_].swiperSlideSize=C),d.push(C),t.centeredSlides?(y=y+C/2+b/2+m,0===b&&0!==_&&(y=y-n/2-m),0===_&&(y=y-n/2-m),Math.abs(y)<.001&&(y=0),w%t.slidesPerGroup===0&&c.push(y),u.push(y)):(w%t.slidesPerGroup===0&&c.push(y),u.push(y),y=y+C+m),e.virtualSize+=C+m,b=C,w+=1)}e.virtualSize=Math.max(e.virtualSize,n)+h;var j;if(r&&o&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:e.virtualSize+t.spaceBetween+"px"}),U.flexbox&&!t.setWrapperSize||(e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"})),t.slidesPerColumn>1&&(e.virtualSize=(C+t.spaceBetween)*T,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){j=[];for(var O=0;O<c.length;O+=1)c[O]<e.virtualSize+c[0]&&j.push(c[O]);c=j}if(!t.centeredSlides){j=[];for(var N=0;N<c.length;N+=1)c[N]<=e.virtualSize-n&&j.push(c[N]);c=j,Math.floor(e.virtualSize-n)-Math.floor(c[c.length-1])>1&&c.push(e.virtualSize-n)}0===c.length&&(c=[0]),0!==t.spaceBetween&&(e.isHorizontal()?r?s.css({marginLeft:m+"px"}):s.css({marginRight:m+"px"}):s.css({marginBottom:m+"px"})),Y.extend(e,{slides:s,snapGrid:c,slidesGrid:u,slidesSizesGrid:d}),l!==f&&e.emit("slidesLengthChange"),c.length!==v&&e.emit("snapGridLengthChange"),u.length!==g&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()}},ee=function(){var e,t=this,i=[],n=0;if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)for(e=0;e<Math.ceil(t.params.slidesPerView);e+=1){var r=t.activeIndex+e;if(r>t.slides.length)break;i.push(t.slides.eq(r)[0])}else i.push(t.slides.eq(t.activeIndex)[0]);for(e=0;e<i.length;e+=1)if("undefined"!=typeof i[e]){var o=i[e].offsetHeight;n=o>n?o:n}n&&t.$wrapperEl.css("height",n+"px")},te=function(){for(var e=this,t=e.slides,i=0;i<t.length;i+=1)t[i].swiperSlideOffset=e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop},ie=function(e){void 0===e&&(e=this.translate||0);var t=this,i=t.params,n=t.slides,r=t.rtl;if(0!==n.length){"undefined"==typeof n[0].swiperSlideOffset&&t.updateSlidesOffset();var o=-e;r&&(o=e),n.removeClass(i.slideVisibleClass);for(var s=0;s<n.length;s+=1){var a=n[s],l=(o+(i.centeredSlides?t.minTranslate():0)-a.swiperSlideOffset)/(a.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility){var c=-(o-a.swiperSlideOffset),u=c+t.slidesSizesGrid[s],d=c>=0&&c<t.size||u>0&&u<=t.size||c<=0&&u>=t.size;d&&n.eq(s).addClass(i.slideVisibleClass)}a.progress=r?-l:l}}},ne=function(e){void 0===e&&(e=this.translate||0);var t=this,i=t.params,n=t.maxTranslate()-t.minTranslate(),r=t.progress,o=t.isBeginning,s=t.isEnd,a=o,l=s;0===n?(r=0,o=!0,s=!0):(r=(e-t.minTranslate())/n,o=r<=0,s=r>=1),Y.extend(t,{progress:r,isBeginning:o,isEnd:s}),(i.watchSlidesProgress||i.watchSlidesVisibility)&&t.updateSlidesProgress(e),o&&!a&&t.emit("reachBeginning toEdge"),s&&!l&&t.emit("reachEnd toEdge"),(a&&!o||l&&!s)&&t.emit("fromEdge"),t.emit("progress",r)},re=function(){var e=this,t=e.slides,i=e.params,n=e.$wrapperEl,r=e.activeIndex,o=e.realIndex,s=e.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass);var a;a=s?e.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+r+'"]'):t.eq(r),a.addClass(i.slideActiveClass),i.loop&&(a.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+o+'"]').addClass(i.slideDuplicateActiveClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+o+'"]').addClass(i.slideDuplicateActiveClass));var l=a.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=t.eq(0),l.addClass(i.slideNextClass));var c=a.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===c.length&&(c=t.eq(-1),c.addClass(i.slidePrevClass)),i.loop&&(l.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),c.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+c.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+c.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},oe=function(e){var t,i=this,n=i.rtl?i.translate:-i.translate,r=i.slidesGrid,o=i.snapGrid,s=i.params,a=i.activeIndex,l=i.realIndex,c=i.snapIndex,u=e;if("undefined"==typeof u){for(var d=0;d<r.length;d+=1)"undefined"!=typeof r[d+1]?n>=r[d]&&n<r[d+1]-(r[d+1]-r[d])/2?u=d:n>=r[d]&&n<r[d+1]&&(u=d+1):n>=r[d]&&(u=d);s.normalizeSlideIndex&&(u<0||"undefined"==typeof u)&&(u=0)}if(t=o.indexOf(n)>=0?o.indexOf(n):Math.floor(u/s.slidesPerGroup),t>=o.length&&(t=o.length-1),u===a)return void(t!==c&&(i.snapIndex=t,i.emit("snapIndexChange")));var p=parseInt(i.slides.eq(u).attr("data-swiper-slide-index")||u,10);Y.extend(i,{snapIndex:t,realIndex:p,previousIndex:a,activeIndex:u}),i.emit("activeIndexChange"),i.emit("snapIndexChange"),l!==p&&i.emit("realIndexChange"),i.emit("slideChange")},se=function(t){var i=this,n=i.params,r=e(t.target).closest("."+n.slideClass)[0],o=!1;if(r)for(var s=0;s<i.slides.length;s+=1)i.slides[s]===r&&(o=!0);return r&&o?(i.clickedSlide=r,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(e(r).attr("data-swiper-slide-index"),10):i.clickedIndex=e(r).index(),void(n.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide())):(i.clickedSlide=void 0,void(i.clickedIndex=void 0))},ae={updateSize:J,updateSlides:Z,updateAutoHeight:ee,updateSlidesOffset:te,updateSlidesProgress:ie,updateProgress:ne,updateSlidesClasses:re,updateActiveIndex:oe,updateClickedSlide:se},le=function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this,i=t.params,n=t.rtl,r=t.translate,o=t.$wrapperEl;if(i.virtualTranslate)return n?-r:r;var s=Y.getTranslate(o[0],e);return n&&(s=-s),s||0},ce=function(e,t){var i=this,n=i.rtl,r=i.params,o=i.$wrapperEl,s=i.progress,a=0,l=0,c=0;i.isHorizontal()?a=n?-e:e:l=e,r.roundLengths&&(a=Math.floor(a),l=Math.floor(l)),r.virtualTranslate||(U.transforms3d?o.transform("translate3d("+a+"px, "+l+"px, "+c+"px)"):o.transform("translate("+a+"px, "+l+"px)")),i.translate=i.isHorizontal()?a:l;var u,d=i.maxTranslate()-i.minTranslate();u=0===d?0:(e-i.minTranslate())/d,u!==s&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},ue=function(){return-this.snapGrid[0]},de=function(){return-this.snapGrid[this.snapGrid.length-1]},pe={getTranslate:le,setTranslate:ce,minTranslate:ue,maxTranslate:de},he=function(e,t){var i=this;i.$wrapperEl.transition(e),i.emit("setTransition",e,t)},fe=function(e){void 0===e&&(e=!0);var t=this,i=t.activeIndex,n=t.params,r=t.previousIndex;n.autoHeight&&t.updateAutoHeight(),t.emit("transitionStart"),e&&i!==r&&(t.emit("slideChangeTransitionStart"),i>r?t.emit("slideNextTransitionStart"):t.emit("slidePrevTransitionStart"))},ve=function(e){void 0===e&&(e=!0);var t=this,i=t.activeIndex,n=t.previousIndex;t.animating=!1,t.setTransition(0),t.emit("transitionEnd"),e&&i!==n&&(t.emit("slideChangeTransitionEnd"),i>n?t.emit("slideNextTransitionEnd"):t.emit("slidePrevTransitionEnd"))},ge={setTransition:he,transitionStart:fe,transitionEnd:ve},me=function(){function e(){var e=G.createElement("div");return e.innerHTML="<!--[if lte IE 9]><i></i><![endif]-->",1===e.getElementsByTagName("i").length}function t(){var e=q.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}return{isSafari:t(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(q.navigator.userAgent),ie:q.navigator.pointerEnabled||q.navigator.msPointerEnabled,ieTouch:q.navigator.msPointerEnabled&&q.navigator.msMaxTouchPoints>1||q.navigator.pointerEnabled&&q.navigator.maxTouchPoints>1,lteIE9:e()}}(),ye=function(e,t,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var r=this,o=e;o<0&&(o=0);var s=r.params,a=r.snapGrid,l=r.slidesGrid,c=r.previousIndex,u=r.activeIndex,d=r.rtl,p=r.$wrapperEl,h=Math.floor(o/s.slidesPerGroup);h>=a.length&&(h=a.length-1),(u||s.initialSlide||0)===(c||0)&&i&&r.emit("beforeSlideChangeStart");var f=-a[h];if(r.updateProgress(f),s.normalizeSlideIndex)for(var v=0;v<l.length;v+=1)-Math.floor(100*f)>=Math.floor(100*l[v])&&(o=v);return!(!r.allowSlideNext&&f<r.translate&&f<r.minTranslate())&&(!(!r.allowSlidePrev&&f>r.translate&&f>r.maxTranslate()&&(u||0)!==o)&&(d&&-f===r.translate||!d&&f===r.translate?(r.updateActiveIndex(o),s.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==s.effect&&r.setTranslate(f),!1):(0===t||me.lteIE9?(r.setTransition(0),r.setTranslate(f),r.updateActiveIndex(o),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,n),r.transitionStart(i),r.transitionEnd(i)):(r.setTransition(t),r.setTranslate(f),r.updateActiveIndex(o),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,n),r.transitionStart(i),r.animating||(r.animating=!0,p.transitionEnd(function(){r&&!r.destroyed&&r.transitionEnd(i)}))),!0)))},be=function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,r=n.params,o=n.animating;return r.loop?!o&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,n.slideTo(n.activeIndex+r.slidesPerGroup,e,t,i)):n.slideTo(n.activeIndex+r.slidesPerGroup,e,t,i)},we=function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,r=n.params,o=n.animating;return r.loop?!o&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,n.slideTo(n.activeIndex-1,e,t,i)):n.slideTo(n.activeIndex-1,e,t,i)},Te=function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this;return n.slideTo(n.activeIndex,e,t,i)},Ce=function(){var t,i=this,n=i.params,r=i.$wrapperEl,o="auto"===n.slidesPerView?i.slidesPerViewDynamic():n.slidesPerView,s=i.clickedIndex;if(n.loop){if(i.animating)return;t=parseInt(e(i.clickedSlide).attr("data-swiper-slide-index"),10),n.centeredSlides?s<i.loopedSlides-o/2||s>i.slides.length-i.loopedSlides+o/2?(i.loopFix(),s=r.children("."+n.slideClass+'[data-swiper-slide-index="'+t+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),Y.nextTick(function(){i.slideTo(s)})):i.slideTo(s):s>i.slides.length-o?(i.loopFix(),s=r.children("."+n.slideClass+'[data-swiper-slide-index="'+t+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),Y.nextTick(function(){i.slideTo(s)})):i.slideTo(s)}else i.slideTo(s)},xe={slideTo:ye,slideNext:be,slidePrev:we,slideReset:Te,slideToClickedSlide:Ce},ke=function(){var t=this,i=t.params,n=t.$wrapperEl;n.children("."+i.slideClass+"."+i.slideDuplicateClass).remove();var r=n.children("."+i.slideClass);if(i.loopFillGroupWithBlank){var o=i.slidesPerGroup-r.length%i.slidesPerGroup;if(o!==i.slidesPerGroup){for(var s=0;s<o;s+=1){var a=e(G.createElement("div")).addClass(i.slideClass+" "+i.slideBlankClass);n.append(a)}r=n.children("."+i.slideClass)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=r.length),t.loopedSlides=parseInt(i.loopedSlides||i.slidesPerView,10),t.loopedSlides+=i.loopAdditionalSlides,t.loopedSlides>r.length&&(t.loopedSlides=r.length);var l=[],c=[];r.each(function(i,n){var o=e(n);i<t.loopedSlides&&c.push(n),i<r.length&&i>=r.length-t.loopedSlides&&l.push(n),o.attr("data-swiper-slide-index",i)});for(var u=0;u<c.length;u+=1)n.append(e(c[u].cloneNode(!0)).addClass(i.slideDuplicateClass));for(var d=l.length-1;d>=0;d-=1)n.prepend(e(l[d].cloneNode(!0)).addClass(i.slideDuplicateClass))},Se=function(){var e,t=this,i=t.params,n=t.activeIndex,r=t.slides,o=t.loopedSlides,s=t.allowSlidePrev,a=t.allowSlideNext;t.allowSlidePrev=!0,t.allowSlideNext=!0,n<o?(e=r.length-3*o+n,e+=o,t.slideTo(e,0,!1,!0)):("auto"===i.slidesPerView&&n>=2*o||n>r.length-2*i.slidesPerView)&&(e=-r.length+n+o,e+=o,t.slideTo(e,0,!1,!0)),t.allowSlidePrev=s,t.allowSlideNext=a},_e=function(){var e=this,t=e.$wrapperEl,i=e.params,n=e.slides;t.children("."+i.slideClass+"."+i.slideDuplicateClass).remove(),n.removeAttr("data-swiper-slide-index")},Ee={loopCreate:ke,loopFix:Se,loopDestroy:_e},Ae=function(e){var t=this;if(!U.touch&&t.params.simulateTouch){var i=t.el;i.style.cursor="move",i.style.cursor=e?"-webkit-grabbing":"-webkit-grab",i.style.cursor=e?"-moz-grabbin":"-moz-grab",i.style.cursor=e?"grabbing":"grab"}},Pe=function(){var e=this;U.touch||(e.el.style.cursor="")},Me={setGrabCursor:Ae,unsetGrabCursor:Pe},je=function(e){var t=this,i=t.$wrapperEl,n=t.params;if(n.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var r=0;r<e.length;r+=1)e[r]&&i.append(e[r]);else i.append(e);n.loop&&t.loopCreate(),n.observer&&U.observer||t.update()},Oe=function(e){var t=this,i=t.params,n=t.$wrapperEl,r=t.activeIndex;i.loop&&t.loopDestroy();var o=r+1;if("object"==typeof e&&"length"in e){for(var s=0;s<e.length;s+=1)e[s]&&n.prepend(e[s]);o=r+e.length}else n.prepend(e);i.loop&&t.loopCreate(),i.observer&&U.observer||t.update(),t.slideTo(o,0,!1)},Ne=function(e){var t=this,i=t.params,n=t.$wrapperEl,r=t.activeIndex;i.loop&&(t.loopDestroy(),t.slides=n.children("."+i.slideClass));var o,s=r;if("object"==typeof e&&"length"in e){for(var a=0;a<e.length;a+=1)o=e[a],t.slides[o]&&t.slides.eq(o).remove(),o<s&&(s-=1);s=Math.max(s,0)}else o=e,t.slides[o]&&t.slides.eq(o).remove(),o<s&&(s-=1),s=Math.max(s,0);i.loop&&t.loopCreate(),i.observer&&U.observer||t.update(),i.loop?t.slideTo(s+t.loopedSlides,0,!1):t.slideTo(s,0,!1)},De=function(){for(var e=this,t=[],i=0;i<e.slides.length;i+=1)t.push(i);e.removeSlide(t)},$e={appendSlide:je,prependSlide:Oe,removeSlide:Ne,removeAllSlides:De},Le=function(){var e=q.navigator.userAgent,t={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:q.cordova||q.phonegap,phonegap:q.cordova||q.phonegap},i=e.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),n=e.match(/(Android);?[\s\/]+([\d.]+)?/),r=e.match(/(iPad).*OS\s([\d_]+)/),o=e.match(/(iPod)(.*OS\s([\d_]+))?/),s=!r&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if(i&&(t.os="windows",t.osVersion=i[2],t.windows=!0),n&&!i&&(t.os="android",t.osVersion=n[2],t.android=!0,t.androidChrome=e.toLowerCase().indexOf("chrome")>=0),(r||s||o)&&(t.os="ios",t.ios=!0),s&&!o&&(t.osVersion=s[2].replace(/_/g,"."),t.iphone=!0),r&&(t.osVersion=r[2].replace(/_/g,"."),t.ipad=!0),o&&(t.osVersion=o[3]?o[3].replace(/_/g,"."):null,t.iphone=!0),t.ios&&t.osVersion&&e.indexOf("Version/")>=0&&"10"===t.osVersion.split(".")[0]&&(t.osVersion=e.toLowerCase().split("version/")[1].split(" ")[0]),t.desktop=!(t.os||t.android||t.webView),t.webView=(s||r||o)&&e.match(/.*AppleWebKit(?!.*Safari)/i),t.os&&"ios"===t.os){var a=t.osVersion.split("."),l=G.querySelector('meta[name="viewport"]');t.minimalUi=!t.webView&&(o||s)&&(1*a[0]===7?1*a[1]>=1:1*a[0]>7)&&l&&l.getAttribute("content").indexOf("minimal-ui")>=0}return t.pixelRatio=q.devicePixelRatio||1,t}(),Ie=function(t){var i=this,n=i.touchEventsData,r=i.params,o=i.touches,s=t;if(s.originalEvent&&(s=s.originalEvent),n.isTouchEvent="touchstart"===s.type,(n.isTouchEvent||!("which"in s)||3!==s.which)&&(!n.isTouched||!n.isMoved)){if(r.noSwiping&&e(s.target).closest("."+r.noSwipingClass)[0])return void(i.allowClick=!0);if(!r.swipeHandler||e(s).closest(r.swipeHandler)[0]){o.currentX="touchstart"===s.type?s.targetTouches[0].pageX:s.pageX,o.currentY="touchstart"===s.type?s.targetTouches[0].pageY:s.pageY;var a=o.currentX,l=o.currentY;if(!(Le.ios&&!Le.cordova&&r.iOSEdgeSwipeDetection&&a<=r.iOSEdgeSwipeThreshold&&a>=window.screen.width-r.iOSEdgeSwipeThreshold)){if(Y.extend(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=a,o.startY=l,n.touchStartTime=Y.now(),i.allowClick=!0,i.updateSize(),i.swipeDirection=void 0,r.threshold>0&&(n.allowThresholdMove=!1),"touchstart"!==s.type){var c=!0;e(s.target).is(n.formElements)&&(c=!1),G.activeElement&&e(G.activeElement).is(n.formElements)&&G.activeElement.blur(),c&&i.allowTouchMove&&s.preventDefault()}i.emit("touchStart",s)}}}},ze=function(t){var i=this,n=i.touchEventsData,r=i.params,o=i.touches,s=i.rtl,a=t;if(a.originalEvent&&(a=a.originalEvent),!n.isTouchEvent||"mousemove"!==a.type){var l="touchmove"===a.type?a.targetTouches[0].pageX:a.pageX,c="touchmove"===a.type?a.targetTouches[0].pageY:a.pageY;if(a.preventedByNestedSwiper)return o.startX=l,void(o.startY=c);if(!i.allowTouchMove)return i.allowClick=!1,void(n.isTouched&&(Y.extend(o,{startX:l,startY:c,currentX:l,currentY:c}),n.touchStartTime=Y.now()));if(n.isTouchEvent&&r.touchReleaseOnEdges&&!r.loop)if(i.isVertical()){if(c<o.startY&&i.translate<=i.maxTranslate()||c>o.startY&&i.translate>=i.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(l<o.startX&&i.translate<=i.maxTranslate()||l>o.startX&&i.translate>=i.minTranslate())return;
if(n.isTouchEvent&&G.activeElement&&a.target===G.activeElement&&e(a.target).is(n.formElements))return n.isMoved=!0,void(i.allowClick=!1);if(n.allowTouchCallbacks&&i.emit("touchMove",a),!(a.targetTouches&&a.targetTouches.length>1)){o.currentX=l,o.currentY=c;var u=o.currentX-o.startX,d=o.currentY-o.startY;if("undefined"==typeof n.isScrolling){var p;i.isHorizontal()&&o.currentY===o.startY||i.isVertical()&&o.currentX===o.startX?n.isScrolling=!1:u*u+d*d>=25&&(p=180*Math.atan2(Math.abs(d),Math.abs(u))/Math.PI,n.isScrolling=i.isHorizontal()?p>r.touchAngle:90-p>r.touchAngle)}if(n.isScrolling&&i.emit("touchMoveOpposite",a),"undefined"==typeof startMoving&&(o.currentX===o.startX&&o.currentY===o.startY||(n.startMoving=!0)),n.isTouched){if(n.isScrolling)return void(n.isTouched=!1);if(n.startMoving){i.allowClick=!1,a.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&a.stopPropagation(),n.isMoved||(r.loop&&i.loopFix(),n.startTranslate=i.getTranslate(),i.setTransition(0),i.animating&&i.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!r.grabCursor||i.allowSlideNext!==!0&&i.allowSlidePrev!==!0||i.setGrabCursor(!0),i.emit("sliderFirstMove",a)),i.emit("sliderMove",a),n.isMoved=!0;var h=i.isHorizontal()?u:d;o.diff=h,h*=r.touchRatio,s&&(h=-h),i.swipeDirection=h>0?"prev":"next",n.currentTranslate=h+n.startTranslate;var f=!0,v=r.resistanceRatio;if(r.touchReleaseOnEdges&&(v=0),h>0&&n.currentTranslate>i.minTranslate()?(f=!1,r.resistance&&(n.currentTranslate=i.minTranslate()-1+Math.pow(-i.minTranslate()+n.startTranslate+h,v))):h<0&&n.currentTranslate<i.maxTranslate()&&(f=!1,r.resistance&&(n.currentTranslate=i.maxTranslate()+1-Math.pow(i.maxTranslate()-n.startTranslate-h,v))),f&&(a.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),r.threshold>0){if(!(Math.abs(h)>r.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,o.startX=o.currentX,o.startY=o.currentY,n.currentTranslate=n.startTranslate,void(o.diff=i.isHorizontal()?o.currentX-o.startX:o.currentY-o.startY)}r.followFinger&&((r.freeMode||r.watchSlidesProgress||r.watchSlidesVisibility)&&(i.updateActiveIndex(),i.updateSlidesClasses()),r.freeMode&&(0===n.velocities.length&&n.velocities.push({position:o[i.isHorizontal()?"startX":"startY"],time:n.touchStartTime}),n.velocities.push({position:o[i.isHorizontal()?"currentX":"currentY"],time:Y.now()})),i.updateProgress(n.currentTranslate),i.setTranslate(n.currentTranslate))}}}}},He=function(e){var t=this,i=t.touchEventsData,n=t.params,r=t.touches,o=t.rtl,s=t.$wrapperEl,a=t.slidesGrid,l=t.snapGrid,c=e;if(c.originalEvent&&(c=c.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",c),i.allowTouchCallbacks=!1,i.isTouched){n.grabCursor&&i.isMoved&&i.isTouched&&(t.allowSlideNext===!0||t.allowSlidePrev===!0)&&t.setGrabCursor(!1);var u=Y.now(),d=u-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(c),t.emit("tap",c),d<300&&u-i.lastClickTime>300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),i.clickTimeout=Y.nextTick(function(){t&&!t.destroyed&&t.emit("click",c)},300)),d<300&&u-i.lastClickTime<300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),t.emit("doubleTap",c))),i.lastClickTime=Y.now(),Y.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===r.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var p;if(p=n.followFinger?o?t.translate:-t.translate:-i.currentTranslate,n.freeMode){if(p<-t.minTranslate())return void t.slideTo(t.activeIndex);if(p>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(n.freeModeMomentum){if(i.velocities.length>1){var h=i.velocities.pop(),f=i.velocities.pop(),v=h.position-f.position,g=h.time-f.time;t.velocity=v/g,t.velocity/=2,Math.abs(t.velocity)<n.freeModeMinimumVelocity&&(t.velocity=0),(g>150||Y.now()-h.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=n.freeModeMomentumVelocityRatio,i.velocities.length=0;var m=1e3*n.freeModeMomentumRatio,y=t.velocity*m,b=t.translate+y;o&&(b=-b);var w,T=!1,C=20*Math.abs(t.velocity)*n.freeModeMomentumBounceRatio;if(b<t.maxTranslate())n.freeModeMomentumBounce?(b+t.maxTranslate()<-C&&(b=t.maxTranslate()-C),w=t.maxTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.maxTranslate();else if(b>t.minTranslate())n.freeModeMomentumBounce?(b-t.minTranslate()>C&&(b=t.minTranslate()+C),w=t.minTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.minTranslate();else if(n.freeModeSticky){for(var x,k=0;k<l.length;k+=1)if(l[k]>-b){x=k;break}b=Math.abs(l[x]-b)<Math.abs(l[x-1]-b)||"next"===t.swipeDirection?l[x]:l[x-1],b=-b}if(0!==t.velocity)m=o?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity);else if(n.freeModeSticky)return void t.slideReset();n.freeModeMomentumBounce&&T?(t.updateProgress(w),t.setTransition(m),t.setTranslate(b),t.transitionStart(),t.animating=!0,s.transitionEnd(function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(n.speed),t.setTranslate(w),s.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(b),t.setTransition(m),t.setTranslate(b),t.transitionStart(),t.animating||(t.animating=!0,s.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}return void((!n.freeModeMomentum||d>=n.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses()))}for(var S=0,_=t.slidesSizesGrid[0],E=0;E<a.length;E+=n.slidesPerGroup)"undefined"!=typeof a[E+n.slidesPerGroup]?p>=a[E]&&p<a[E+n.slidesPerGroup]&&(S=E,_=a[E+n.slidesPerGroup]-a[E]):p>=a[E]&&(S=E,_=a[a.length-1]-a[a.length-2]);var A=(p-a[S])/_;if(d>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(A>=n.longSwipesRatio?t.slideTo(S+n.slidesPerGroup):t.slideTo(S)),"prev"===t.swipeDirection&&(A>1-n.longSwipesRatio?t.slideTo(S+n.slidesPerGroup):t.slideTo(S))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo(S+n.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(S)}}},Fe=function(){var e=this,t=e.params,i=e.el;if(!i||0!==i.offsetWidth){t.breakpoints&&e.setBreakpoint();var n=e.allowSlideNext,r=e.allowSlidePrev;if(e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),t.freeMode){var o=Math.min(Math.max(e.translate,e.maxTranslate()),e.minTranslate());e.setTranslate(o),e.updateActiveIndex(),e.updateSlidesClasses(),t.autoHeight&&e.updateAutoHeight()}else e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0);e.allowSlidePrev=r,e.allowSlideNext=n}},Re=function(e){var t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},Be={attachEvents:H,detachEvents:F},qe=function(){var e=this,t=e.activeIndex,i=e.loopedSlides;void 0===i&&(i=0);var n=e.params,r=n.breakpoints;if(r&&(!r||0!==Object.keys(r).length)){var o=e.getBreakpoint(r);if(o&&e.currentBreakpoint!==o){var s=o in r?r[o]:e.originalParams,a=n.loop&&s.slidesPerView!==n.slidesPerView;Y.extend(e.params,s),Y.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=o,a&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-i+e.loopedSlides,0,!1)),e.emit("breakpoint",s)}}},We=function(e){if(e){var t=!1,i=[];Object.keys(e).forEach(function(e){i.push(e)}),i.sort(function(e,t){return parseInt(e,10)-parseInt(t,10)});for(var n=0;n<i.length;n+=1){var r=i[n];r>=q.innerWidth&&!t&&(t=r)}return t||"max"}},Ve={setBreakpoint:qe,getBreakpoint:We},Xe=function(){var e=this,t=e.classNames,i=e.params,n=e.rtl,r=e.$el,o=[];o.push(i.direction),i.freeMode&&o.push("free-mode"),U.flexbox||o.push("no-flexbox"),i.autoHeight&&o.push("autoheight"),n&&o.push("rtl"),i.slidesPerColumn>1&&o.push("multirow"),Le.android&&o.push("android"),Le.ios&&o.push("ios"),(q.navigator.pointerEnabled||q.navigator.msPointerEnabled)&&o.push("wp8-"+i.direction),o.forEach(function(e){t.push(i.containerModifierClass+e)}),r.addClass(t.join(" "))},Ye=function(){var e=this,t=e.$el,i=e.classNames;t.removeClass(i.join(" "))},Ge={addClasses:Xe,removeClasses:Ye},Ue=function(e,t,i,n,r,o){function s(){o&&o()}var a;e.complete&&r?s():t?(a=new q.Image,a.onload=s,a.onerror=s,n&&(a.sizes=n),i&&(a.srcset=i),t&&(a.src=t)):s()},Ke=function(){function e(){"undefined"!=typeof t&&null!==t&&t&&!t.destroyed&&(void 0!==t.imagesLoaded&&(t.imagesLoaded+=1),t.imagesLoaded===t.imagesToLoad.length&&(t.params.updateOnImagesReady&&t.update(),t.emit("imagesReady")))}var t=this;t.imagesToLoad=t.$el.find("img");for(var i=0;i<t.imagesToLoad.length;i+=1){var n=t.imagesToLoad[i];t.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,e)}},Qe={loadImage:Ue,preloadImages:Ke},Je={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},Ze={update:ae,translate:pe,transition:ge,slide:xe,loop:Ee,grabCursor:Me,manipulation:$e,events:Be,breakpoints:Ve,classes:Ge,images:Qe},et={},tt=function(t){function i(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,s;if(1===n.length&&n[0].constructor&&n[0].constructor===Object)s=n[0];else{var a;a=n,o=a[0],s=a[1]}s||(s={}),s=Y.extend({},s),o&&!s.el&&(s.el=o),t.call(this,s),Object.keys(Ze).forEach(function(e){Object.keys(Ze[e]).forEach(function(t){i.prototype[t]||(i.prototype[t]=Ze[e][t])})});var l=this;"undefined"==typeof l.modules&&(l.modules={}),Object.keys(l.modules).forEach(function(e){var t=l.modules[e];if(t.params){var i=Object.keys(t.params)[0],n=t.params[i];if("object"!=typeof n)return;if(!(i in s&&"enabled"in n))return;s[i]===!0&&(s[i]={enabled:!0}),"object"!=typeof s[i]||"enabled"in s[i]||(s[i].enabled=!0),s[i]||(s[i]={enabled:!1})}});var c=Y.extend({},Je);l.useModulesParams(c),l.params=Y.extend({},c,et,s),l.originalParams=Y.extend({},l.params),l.passedParams=Y.extend({},s);var u=e(l.params.el);if(o=u[0]){if(u.length>1){var d=[];return u.each(function(e,t){var n=Y.extend({},s,{el:t});d.push(new i(n))}),d}o.swiper=l,u.data("swiper",l);var p=u.children("."+l.params.wrapperClass);return Y.extend(l,{$el:u,el:o,$wrapperEl:p,wrapperEl:p[0],classNames:[],slides:e(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===l.params.direction},isVertical:function(){return"vertical"===l.params.direction},rtl:"horizontal"===l.params.direction&&("rtl"===o.dir.toLowerCase()||"rtl"===u.css("direction")),wrongRTL:"-webkit-box"===p.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,progress:0,velocity:0,animating:!1,allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEvents:function(){var e=["touchstart","touchmove","touchend"],t=["mousedown","mousemove","mouseup"];return q.navigator.pointerEnabled?t=["pointerdown","pointermove","pointerup"]:q.navigator.msPointerEnabled&&(t=["MSPointerDown","MsPointerMove","MsPointerUp"]),{start:U.touch||!l.params.simulateTouch?e[0]:t[0],move:U.touch||!l.params.simulateTouch?e[1]:t[1],end:U.touch||!l.params.simulateTouch?e[2]:t[2]}}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:Y.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.useModules(),l.params.init&&l.init(),l}}t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i;var n={extendedDefaults:{},defaults:{},Class:{},$:{}};return i.prototype.slidesPerViewDynamic=function(){var e=this,t=e.params,i=e.slides,n=e.slidesGrid,r=e.size,o=e.activeIndex,s=1;if(t.centeredSlides){for(var a,l=i[o].swiperSlideSize,c=o+1;c<i.length;c+=1)i[c]&&!a&&(l+=i[c].swiperSlideSize,s+=1,l>r&&(a=!0));for(var u=o-1;u>=0;u-=1)i[u]&&!a&&(l+=i[u].swiperSlideSize,s+=1,l>r&&(a=!0))}else for(var d=o+1;d<i.length;d+=1)n[d]-n[o]<r&&(s+=1);return s},i.prototype.update=function(){function e(){i=Math.min(Math.max(t.translate,t.maxTranslate()),t.minTranslate()),t.setTranslate(i),t.updateActiveIndex(),t.updateSlidesClasses()}var t=this;if(t&&!t.destroyed){t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses();var i,n;t.params.freeMode?(e(),t.params.autoHeight&&t.updateAutoHeight()):(n=("auto"===t.params.slidesPerView||t.params.slidesPerView>1)&&t.isEnd&&!t.params.centeredSlides?t.slideTo(t.slides.length-1,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0),n||e()),t.emit("update")}},i.prototype.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))},i.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,n=i.params,r=i.$el,o=i.$wrapperEl,s=i.slides;i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),t&&(i.removeClasses(),r.removeAttr("style"),o.removeAttr("style"),s&&s.length&&s.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),e!==!1&&(i.$el[0].swiper=null,i.$el.data("swiper",null),Y.deleteProps(i)),i.destroyed=!0},i.extendDefaults=function(e){Y.extend(et,e)},n.extendedDefaults.get=function(){return et},n.defaults.get=function(){return Je},n.Class.get=function(){return t},n.$.get=function(){return e},Object.defineProperties(i,n),i}(K),it={name:"device",proto:{device:Le},"static":{device:Le}},nt={name:"support",proto:{support:U},"static":{support:U}},rt={name:"browser",proto:{browser:me},"static":{browser:me}},ot={name:"resize",create:function(){var e=this;Y.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){var e=this;q.addEventListener("resize",e.resize.resizeHandler),q.addEventListener("orientationchange",e.resize.orientationChangeHandler)},destroy:function(){var e=this;q.removeEventListener("resize",e.resize.resizeHandler),q.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}},st={func:q.MutationObserver||q.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,n=st.func,r=new n(function(e){e.forEach(function(e){i.emit("observerUpdate",e)})});r.observe(e,{attributes:"undefined"==typeof t.attributes||t.attributes,childList:"undefined"==typeof t.childList||t.childList,characterData:"undefined"==typeof t.characterData||t.characterData}),i.observer.observers.push(r)},init:function(){var e=this;if(U.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),i=0;i<t.length;i+=1)e.observer.attach(t[i]);e.observer.attach(e.$el[0],{childList:!1}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){var e=this;e.observer.observers.forEach(function(e){e.disconnect()}),e.observer.observers=[]}},at={name:"observer",params:{observer:!1,observeParents:!1},create:function(){var e=this;Y.extend(e,{observer:{init:st.init.bind(e),attach:st.attach.bind(e),destroy:st.destroy.bind(e),observers:[]}})},on:{init:function(){var e=this;e.observer.init()},destroy:function(){var e=this;e.observer.destroy()}}},lt={update:function(e){function t(){i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),i.lazy&&i.params.lazy.enabled&&i.lazy.load()}var i=this,n=i.params,r=n.slidesPerView,o=n.slidesPerGroup,s=n.centeredSlides,a=i.virtual,l=a.from,c=a.to,u=a.slides,d=a.slidesGrid,p=a.renderSlide,h=a.offset;i.updateActiveIndex();var f,v=i.activeIndex||0;f=i.rtl&&i.isHorizontal()?"right":i.isHorizontal()?"left":"top";var g,m;s?(g=Math.floor(r/2)+o,m=Math.floor(r/2)+o):(g=r+(o-1),m=o);var y=Math.max((v||0)-m,0),b=Math.min((v||0)+g,u.length-1),w=(i.slidesGrid[y]||0)-(i.slidesGrid[0]||0);if(Y.extend(i.virtual,{from:y,to:b,offset:w,slidesGrid:i.slidesGrid}),l===y&&c===b&&!e)return i.slidesGrid!==d&&w!==h&&i.slides.css(f,w+"px"),void i.updateProgress();if(i.params.virtual.renderExternal)return i.params.virtual.renderExternal.call(i,{offset:w,from:y,to:b,slides:function(){for(var e=[],t=y;t<=b;t+=1)e.push(u[t]);return e}()}),void t();var T=[],C=[];if(e)i.$wrapperEl.find("."+i.params.slideClass).remove();else for(var x=l;x<=c;x+=1)(x<y||x>b)&&i.$wrapperEl.find("."+i.params.slideClass+'[data-swiper-slide-index="'+x+'"]').remove();for(var k=0;k<u.length;k+=1)k>=y&&k<=b&&("undefined"==typeof c||e?C.push(k):(k>c&&C.push(k),k<l&&T.push(k)));C.forEach(function(e){i.$wrapperEl.append(p(u[e],e))}),T.sort(function(e,t){return e<t}).forEach(function(e){i.$wrapperEl.prepend(p(u[e],e))}),i.$wrapperEl.children(".swiper-slide").css(f,w+"px"),t()},renderSlide:function(t,i){var n=this,r=n.params.virtual;if(r.cache&&n.virtual.cache[i])return n.virtual.cache[i];var o=e(r.renderSlide?r.renderSlide.call(n,t,i):'<div class="'+n.params.slideClass+'" data-swiper-slide-index="'+i+'">'+t+"</div>");return o.attr("data-swiper-slide-index")||o.attr("data-swiper-slide-index",i),r.cache&&(n.virtual.cache[i]=o),o},appendSlide:function(e){var t=this;t.virtual.slides.push(e),t.virtual.update(!0)},prependSlide:function(e){var t=this;if(t.virtual.slides.unshift(e),t.params.virtual.cache){var i=t.virtual.cache,n={};Object.keys(i).forEach(function(e){n[e+1]=i[e]}),t.virtual.cache=n}t.virtual.update(!0),t.slideNext(0)}},ct={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null}},create:function(){var e=this;Y.extend(e,{virtual:{update:lt.update.bind(e),appendSlide:lt.appendSlide.bind(e),prependSlide:lt.prependSlide.bind(e),renderSlide:lt.renderSlide.bind(e),slides:e.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e=this;if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};Y.extend(e.params,t),Y.extend(e.originalParams,t),e.virtual.update()}},setTranslate:function(){var e=this;e.params.virtual.enabled&&e.virtual.update()}}},ut={handle:function(e){var t=this,i=e;i.originalEvent&&(i=i.originalEvent);var n=i.keyCode||i.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===n||t.isVertical()&&40===n))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===n||t.isVertical()&&38===n))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||G.activeElement&&G.activeElement.nodeName&&("input"===G.activeElement.nodeName.toLowerCase()||"textarea"===G.activeElement.nodeName.toLowerCase()))){if(37===n||39===n||38===n||40===n){var r=!1;if(t.$el.parents("."+t.params.slideClass).length>0&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var o={left:q.pageXOffset,top:q.pageYOffset},s=q.innerWidth,a=q.innerHeight,l=t.$el.offset();t.rtl&&(l.left-=t.$el[0].scrollLeft);for(var c=[[l.left,l.top],[l.left+t.width,l.top],[l.left,l.top+t.height],[l.left+t.width,l.top+t.height]],u=0;u<c.length;u+=1){var d=c[u];d[0]>=o.left&&d[0]<=o.left+s&&d[1]>=o.top&&d[1]<=o.top+a&&(r=!0)}if(!r)return}t.isHorizontal()?(37!==n&&39!==n||(i.preventDefault?i.preventDefault():i.returnValue=!1),(39===n&&!t.rtl||37===n&&t.rtl)&&t.slideNext(),(37===n&&!t.rtl||39===n&&t.rtl)&&t.slidePrev()):(38!==n&&40!==n||(i.preventDefault?i.preventDefault():i.returnValue=!1),40===n&&t.slideNext(),38===n&&t.slidePrev()),t.emit("keyPress",n)}},enable:function(){var t=this;t.keyboard.enabled||(e(G).on("keydown",t.keyboard.handle),t.keyboard.enabled=!0)},disable:function(){var t=this;t.keyboard.enabled&&(e(G).off("keydown",t.keyboard.handle),t.keyboard.enabled=!1)}},dt={name:"keyboard",params:{keyboard:{enabled:!1}},create:function(){var e=this;Y.extend(e,{keyboard:{enabled:!1,enable:ut.enable.bind(e),disable:ut.disable.bind(e),handle:ut.handle.bind(e)}})},on:{init:function(){var e=this;e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(){var e=this;e.keyboard.enabled&&e.keyboard.disable()}}},pt={lastScrollTime:Y.now(),event:function(){return q.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":R()?"wheel":"mousewheel"}(),normalize:function(e){var t=10,i=40,n=800,r=0,o=0,s=0,a=0;return"detail"in e&&(o=e.detail),"wheelDelta"in e&&(o=-e.wheelDelta/120),"wheelDeltaY"in e&&(o=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(r=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(r=o,o=0),s=r*t,a=o*t,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(s=e.deltaX),(s||a)&&e.deltaMode&&(1===e.deltaMode?(s*=i,a*=i):(s*=n,a*=n)),s&&!r&&(r=s<1?-1:1),a&&!o&&(o=a<1?-1:1),{spinX:r,spinY:o,pixelX:s,pixelY:a}},handle:function(e){var t=e,i=this,n=i.params.mousewheel;t.originalEvent&&(t=t.originalEvent);var r=0,o=i.rtl?-1:1,s=pt.normalize(t);if(n.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(s.pixelX)>Math.abs(s.pixelY)))return!0;r=s.pixelX*o}else{if(!(Math.abs(s.pixelY)>Math.abs(s.pixelX)))return!0;r=s.pixelY}else r=Math.abs(s.pixelX)>Math.abs(s.pixelY)?-s.pixelX*o:-s.pixelY;if(0===r)return!0;if(n.invert&&(r=-r),i.params.freeMode){var a=i.getTranslate()+r*n.sensitivity,l=i.isBeginning,c=i.isEnd;if(a>=i.minTranslate()&&(a=i.minTranslate()),a<=i.maxTranslate()&&(a=i.maxTranslate()),i.setTransition(0),i.setTranslate(a),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!l&&i.isBeginning||!c&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky&&(clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=Y.nextTick(function(){i.slideReset()},300)),i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.stopAutoplay(),0===a||a===i.maxTranslate())return!0}else{if(Y.now()-i.mousewheel.lastScrollTime>60)if(r<0)if(i.isEnd&&!i.params.loop||i.animating){if(n.releaseOnEdges)return!0}else i.slideNext(),i.emit("scroll",t);else if(i.isBeginning&&!i.params.loop||i.animating){if(n.releaseOnEdges)return!0}else i.slidePrev(),i.emit("scroll",t);i.mousewheel.lastScrollTime=(new q.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable:function(){var t=this;if(!pt.event)return!1;if(t.mousewheel.enabled)return!1;var i=t.$el;return"container"!==t.params.mousewheel.eventsTarged&&(i=e(t.params.mousewheel.eventsTarged)),i.on(pt.event,t.mousewheel.handle),t.mousewheel.enabled=!0,!0},disable:function(){var t=this;if(!pt.event)return!1;if(!t.mousewheel.enabled)return!1;var i=t.$el;return"container"!==t.params.mousewheel.eventsTarged&&(i=e(t.params.mousewheel.eventsTarged)),i.off(pt.event,t.mousewheel.handle),t.mousewheel.enabled=!1,!0}},ht={name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){var e=this;Y.extend(e,{mousewheel:{enabled:!1,enable:pt.enable.bind(e),disable:pt.disable.bind(e),handle:pt.handle.bind(e),lastScrollTime:Y.now()}})},on:{init:function(){var e=this;e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(){var e=this;e.mousewheel.enabled&&e.mousewheel.disable()}}},ft={update:function(){var e=this,t=e.params.navigation;if(!e.params.loop){var i=e.navigation,n=i.$nextEl,r=i.$prevEl;r&&r.length>0&&(e.isBeginning?r.addClass(t.disabledClass):r.removeClass(t.disabledClass)),n&&n.length>0&&(e.isEnd?n.addClass(t.disabledClass):n.removeClass(t.disabledClass))}},init:function(){var t=this,i=t.params.navigation;if(i.nextEl||i.prevEl){var n,r;i.nextEl&&(n=e(i.nextEl),t.params.uniqueNavElements&&"string"==typeof i.nextEl&&n.length>1&&1===t.$el.find(i.nextEl).length&&(n=t.$el.find(i.nextEl))),i.prevEl&&(r=e(i.prevEl),t.params.uniqueNavElements&&"string"==typeof i.prevEl&&r.length>1&&1===t.$el.find(i.prevEl).length&&(r=t.$el.find(i.prevEl))),n&&n.length>0&&n.on("click",function(e){e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()}),r&&r.length>0&&r.on("click",function(e){e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()}),Y.extend(t.navigation,{$nextEl:n,nextEl:n&&n[0],$prevEl:r,prevEl:r&&r[0]})}},destroy:function(){var e=this,t=e.navigation,i=t.$nextEl,n=t.$prevEl;i&&i.length&&(i.off("click"),i.removeClass(e.params.navigation.disabledClass)),n&&n.length&&(n.off("click"),n.removeClass(e.params.navigation.disabledClass))}},vt={name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden"}},create:function(){var e=this;Y.extend(e,{navigation:{init:ft.init.bind(e),update:ft.update.bind(e),destroy:ft.destroy.bind(e)}})},on:{init:function(){var e=this;e.navigation.init(),e.navigation.update()},toEdge:function(){var e=this;e.navigation.update()},fromEdge:function(){var e=this;e.navigation.update()},destroy:function(){var e=this;e.navigation.destroy()},click:function(t){var i=this,n=i.navigation,r=n.$nextEl,o=n.$prevEl;!i.params.navigation.hideOnClick||e(t.target).is(o)||e(t.target).is(r)||(r&&r.toggleClass(i.params.navigation.hiddenClass),o&&o.toggleClass(i.params.navigation.hiddenClass))}}},gt={update:function(){var t=this,i=t.rtl,n=t.params.pagination;if(n.el&&t.pagination.el&&t.pagination.$el&&0!==t.pagination.$el.length){var r,o=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,s=t.pagination.$el,a=t.params.loop?Math.ceil((o-2*t.loopedSlides)/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(r=Math.ceil((t.activeIndex-t.loopedSlides)/t.params.slidesPerGroup),r>o-1-2*t.loopedSlides&&(r-=o-2*t.loopedSlides),r>a-1&&(r-=a),r<0&&"bullets"!==t.params.paginationType&&(r=a+r)):r="undefined"!=typeof t.snapIndex?t.snapIndex:t.activeIndex||0,"bullets"===n.type&&t.pagination.bullets&&t.pagination.bullets.length>0){var l=t.pagination.bullets;if(n.dynamicBullets&&(t.pagination.bulletSize=l.eq(0)[t.isHorizontal()?"outerWidth":"outerHeight"](!0),s.css(t.isHorizontal()?"width":"height",5*t.pagination.bulletSize+"px")),l.removeClass(n.bulletActiveClass+" "+n.bulletActiveClass+"-next "+n.bulletActiveClass+"-next-next "+n.bulletActiveClass+"-prev "+n.bulletActiveClass+"-prev-prev"),s.length>1)l.each(function(t,i){var o=e(i);o.index()===r&&(o.addClass(n.bulletActiveClass),n.dynamicBullets&&(o.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),o.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next")))});else{var c=l.eq(r);c.addClass(n.bulletActiveClass),n.dynamicBullets&&(c.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),c.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next"))}if(n.dynamicBullets){var u=Math.min(l.length,5),d=(t.pagination.bulletSize*u-t.pagination.bulletSize)/2-r*t.pagination.bulletSize,p=i?"right":"left";l.css(t.isHorizontal()?p:"top",d+"px")}}if("fraction"===n.type&&(s.find("."+n.currentClass).text(r+1),s.find("."+n.totalClass).text(a)),"progressbar"===n.type){var h=(r+1)/a,f=h,v=1;t.isHorizontal()||(v=h,f=1),s.find("."+n.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+f+") scaleY("+v+")").transition(t.params.speed)}"custom"===n.type&&n.renderCustom?(s.html(n.renderCustom(t,r+1,a)),t.emit("paginationRender",t,s[0])):t.emit("paginationUpdate",t,s[0])}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el,r="";if("bullets"===t.type){for(var o=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,s=0;s<o;s+=1)r+=t.renderBullet?t.renderBullet.call(e,s,t.bulletClass):"<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";n.html(r),e.pagination.bullets=n.find("."+t.bulletClass)}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',n.html(r)),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',n.html(r)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var t=this,i=t.params.pagination;if(i.el){var n=e(i.el);0!==n.length&&(t.params.uniqueNavElements&&"string"==typeof i.el&&n.length>1&&1===t.$el.find(i.el).length&&(n=t.$el.find(i.el)),"bullets"===i.type&&i.clickable&&n.addClass(i.clickableClass),n.addClass(i.modifierClass+i.type),"bullets"===i.type&&i.dynamicBullets&&n.addClass(""+i.modifierClass+i.type+"-dynamic"),i.clickable&&n.on("click","."+i.bulletClass,function(i){i.preventDefault();var n=e(this).index()*t.params.slidesPerGroup;t.params.loop&&(n+=t.loopedSlides),t.slideTo(n)}),Y.extend(t.pagination,{$el:n,el:n[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.pagination.$el;i.removeClass(t.hiddenClass),i.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&i.off("click","."+t.bulletClass)}}},mt={name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,
renderFraction:null,renderCustom:null,type:"bullets",dynamicBullets:!1,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",clickableClass:"swiper-pagination-clickable"}},create:function(){var e=this;Y.extend(e,{pagination:{init:gt.init.bind(e),render:gt.render.bind(e),update:gt.update.bind(e),destroy:gt.destroy.bind(e)}})},on:{init:function(){var e=this;e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(){var e=this;e.params.loop?e.pagination.update():"undefined"==typeof e.snapIndex&&e.pagination.update()},snapIndexChange:function(){var e=this;e.params.loop||e.pagination.update()},slidesLengthChange:function(){var e=this;e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(){var e=this;e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(){var e=this;e.pagination.destroy()},click:function(t){var i=this;i.params.pagination.el&&i.params.pagination.hideOnClick&&i.pagination.$el.length>0&&!e(t.target).hasClass(i.params.pagination.bulletClass)&&i.pagination.$el.toggleClass(i.params.pagination.hiddenClass)}}},yt={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,i=e.rtl,n=e.progress,r=t.dragSize,o=t.trackSize,s=t.$dragEl,a=t.$el,l=e.params.scrollbar,c=r,u=(o-r)*n;i&&e.isHorizontal()?(u=-u,u>0?(c=r-u,u=0):-u+r>o&&(c=o+u)):u<0?(c=r+u,u=0):u+r>o&&(c=o-u),e.isHorizontal()?(U.transforms3d?s.transform("translate3d("+u+"px, 0, 0)"):s.transform("translateX("+u+"px)"),s[0].style.width=c+"px"):(U.transforms3d?s.transform("translate3d(0px, "+u+"px, 0)"):s.transform("translateY("+u+"px)"),s[0].style.height=c+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),a[0].style.opacity=1,e.scrollbar.timeout=setTimeout(function(){a[0].style.opacity=0,a.transition(400)},1e3))}},setTransition:function(e){var t=this;t.params.scrollbar.el&&t.scrollbar.el&&t.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,i=t.$dragEl,n=t.$el;i[0].style.width="",i[0].style.height="";var r,o=e.isHorizontal()?n[0].offsetWidth:n[0].offsetHeight,s=e.size/e.virtualSize,a=s*(o/e.size);r="auto"===e.params.scrollbar.dragSize?o*s:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?i[0].style.width=r+"px":i[0].style.height=r+"px",s>=1?n[0].style.display="none":n[0].style.display="",e.params.scrollbarHide&&(n[0].style.opacity=0),Y.extend(t,{trackSize:o,divider:s,moveDivider:a,dragSize:r})}},setDragPosition:function(e){var t,i=this,n=i.scrollbar,r=n.$el,o=n.dragSize,s=n.trackSize;t=i.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY;var a;a=(t-r.offset()[i.isHorizontal()?"left":"top"]-o/2)/(s-o),a=Math.max(Math.min(a,1),0),i.rtl&&(a=1-a);var l=i.minTranslate()+(i.maxTranslate()-i.minTranslate())*a;i.updateProgress(l),i.setTranslate(l),i.updateActiveIndex(),i.updateSlidesClasses()},onDragStart:function(e){var t=this,i=t.params.scrollbar,n=t.scrollbar,r=t.$wrapperEl,o=n.$el,s=n.$dragEl;t.scrollbar.isTouched=!0,e.preventDefault(),e.stopPropagation(),r.transition(100),s.transition(100),n.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),o.transition(0),i.hide&&o.css("opacity",1),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this,i=t.scrollbar,n=t.$wrapperEl,r=i.$el,o=i.$dragEl;t.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,i.setDragPosition(e),n.transition(0),r.transition(0),o.transition(0),t.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,i=t.params.scrollbar,n=t.scrollbar,r=n.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,i.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=Y.nextTick(function(){r.css("opacity",0),r.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),i.snapOnRelease&&t.slideReset())},enableDraggable:function(){var t=this;if(t.params.scrollbar.el){var i=t.scrollbar,n=i.$el,r=U.touch?n[0]:document;n.on(t.scrollbar.dragEvents.start,t.scrollbar.onDragStart),e(r).on(t.scrollbar.dragEvents.move,t.scrollbar.onDragMove),e(r).on(t.scrollbar.dragEvents.end,t.scrollbar.onDragEnd)}},disableDraggable:function(){var t=this;if(t.params.scrollbar.el){var i=t.scrollbar,n=i.$el,r=U.touch?n[0]:document;n.off(t.scrollbar.dragEvents.start),e(r).off(t.scrollbar.dragEvents.move),e(r).off(t.scrollbar.dragEvents.end)}},init:function(){var t=this;if(t.params.scrollbar.el){var i=t.scrollbar,n=t.$el,r=t.touchEvents,o=t.params.scrollbar,s=e(o.el);t.params.uniqueNavElements&&"string"==typeof o.el&&s.length>1&&1===n.find(o.el).length&&(s=n.find(o.el));var a=s.find(".swiper-scrollbar-drag");0===a.length&&(a=e('<div class="swiper-scrollbar-drag"></div>'),s.append(a)),t.scrollbar.dragEvents=function(){return t.params.simulateTouch!==!1||U.touch?r:{start:"mousedown",move:"mousemove",end:"mouseup"}}(),Y.extend(i,{$el:s,el:s[0],$dragEl:a,dragEl:a[0]}),o.draggable&&i.enableDraggable()}},destroy:function(){var e=this;e.scrollbar.disableDraggable()}},bt={name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0}},create:function(){var e=this;Y.extend(e,{scrollbar:{init:yt.init.bind(e),destroy:yt.destroy.bind(e),updateSize:yt.updateSize.bind(e),setTranslate:yt.setTranslate.bind(e),setTransition:yt.setTransition.bind(e),enableDraggable:yt.enableDraggable.bind(e),disableDraggable:yt.disableDraggable.bind(e),setDragPosition:yt.setDragPosition.bind(e),onDragStart:yt.onDragStart.bind(e),onDragMove:yt.onDragMove.bind(e),onDragEnd:yt.onDragEnd.bind(e),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){var e=this;e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(){var e=this;e.scrollbar.updateSize()},resize:function(){var e=this;e.scrollbar.updateSize()},observerUpdate:function(){var e=this;e.scrollbar.updateSize()},setTranslate:function(){var e=this;e.scrollbar.setTranslate()},setTransition:function(e){var t=this;t.scrollbar.setTransition(e)},destroy:function(){var e=this;e.scrollbar.destroy()}}},wt={setTransform:function(t,i){var n=this,r=n.rtl,o=e(t),s=r?-1:1,a=o.attr("data-swiper-parallax")||"0",l=o.attr("data-swiper-parallax-x"),c=o.attr("data-swiper-parallax-y"),u=o.attr("data-swiper-parallax-scale"),d=o.attr("data-swiper-parallax-opacity");if(l||c?(l=l||"0",c=c||"0"):n.isHorizontal()?(l=a,c="0"):(c=a,l="0"),l=l.indexOf("%")>=0?parseInt(l,10)*i*s+"%":l*i*s+"px",c=c.indexOf("%")>=0?parseInt(c,10)*i+"%":c*i+"px","undefined"!=typeof d&&null!==d){var p=d-(d-1)*(1-Math.abs(i));o[0].style.opacity=p}if("undefined"==typeof u||null===u)o.transform("translate3d("+l+", "+c+", 0px)");else{var h=u-(u-1)*(1-Math.abs(i));o.transform("translate3d("+l+", "+c+", 0px) scale("+h+")")}},setTranslate:function(){var t=this,i=t.$el,n=t.slides,r=t.progress,o=t.snapGrid;i.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,i){t.parallax.setTransform(i,r)}),n.each(function(i,n){var s=n.progress;t.params.slidesPerGroup>1&&"auto"!==t.params.slidesPerView&&(s+=Math.ceil(i/2)-r*(o.length-1)),s=Math.min(Math.max(s,-1),1),e(n).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,i){t.parallax.setTransform(i,s)})})},setTransition:function(t){void 0===t&&(t=this.params.speed);var i=this,n=i.$el;n.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(i,n){var r=e(n),o=parseInt(r.attr("data-swiper-parallax-duration"),10)||t;0===t&&(o=0),r.transition(o)})}},Tt={name:"parallax",params:{parallax:{enabled:!1}},create:function(){var e=this;Y.extend(e,{parallax:{setTransform:wt.setTransform.bind(e),setTranslate:wt.setTranslate.bind(e),setTransition:wt.setTransition.bind(e)}})},on:{beforeInit:function(){var e=this;e.params.watchSlidesProgress=!0},init:function(){var e=this;e.params.parallax&&e.parallax.setTranslate()},setTranslate:function(){var e=this;e.params.parallax&&e.parallax.setTranslate()},setTransition:function(e){var t=this;t.params.parallax&&t.parallax.setTransition(e)}}},Ct={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,r=e.targetTouches[1].pageY,o=Math.sqrt(Math.pow(n-t,2)+Math.pow(r-i,2));return o},onGestureStart:function(t){var i=this,n=i.params.zoom,r=i.zoom,o=r.gesture;if(r.fakeGestureTouched=!1,r.fakeGestureMoved=!1,!U.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;r.fakeGestureTouched=!0,o.scaleStart=Ct.getDistanceBetweenTouches(t)}return o.$slideEl&&o.$slideEl.length||(o.$slideEl=e(this),0===o.$slideEl.length&&(o.$slideEl=i.slides.eq(i.activeIndex)),o.$imageEl=o.$slideEl.find("img, svg, canvas"),o.$imageWrapEl=o.$imageEl.parent("."+n.containerClass),o.maxRatio=o.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,0!==o.$imageWrapEl.length)?(o.$imageEl.transition(0),void(i.zoom.isScaling=!0)):void(o.$imageEl=void 0)},onGestureChange:function(e){var t=this,i=t.params.zoom,n=t.zoom,r=n.gesture;if(!U.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;n.fakeGestureMoved=!0,r.scaleMove=Ct.getDistanceBetweenTouches(e)}r.$imageEl&&0!==r.$imageEl.length&&(U.gestures?t.zoom.scale=e.scale*n.currentScale:n.scale=r.scaleMove/r.scaleStart*n.currentScale,n.scale>r.maxRatio&&(n.scale=r.maxRatio-1+Math.pow(n.scale-r.maxRatio+1,.5)),n.scale<i.minRatio&&(n.scale=i.minRatio+1-Math.pow(i.minRatio-n.scale+1,.5)),r.$imageEl.transform("translate3d(0,0,0) scale("+n.scale+")"))},onGestureEnd:function(e){var t=this,i=t.params.zoom,n=t.zoom,r=n.gesture;if(!U.gestures){if(!n.fakeGestureTouched||!n.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!Le.android)return;n.fakeGestureTouched=!1,n.fakeGestureMoved=!1}r.$imageEl&&0!==r.$imageEl.length&&(n.scale=Math.max(Math.min(n.scale,r.maxRatio),i.minRatio),r.$imageEl.transition(t.params.speed).transform("translate3d(0,0,0) scale("+n.scale+")"),n.currentScale=n.scale,n.isScaling=!1,1===n.scale&&(r.$slideEl=void 0))},onTouchStart:function(e){var t=this,i=t.zoom,n=i.gesture,r=i.image;n.$imageEl&&0!==n.$imageEl.length&&(r.isTouched||(Le.android&&e.preventDefault(),r.isTouched=!0,r.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,r.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,i=t.zoom,n=i.gesture,r=i.image,o=i.velocity;if(n.$imageEl&&0!==n.$imageEl.length&&(t.allowClick=!1,r.isTouched&&n.$slideEl)){r.isMoved||(r.width=n.$imageEl[0].offsetWidth,r.height=n.$imageEl[0].offsetHeight,r.startX=Y.getTranslate(n.$imageWrapEl[0],"x")||0,r.startY=Y.getTranslate(n.$imageWrapEl[0],"y")||0,n.slideWidth=n.$slideEl[0].offsetWidth,n.slideHeight=n.$slideEl[0].offsetHeight,n.$imageWrapEl.transition(0),t.rtl&&(r.startX=-r.startX),t.rtl&&(r.startY=-r.startY));var s=r.width*i.scale,a=r.height*i.scale;if(!(s<n.slideWidth&&a<n.slideHeight)){if(r.minX=Math.min(n.slideWidth/2-s/2,0),r.maxX=-r.minX,r.minY=Math.min(n.slideHeight/2-a/2,0),r.maxY=-r.minY,r.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,r.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!r.isMoved&&!i.isScaling){if(t.isHorizontal()&&(Math.floor(r.minX)===Math.floor(r.startX)&&r.touchesCurrent.x<r.touchesStart.x||Math.floor(r.maxX)===Math.floor(r.startX)&&r.touchesCurrent.x>r.touchesStart.x))return void(r.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(r.minY)===Math.floor(r.startY)&&r.touchesCurrent.y<r.touchesStart.y||Math.floor(r.maxY)===Math.floor(r.startY)&&r.touchesCurrent.y>r.touchesStart.y))return void(r.isTouched=!1)}e.preventDefault(),e.stopPropagation(),r.isMoved=!0,r.currentX=r.touchesCurrent.x-r.touchesStart.x+r.startX,r.currentY=r.touchesCurrent.y-r.touchesStart.y+r.startY,r.currentX<r.minX&&(r.currentX=r.minX+1-Math.pow(r.minX-r.currentX+1,.8)),r.currentX>r.maxX&&(r.currentX=r.maxX-1+Math.pow(r.currentX-r.maxX+1,.8)),r.currentY<r.minY&&(r.currentY=r.minY+1-Math.pow(r.minY-r.currentY+1,.8)),r.currentY>r.maxY&&(r.currentY=r.maxY-1+Math.pow(r.currentY-r.maxY+1,.8)),o.prevPositionX||(o.prevPositionX=r.touchesCurrent.x),o.prevPositionY||(o.prevPositionY=r.touchesCurrent.y),o.prevTime||(o.prevTime=Date.now()),o.x=(r.touchesCurrent.x-o.prevPositionX)/(Date.now()-o.prevTime)/2,o.y=(r.touchesCurrent.y-o.prevPositionY)/(Date.now()-o.prevTime)/2,Math.abs(r.touchesCurrent.x-o.prevPositionX)<2&&(o.x=0),Math.abs(r.touchesCurrent.y-o.prevPositionY)<2&&(o.y=0),o.prevPositionX=r.touchesCurrent.x,o.prevPositionY=r.touchesCurrent.y,o.prevTime=Date.now(),n.$imageWrapEl.transform("translate3d("+r.currentX+"px, "+r.currentY+"px,0)")}}},onTouchEnd:function(){var e=this,t=e.zoom,i=t.gesture,n=t.image,r=t.velocity;if(i.$imageEl&&0!==i.$imageEl.length){if(!n.isTouched||!n.isMoved)return n.isTouched=!1,void(n.isMoved=!1);n.isTouched=!1,n.isMoved=!1;var o=300,s=300,a=r.x*o,l=n.currentX+a,c=r.y*s,u=n.currentY+c;0!==r.x&&(o=Math.abs((l-n.currentX)/r.x)),0!==r.y&&(s=Math.abs((u-n.currentY)/r.y));var d=Math.max(o,s);n.currentX=l,n.currentY=u;var p=n.width*t.scale,h=n.height*t.scale;n.minX=Math.min(i.slideWidth/2-p/2,0),n.maxX=-n.minX,n.minY=Math.min(i.slideHeight/2-h/2,0),n.maxY=-n.minY,n.currentX=Math.max(Math.min(n.currentX,n.maxX),n.minX),n.currentY=Math.max(Math.min(n.currentY,n.maxY),n.minY),i.$imageWrapEl.transition(d).transform("translate3d("+n.currentX+"px, "+n.currentY+"px,0)")}},onTransitionEnd:function(){var e=this,t=e.zoom,i=t.gesture;i.$slideEl&&e.previousIndex!==e.activeIndex&&(i.$imageEl.transform("translate3d(0,0,0) scale(1)"),i.$imageWrapEl.transform("translate3d(0,0,0)"),i.$slideEl=void 0,i.$imageEl=void 0,i.$imageWrapEl=void 0,t.scale=1,t.currentScale=1)},toggle:function(e){var t=this,i=t.zoom;i.scale&&1!==i.scale?i.out():i["in"](e)},"in":function(t){var i=this,n=i.zoom,r=i.params.zoom,o=n.gesture,s=n.image;if(o.$slideEl||(o.$slideEl=i.clickedSlide?e(i.clickedSlide):i.slides.eq(i.activeIndex),o.$imageEl=o.$slideEl.find("img, svg, canvas"),o.$imageWrapEl=o.$imageEl.parent("."+r.containerClass)),o.$imageEl&&0!==o.$imageEl.length){o.$slideEl.addClass(""+r.zoomedSlideClass);var a,l,c,u,d,p,h,f,v,g,m,y,b,w,T,C,x,k;"undefined"==typeof s.touchesStart.x&&t?(a="touchend"===t.type?t.changedTouches[0].pageX:t.pageX,l="touchend"===t.type?t.changedTouches[0].pageY:t.pageY):(a=s.touchesStart.x,l=s.touchesStart.y),n.scale=o.$imageWrapEl.attr("data-swiper-zoom")||r.maxRatio,n.currentScale=o.$imageWrapEl.attr("data-swiper-zoom")||r.maxRatio,t?(x=o.$slideEl[0].offsetWidth,k=o.$slideEl[0].offsetHeight,c=o.$slideEl.offset().left,u=o.$slideEl.offset().top,d=c+x/2-a,p=u+k/2-l,v=o.$imageEl[0].offsetWidth,g=o.$imageEl[0].offsetHeight,m=v*n.scale,y=g*n.scale,b=Math.min(x/2-m/2,0),w=Math.min(k/2-y/2,0),T=-b,C=-w,h=d*n.scale,f=p*n.scale,h<b&&(h=b),h>T&&(h=T),f<w&&(f=w),f>C&&(f=C)):(h=0,f=0),o.$imageWrapEl.transition(300).transform("translate3d("+h+"px, "+f+"px,0)"),o.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+n.scale+")")}},out:function(){var t=this,i=t.zoom,n=t.params.zoom,r=i.gesture;r.$slideEl||(r.$slideEl=t.clickedSlide?e(t.clickedSlide):t.slides.eq(t.activeIndex),r.$imageEl=r.$slideEl.find("img, svg, canvas"),r.$imageWrapEl=r.$imageEl.parent("."+n.containerClass)),r.$imageEl&&0!==r.$imageEl.length&&(i.scale=1,i.currentScale=1,r.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),r.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),r.$slideEl.removeClass(""+n.zoomedSlideClass),r.$slideEl=void 0)},enable:function(){var t=this,i=t.zoom;if(!i.enabled){i.enabled=!0;var n=t.slides,r=!("touchstart"!==t.touchEvents.start||!U.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1};U.gestures?(n.on("gesturestart",i.onGestureStart,r),n.on("gesturechange",i.onGestureChange,r),n.on("gestureend",i.onGestureEnd,r)):"touchstart"===t.touchEvents.start&&(n.on(t.touchEvents.start,i.onGestureStart,r),n.on(t.touchEvents.move,i.onGestureChange,r),n.on(t.touchEvents.end,i.onGestureEnd,r)),t.slides.each(function(n,r){var o=e(r);o.find("."+t.params.zoom.containerClass).length>0&&o.on(t.touchEvents.move,i.onTouchMove)})}},disable:function(){var t=this,i=t.zoom;if(i.enabled){t.zoom.enabled=!1;var n=t.slides,r=!("touchstart"!==t.touchEvents.start||!U.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1};U.gestures?(n.off("gesturestart",i.onGestureStart,r),n.off("gesturechange",i.onGestureChange,r),n.off("gestureend",i.onGestureEnd,r)):"touchstart"===t.touchEvents.start&&(n.off(t.touchEvents.start,i.onGestureStart,r),n.off(t.touchEvents.move,i.onGestureChange,r),n.off(t.touchEvents.end,i.onGestureEnd,r)),t.slides.each(function(n,r){var o=e(r);o.find("."+t.params.zoom.containerClass).length>0&&o.off(t.touchEvents.move,i.onTouchMove)})}}},xt={name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var e=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(i){t[i]=Ct[i].bind(e)}),Y.extend(e,{zoom:t})},on:{init:function(){var e=this;e.params.zoom.enabled&&e.zoom.enable()},destroy:function(){var e=this;e.zoom.disable()},touchStart:function(e){var t=this;t.zoom.enabled&&t.zoom.onTouchStart(e)},touchEnd:function(e){var t=this;t.zoom.enabled&&t.zoom.onTouchEnd(e)},doubleTap:function(e){var t=this;t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&t.zoom.toggle(e)},transitionEnd:function(){var e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()}}},kt={loadInSlide:function(t,i){void 0===i&&(i=!0);var n=this,r=n.params.lazy;if("undefined"!=typeof t&&0!==n.slides.length){var o=n.virtual&&n.params.virtual.enabled,s=o?n.$wrapperEl.children("."+n.params.slideClass+'[data-swiper-slide-index="'+t+'"]'):n.slides.eq(t),a=s.find("."+r.elementClass+":not(."+r.loadedClass+"):not(."+r.loadingClass+")");!s.hasClass(r.elementClass)||s.hasClass(r.loadedClass)||s.hasClass(r.loadingClass)||(a=a.add(s[0])),0!==a.length&&a.each(function(t,o){var a=e(o);a.addClass(r.loadingClass);var l=a.attr("data-background"),c=a.attr("data-src"),u=a.attr("data-srcset"),d=a.attr("data-sizes");n.loadImage(a[0],c||l,u,d,!1,function(){if("undefined"!=typeof n&&null!==n&&n&&(!n||n.params)&&!n.destroyed){if(l?(a.css("background-image",'url("'+l+'")'),a.removeAttr("data-background")):(u&&(a.attr("srcset",u),a.removeAttr("data-srcset")),d&&(a.attr("sizes",d),a.removeAttr("data-sizes")),c&&(a.attr("src",c),a.removeAttr("data-src"))),a.addClass(r.loadedClass).removeClass(r.loadingClass),s.find("."+r.preloaderClass).remove(),n.params.loop&&i){var e=s.attr("data-swiper-slide-index");if(s.hasClass(n.params.slideDuplicateClass)){var t=n.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+n.params.slideDuplicateClass+")");n.lazy.loadInSlide(t.index(),!1)}else{var o=n.$wrapperEl.children("."+n.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');n.lazy.loadInSlide(o.index(),!1)}}n.emit("lazyImageReady",s[0],a[0])}}),n.emit("lazyImageLoad",s[0],a[0])})}},load:function(){function t(e){if(l){if(r.children("."+o.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return!0}else if(s[e])return!0;return!1}function i(t){return l?e(t).attr("data-swiper-slide-index"):e(t).index()}var n=this,r=n.$wrapperEl,o=n.params,s=n.slides,a=n.activeIndex,l=n.virtual&&o.virtual.enabled,c=o.lazy,u=o.slidesPerView;if("auto"===u&&(u=0),n.lazy.initialImageLoaded||(n.lazy.initialImageLoaded=!0),n.params.watchSlidesVisibility)r.children("."+o.slideVisibleClass).each(function(t,i){var r=l?e(i).attr("data-swiper-slide-index"):e(i).index();n.lazy.loadInSlide(r)});else if(u>1)for(var d=a;d<a+u;d+=1)t(d)&&n.lazy.loadInSlide(d);else n.lazy.loadInSlide(a);if(c.loadPrevNext)if(u>1||c.loadPrevNextAmount&&c.loadPrevNextAmount>1){for(var p=c.loadPrevNextAmount,h=u,f=Math.min(a+h+Math.max(p,h),s.length),v=Math.max(a-Math.max(h,p),0),g=a+u;g<f;g+=1)t(g)&&n.lazy.loadInSlide(g);for(var m=v;m<a;m+=1)t(m)&&n.lazy.loadInSlide(m)}else{var y=r.children("."+o.slideNextClass);y.length>0&&n.lazy.loadInSlide(i(y));var b=r.children("."+o.slidePrevClass);b.length>0&&n.lazy.loadInSlide(i(b))}}},St={name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){var e=this;Y.extend(e,{lazy:{initialImageLoaded:!1,load:kt.load.bind(e),loadInSlide:kt.loadInSlide.bind(e)}})},on:{beforeInit:function(){var e=this;e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(){var e=this;e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&e.lazy.load()},scroll:function(){var e=this;e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize:function(){var e=this;e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove:function(){var e=this;e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(){var e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(){var e=this;e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()}}},_t={LinearSpline:function(e,t){var i=function(){var e,t,i;return function(n,r){for(t=-1,e=n.length;e-t>1;)i=e+t>>1,n[i]<=r?t=i:e=i;return e}}();this.x=e,this.y=t,this.lastIndex=e.length-1;var n,r;return this.interpolate=function(e){return e?(r=i(this.x,e),n=r-1,(e-this.x[n])*(this.y[r]-this.y[n])/(this.x[r]-this.x[n])+this.y[n]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new _t.LinearSpline(t.slidesGrid,e.slidesGrid):new _t.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){function i(e){var t=e.rtl&&"horizontal"===e.params.direction?-o.translate:o.translate;"slide"===o.params.controller.by&&(o.controller.getInterpolateFunction(e),r=-o.controller.spline.interpolate(-t)),r&&"container"!==o.params.controller.by||(n=(e.maxTranslate()-e.minTranslate())/(o.maxTranslate()-o.minTranslate()),r=(t-o.minTranslate())*n+e.minTranslate()),o.params.controller.inverse&&(r=e.maxTranslate()-r),e.updateProgress(r),e.setTranslate(r,o),e.updateActiveIndex(),e.updateSlidesClasses()}var n,r,o=this,s=o.controller.control;if(Array.isArray(s))for(var a=0;a<s.length;a+=1)s[a]!==t&&s[a]instanceof tt&&i(s[a]);else s instanceof tt&&t!==s&&i(s)},setTransition:function(e,t){function i(t){t.setTransition(e,r),0!==e&&(t.transitionStart(),t.$wrapperEl.transitionEnd(function(){o&&(t.params.loop&&"slide"===r.params.controller.by&&t.loopFix(),t.transitionEnd())}))}var n,r=this,o=r.controller.control;if(Array.isArray(o))for(n=0;n<o.length;n+=1)o[n]!==t&&o[n]instanceof tt&&i(o[n]);else o instanceof tt&&t!==o&&i(o)}},Et={name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){var e=this;Y.extend(e,{controller:{control:e.params.controller.control,getInterpolateFunction:_t.getInterpolateFunction.bind(e),setTranslate:_t.setTranslate.bind(e),setTransition:_t.setTransition.bind(e)}})},on:{update:function(){var e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(){var e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(){var e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t){var i=this;i.controller.control&&i.controller.setTranslate(e,t)},setTransition:function(e,t){var i=this;i.controller.control&&i.controller.setTransition(e,t)}}},At={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(t){var i=this,n=i.params.a11y;if(13===t.keyCode){var r=e(t.target);i.navigation&&i.navigation.$nextEl&&r.is(i.navigation.$nextEl)&&(i.isEnd&&!i.params.loop||i.slideNext(),i.isEnd?i.a11y.notify(n.lastSlideMessage):i.a11y.notify(n.nextSlideMessage)),i.navigation&&i.navigation.$prevEl&&r.is(i.navigation.$prevEl)&&(i.isBeginning&&!i.params.loop||i.slidePrev(),i.isBeginning?i.a11y.notify(n.firstSlideMessage):i.a11y.notify(n.prevSlideMessage)),i.pagination&&r.is("."+i.params.pagination.bulletClass)&&r[0].click()}},notify:function(e){var t=this,i=t.a11y.liveRegion;0!==i.length&&(i.html(""),i.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop){var t=e.navigation,i=t.$nextEl,n=t.$prevEl;n&&n.length>0&&(e.isBeginning?e.a11y.disableEl(n):e.a11y.enableEl(n)),i&&i.length>0&&(e.isEnd?e.a11y.disableEl(i):e.a11y.enableEl(i))}},updatePagination:function(){var t=this,i=t.params.a11y;t.pagination&&t.params.pagination.clickable&&t.pagination.bullets&&t.pagination.bullets.length&&t.pagination.bullets.each(function(n,r){var o=e(r);t.a11y.makeElFocusable(o),t.a11y.addElRole(o,"button"),t.a11y.addElLabel(o,i.paginationBulletMessage.replace(/{{index}}/,o.index()+1))})},init:function(){var e=this;e.$el.append(e.a11y.liveRegion);var t,i,n=e.params.a11y;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&(e.a11y.makeElFocusable(t),e.a11y.addElRole(t,"button"),e.a11y.addElLabel(t,n.nextSlideMessage),t.on("keydown",e.a11y.onEnterKey)),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,n.prevSlideMessage),i.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy:function(){var e=this;e.a11y.liveRegion&&e.a11y.liveRegion.length>0&&e.a11y.liveRegion.remove();var t,i;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&t.off("keydown",e.a11y.onEnterKey),i&&i.off("keydown",e.a11y.onEnterKey),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.off("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)}},Pt={name:"a11y",params:{a11y:{enabled:!1,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;Y.extend(t,{a11y:{liveRegion:e('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(At).forEach(function(e){t.a11y[e]=At[e].bind(t)})},on:{init:function(){var e=this;e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(){var e=this;e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(){var e=this;e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(){var e=this;e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(){var e=this;e.params.a11y.enabled&&e.a11y.destroy()}}},Mt={init:function(){var e=this;if(e.params.history){if(!q.history||!q.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var t=e.history;t.initialized=!0,t.paths=Mt.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||q.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){var e=this;e.params.history.replaceState||q.removeEventListener("popstate",e.history.setHistoryPopState)},setHistoryPopState:function(){var e=this;e.history.paths=Mt.getPathValues(),e.history.scrollToSlide(e.params.speed,e.history.paths.value,!1)},getPathValues:function(){var e=q.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length,i=e[t-2],n=e[t-1];return{key:i,value:n}},setHistory:function(e,t){var i=this;if(i.history.initialized&&i.params.history.enabled){var n=i.slides.eq(t),r=Mt.slugify(n.attr("data-history"));q.location.pathname.includes(e)||(r=e+"/"+r);var o=q.history.state;o&&o.value===r||(i.params.history.replaceState?q.history.replaceState({value:r},null,r):q.history.pushState({value:r},null,r))}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){var n=this;if(t)for(var r=0,o=n.slides.length;r<o;r+=1){var s=n.slides.eq(r),a=Mt.slugify(s.attr("data-history"));if(a===t&&!s.hasClass(n.params.slideDuplicateClass)){var l=s.index();n.slideTo(l,e,i)}}else n.slideTo(0,e,i)}},jt={name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){var e=this;Y.extend(e,{history:{init:Mt.init.bind(e),setHistory:Mt.setHistory.bind(e),setHistoryPopState:Mt.setHistoryPopState.bind(e),scrollToSlide:Mt.scrollToSlide.bind(e),destroy:Mt.destroy.bind(e)}})},on:{init:function(){var e=this;e.params.history.enabled&&e.history.init()},destroy:function(){var e=this;e.params.history.enabled&&e.history.destroy()},transitionEnd:function(){var e=this;e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},Ot={onHashCange:function(){var e=this,t=G.location.hash.replace("#",""),i=e.slides.eq(e.activeIndex).attr("data-hash");t!==i&&e.slideTo(e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+t+'"]').index())},setHash:function(){var e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&q.history&&q.history.replaceState)q.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||"");else{var t=e.slides.eq(e.activeIndex),i=t.attr("data-hash")||t.attr("data-history");G.location.hash=i||""}},init:function(){var t=this;if(!(!t.params.hashNavigation.enabled||t.params.history&&t.params.history.enabled)){t.hashNavigation.initialized=!0;var i=G.location.hash.replace("#","");if(i)for(var n=0,r=0,o=t.slides.length;r<o;r+=1){var s=t.slides.eq(r),a=s.attr("data-hash")||s.attr("data-history");if(a===i&&!s.hasClass(t.params.slideDuplicateClass)){var l=s.index();t.slideTo(l,n,t.params.runCallbacksOnInit,!0)}}t.params.hashNavigation.watchState&&e(q).on("hashchange",t.hashNavigation.onHashCange)}},destroy:function(){var t=this;t.params.hashNavigation.watchState&&e(q).off("hashchange",t.hashNavigation.onHashCange)}},Nt={name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){var e=this;Y.extend(e,{hashNavigation:{initialized:!1,init:Ot.init.bind(e),destroy:Ot.destroy.bind(e),setHash:Ot.setHash.bind(e),onHashCange:Ot.onHashCange.bind(e)}})},on:{init:function(){var e=this;e.params.hashNavigation.enabled&&e.hashNavigation.init();
},destroy:function(){var e=this;e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(){var e=this;e.hashNavigation.initialized&&e.hashNavigation.setHash()}}},Dt={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),e.autoplay.timeout=Y.nextTick(function(){e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},i)},start:function(){var e=this;return"undefined"==typeof e.autoplay.timeout&&(!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0))},stop:function(){var e=this;return!!e.autoplay.running&&("undefined"!=typeof e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0===e?(t.autoplay.paused=!1,t.autoplay.run()):t.$wrapperEl.transitionEnd(function(){t&&!t.destroyed&&(t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())})))}},$t={name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,disableOnInteraction:!0,stopOnLastSlide:!1}},create:function(){var e=this;Y.extend(e,{autoplay:{running:!1,paused:!1,run:Dt.run.bind(e),start:Dt.start.bind(e),stop:Dt.stop.bind(e),pause:Dt.pause.bind(e)}})},on:{init:function(){var e=this;e.params.autoplay.enabled&&e.autoplay.start()},beforeTransitionStart:function(e,t){var i=this;i.autoplay.running&&(t||!i.params.autoplay.disableOnInteraction?i.autoplay.pause(e):i.autoplay.stop())},sliderFirstMove:function(){var e=this;e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},destroy:function(){var e=this;e.autoplay.running&&e.autoplay.stop()}}},Lt={setTranslate:function(){for(var e=this,t=e.slides,i=0;i<t.length;i+=1){var n=e.slides.eq(i),r=n[0].swiperSlideOffset,o=-r;e.params.virtualTranslate||(o-=e.translate);var s=0;e.isHorizontal()||(s=o,o=0);var a=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(n[0].progress),0):1+Math.min(Math.max(n[0].progress,-1),0);n.css({opacity:a}).transform("translate3d("+o+"px, "+s+"px, 0px)")}},setTransition:function(e){var t=this,i=t.slides,n=t.$wrapperEl;if(i.transition(e),t.params.virtualTranslate&&0!==e){var r=!1;i.transitionEnd(function(){if(!r&&t&&!t.destroyed){r=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)n.trigger(e[i])}})}}},It={name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){var e=this;Y.extend(e,{fadeEffect:{setTranslate:Lt.setTranslate.bind(e),setTransition:Lt.setTransition.bind(e)}})},on:{beforeInit:function(){var e=this;if("fade"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};Y.extend(e.params,t),Y.extend(e.originalParams,t)}},setTranslate:function(){var e=this;"fade"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e){var t=this;"fade"===t.params.effect&&t.fadeEffect.setTransition(e)}}},zt={setTranslate:function(){var t,i=this,n=i.$el,r=i.$wrapperEl,o=i.slides,s=i.width,a=i.height,l=i.rtl,c=i.size,u=i.params.cubeEffect,d=i.isHorizontal(),p=i.virtual&&i.params.virtual.enabled,h=0;u.shadow&&(d?(t=r.find(".swiper-cube-shadow"),0===t.length&&(t=e('<div class="swiper-cube-shadow"></div>'),r.append(t)),t.css({height:s+"px"})):(t=n.find(".swiper-cube-shadow"),0===t.length&&(t=e('<div class="swiper-cube-shadow"></div>'),n.append(t))));for(var f=0;f<o.length;f+=1){var v=o.eq(f),g=f;p&&(g=parseInt(v.attr("data-swiper-slide-index"),10));var m=90*g,y=Math.floor(m/360);l&&(m=-m,y=Math.floor(-m/360));var b=Math.max(Math.min(v[0].progress,1),-1),w=0,T=0,C=0;g%4===0?(w=4*-y*c,C=0):(g-1)%4===0?(w=0,C=4*-y*c):(g-2)%4===0?(w=c+4*y*c,C=c):(g-3)%4===0&&(w=-c,C=3*c+4*c*y),l&&(w=-w),d||(T=w,w=0);var x="rotateX("+(d?0:-m)+"deg) rotateY("+(d?m:0)+"deg) translate3d("+w+"px, "+T+"px, "+C+"px)";if(b<=1&&b>-1&&(h=90*g+90*b,l&&(h=90*-g-90*b)),v.transform(x),u.slideShadows){var k=d?v.find(".swiper-slide-shadow-left"):v.find(".swiper-slide-shadow-top"),S=d?v.find(".swiper-slide-shadow-right"):v.find(".swiper-slide-shadow-bottom");0===k.length&&(k=e('<div class="swiper-slide-shadow-'+(d?"left":"top")+'"></div>'),v.append(k)),0===S.length&&(S=e('<div class="swiper-slide-shadow-'+(d?"right":"bottom")+'"></div>'),v.append(S)),k.length&&(k[0].style.opacity=Math.max(-b,0)),S.length&&(S[0].style.opacity=Math.max(b,0))}}if(r.css({"-webkit-transform-origin":"50% 50% -"+c/2+"px","-moz-transform-origin":"50% 50% -"+c/2+"px","-ms-transform-origin":"50% 50% -"+c/2+"px","transform-origin":"50% 50% -"+c/2+"px"}),u.shadow)if(d)t.transform("translate3d(0px, "+(s/2+u.shadowOffset)+"px, "+-s/2+"px) rotateX(90deg) rotateZ(0deg) scale("+u.shadowScale+")");else{var _=Math.abs(h)-90*Math.floor(Math.abs(h)/90),E=1.5-(Math.sin(2*_*Math.PI/360)/2+Math.cos(2*_*Math.PI/360)/2),A=u.shadowScale,P=u.shadowScale/E,M=u.shadowOffset;t.transform("scale3d("+A+", 1, "+P+") translate3d(0px, "+(a/2+M)+"px, "+-a/2/P+"px) rotateX(-90deg)")}var j=me.isSafari||me.isUiWebView?-c/2:0;r.transform("translate3d(0px,0,"+j+"px) rotateX("+(i.isHorizontal()?0:h)+"deg) rotateY("+(i.isHorizontal()?-h:0)+"deg)")},setTransition:function(e){var t=this,i=t.$el,n=t.slides;n.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.cubeEffect.shadow&&!t.isHorizontal()&&i.find(".swiper-cube-shadow").transition(e)}},Ht={name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){var e=this;Y.extend(e,{cubeEffect:{setTranslate:zt.setTranslate.bind(e),setTransition:zt.setTransition.bind(e)}})},on:{beforeInit:function(){var e=this;if("cube"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"cube"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};Y.extend(e.params,t),Y.extend(e.originalParams,t)}},setTranslate:function(){var e=this;"cube"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e){var t=this;"cube"===t.params.effect&&t.cubeEffect.setTransition(e)}}},Ft={setTranslate:function(){for(var t=this,i=t.slides,n=0;n<i.length;n+=1){var r=i.eq(n),o=r[0].progress;t.params.flipEffect.limitRotation&&(o=Math.max(Math.min(r[0].progress,1),-1));var s=r[0].swiperSlideOffset,a=-180*o,l=a,c=0,u=-s,d=0;if(t.isHorizontal()?t.rtl&&(l=-l):(d=u,u=0,c=-l,l=0),r[0].style.zIndex=-Math.abs(Math.round(o))+i.length,t.params.flipEffect.slideShadows){var p=t.isHorizontal()?r.find(".swiper-slide-shadow-left"):r.find(".swiper-slide-shadow-top"),h=t.isHorizontal()?r.find(".swiper-slide-shadow-right"):r.find(".swiper-slide-shadow-bottom");0===p.length&&(p=e('<div class="swiper-slide-shadow-'+(t.isHorizontal()?"left":"top")+'"></div>'),r.append(p)),0===h.length&&(h=e('<div class="swiper-slide-shadow-'+(t.isHorizontal()?"right":"bottom")+'"></div>'),r.append(h)),p.length&&(p[0].style.opacity=Math.max(-o,0)),h.length&&(h[0].style.opacity=Math.max(o,0))}r.transform("translate3d("+u+"px, "+d+"px, 0px) rotateX("+c+"deg) rotateY("+l+"deg)")}},setTransition:function(e){var t=this,i=t.slides,n=t.activeIndex,r=t.$wrapperEl;if(i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){var o=!1;i.eq(n).transitionEnd(function(){if(!o&&t&&!t.destroyed){o=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)r.trigger(e[i])}})}}},Rt={name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){var e=this;Y.extend(e,{flipEffect:{setTranslate:Ft.setTranslate.bind(e),setTransition:Ft.setTransition.bind(e)}})},on:{beforeInit:function(){var e=this;if("flip"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"flip"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};Y.extend(e.params,t),Y.extend(e.originalParams,t)}},setTranslate:function(){var e=this;"flip"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e){var t=this;"flip"===t.params.effect&&t.flipEffect.setTransition(e)}}},Bt={setTranslate:function(){for(var t=this,i=t.width,n=t.height,r=t.slides,o=t.$wrapperEl,s=t.slidesSizesGrid,a=t.params.coverflowEffect,l=t.isHorizontal(),c=t.translate,u=l?-c+i/2:-c+n/2,d=l?a.rotate:-a.rotate,p=a.depth,h=0,f=r.length;h<f;h+=1){var v=r.eq(h),g=s[h],m=v[0].swiperSlideOffset,y=(u-m-g/2)/g*a.modifier,b=l?d*y:0,w=l?0:d*y,T=-p*Math.abs(y),C=l?0:a.stretch*y,x=l?a.stretch*y:0;Math.abs(x)<.001&&(x=0),Math.abs(C)<.001&&(C=0),Math.abs(T)<.001&&(T=0),Math.abs(b)<.001&&(b=0),Math.abs(w)<.001&&(w=0);var k="translate3d("+x+"px,"+C+"px,"+T+"px)  rotateX("+w+"deg) rotateY("+b+"deg)";if(v.transform(k),v[0].style.zIndex=-Math.abs(Math.round(y))+1,a.slideShadows){var S=l?v.find(".swiper-slide-shadow-left"):v.find(".swiper-slide-shadow-top"),_=l?v.find(".swiper-slide-shadow-right"):v.find(".swiper-slide-shadow-bottom");0===S.length&&(S=e('<div class="swiper-slide-shadow-'+(l?"left":"top")+'"></div>'),v.append(S)),0===_.length&&(_=e('<div class="swiper-slide-shadow-'+(l?"right":"bottom")+'"></div>'),v.append(_)),S.length&&(S[0].style.opacity=y>0?y:0),_.length&&(_[0].style.opacity=-y>0?-y:0)}}if(me.ie){var E=o[0].style;E.perspectiveOrigin=u+"px 50%"}},setTransition:function(e){var t=this;t.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},qt={name:"effect-coverflow",params:{coverflowEffect:{rotate:1,stretch:0,depth:500,modifier:1,slideShadows:!1}},create:function(){var e=this;Y.extend(e,{coverflowEffect:{setTranslate:Bt.setTranslate.bind(e),setTransition:Bt.setTransition.bind(e)}})},on:{beforeInit:function(){var e=this;"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(){var e=this;"coverflow"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e){var t=this;"coverflow"===t.params.effect&&t.coverflowEffect.setTransition(e)}}};return tt.use([it,nt,rt,ot,at,ct,dt,ht,vt,mt,bt,Tt,xt,St,Et,Pt,jt,Nt,$t,It,Ht,Rt,qt]),tt}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.videojs=t()}(this,function(){"use strict";function e(e,t){return t={exports:{}},e(t,t.exports),t.exports}function t(e,t){Ft(e).forEach(function(i){return t(e[i],i)})}function i(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Ft(e).reduce(function(i,n){return t(i,e[n],n)},i)}function n(e){for(var i=arguments.length,n=Array(i>1?i-1:0),r=1;r<i;r++)n[r-1]=arguments[r];return Object.assign?Object.assign.apply(Object,[e].concat(n)):(n.forEach(function(i){i&&t(i,function(t,i){e[i]=t})}),e)}function r(e){return!!e&&"object"===("undefined"==typeof e?"undefined":Dt(e))}function o(e){return r(e)&&"[object Object]"===Ht.call(e)&&e.constructor===Object}function s(e){return e.replace(/\n\r?\s*/g,"")}function a(e,t){if(!e||!t)return"";if("function"==typeof ot.getComputedStyle){var i=ot.getComputedStyle(e);return i?i[t]:""}return e.currentStyle[t]||""}function l(e){return"string"==typeof e&&/\S/.test(e)}function c(e){if(/\s/.test(e))throw new Error("class has illegal whitespace characters")}function u(e){return new RegExp("(^|\\s)"+e+"($|\\s)")}function d(){return ut===ot.document&&"undefined"!=typeof ut.createElement}function p(e){return r(e)&&1===e.nodeType}function h(e){return function(t,i){if(!l(t))return ut[e](null);l(i)&&(i=ut.querySelector(i));var n=p(i)?i:ut;return n[e]&&n[e](t)}}function f(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=arguments[3],r=ut.createElement(e);return Object.getOwnPropertyNames(t).forEach(function(e){var i=t[e];e.indexOf("aria-")!==-1||"role"===e||"type"===e?(Vt.warn(Xt(Yt,e,i)),r.setAttribute(e,i)):"textContent"===e?v(r,i):r[e]=i}),Object.getOwnPropertyNames(i).forEach(function(e){r.setAttribute(e,i[e])}),n&&D(r,n),r}function v(e,t){return"undefined"==typeof e.textContent?e.innerText=t:e.textContent=t,e}function g(e,t){t.firstChild?t.insertBefore(e,t.firstChild):t.appendChild(e)}function m(e,t){return c(t),e.classList?e.classList.contains(t):u(t).test(e.className)}function y(e,t){return e.classList?e.classList.add(t):m(e,t)||(e.className=(e.className+" "+t).trim()),e}function b(e,t){return e.classList?e.classList.remove(t):(c(t),e.className=e.className.split(/\s+/).filter(function(e){return e!==t}).join(" ")),e}function w(e,t,i){var n=m(e,t);if("function"==typeof i&&(i=i(e,t)),"boolean"!=typeof i&&(i=!n),i!==n)return i?y(e,t):b(e,t),e}function T(e,t){Object.getOwnPropertyNames(t).forEach(function(i){var n=t[i];null===n||"undefined"==typeof n||n===!1?e.removeAttribute(i):e.setAttribute(i,n===!0?"":n)})}function C(e){var t={},i=",autoplay,controls,loop,muted,default,";if(e&&e.attributes&&e.attributes.length>0)for(var n=e.attributes,r=n.length-1;r>=0;r--){var o=n[r].name,s=n[r].value;"boolean"!=typeof e[o]&&i.indexOf(","+o+",")===-1||(s=null!==s),t[o]=s}return t}function x(e,t){return e.getAttribute(t)}function k(e,t,i){e.setAttribute(t,i)}function S(e,t){e.removeAttribute(t)}function _(){ut.body.focus(),ut.onselectstart=function(){return!1}}function E(){ut.onselectstart=function(){return!0}}function A(e){if(e&&e.getBoundingClientRect&&e.parentNode){var t=e.getBoundingClientRect(),i={};return["bottom","height","left","right","top","width"].forEach(function(e){void 0!==t[e]&&(i[e]=t[e])}),i.height||(i.height=parseFloat(a(e,"height"))),i.width||(i.width=parseFloat(a(e,"width"))),i}}function P(e){var t=void 0;if(e.getBoundingClientRect&&e.parentNode&&(t=e.getBoundingClientRect()),!t)return{left:0,top:0};var i=ut.documentElement,n=ut.body,r=i.clientLeft||n.clientLeft||0,o=ot.pageXOffset||n.scrollLeft,s=t.left+o-r,a=i.clientTop||n.clientTop||0,l=ot.pageYOffset||n.scrollTop,c=t.top+l-a;return{left:Math.round(s),top:Math.round(c)}}function M(e,t){var i={},n=P(e),r=e.offsetWidth,o=e.offsetHeight,s=n.top,a=n.left,l=t.pageY,c=t.pageX;return t.changedTouches&&(c=t.changedTouches[0].pageX,l=t.changedTouches[0].pageY),i.y=Math.max(0,Math.min(1,(s-l+o)/o)),i.x=Math.max(0,Math.min(1,(c-a)/r)),i}function j(e){return r(e)&&3===e.nodeType}function O(e){for(;e.firstChild;)e.removeChild(e.firstChild);return e}function N(e){return"function"==typeof e&&(e=e()),(Array.isArray(e)?e:[e]).map(function(e){return"function"==typeof e&&(e=e()),p(e)||j(e)?e:"string"==typeof e&&/\S/.test(e)?ut.createTextNode(e):void 0}).filter(function(e){return e})}function D(e,t){return N(t).forEach(function(t){return e.appendChild(t)}),e}function $(e,t){return D(O(e),t)}function L(){return Qt++}function I(e){var t=e[Zt];return t||(t=e[Zt]=L()),Jt[t]||(Jt[t]={}),Jt[t]}function z(e){var t=e[Zt];return!!t&&!!Object.getOwnPropertyNames(Jt[t]).length}function H(e){var t=e[Zt];if(t){delete Jt[t];try{delete e[Zt]}catch(i){e.removeAttribute?e.removeAttribute(Zt):e[Zt]=null}}}function F(e,t){var i=I(e);0===i.handlers[t].length&&(delete i.handlers[t],e.removeEventListener?e.removeEventListener(t,i.dispatcher,!1):e.detachEvent&&e.detachEvent("on"+t,i.dispatcher)),Object.getOwnPropertyNames(i.handlers).length<=0&&(delete i.handlers,delete i.dispatcher,delete i.disabled),0===Object.getOwnPropertyNames(i).length&&H(e)}function R(e,t,i,n){i.forEach(function(i){e(t,i,n)})}function B(e){function t(){return!0}function i(){return!1}if(!e||!e.isPropagationStopped){var n=e||ot.event;e={};for(var r in n)"layerX"!==r&&"layerY"!==r&&"keyLocation"!==r&&"webkitMovementX"!==r&&"webkitMovementY"!==r&&("returnValue"===r&&n.preventDefault||(e[r]=n[r]));if(e.target||(e.target=e.srcElement||ut),e.relatedTarget||(e.relatedTarget=e.fromElement===e.target?e.toElement:e.fromElement),e.preventDefault=function(){n.preventDefault&&n.preventDefault(),e.returnValue=!1,n.returnValue=!1,e.defaultPrevented=!0},e.defaultPrevented=!1,e.stopPropagation=function(){n.stopPropagation&&n.stopPropagation(),e.cancelBubble=!0,n.cancelBubble=!0,e.isPropagationStopped=t},e.isPropagationStopped=i,e.stopImmediatePropagation=function(){n.stopImmediatePropagation&&n.stopImmediatePropagation(),e.isImmediatePropagationStopped=t,e.stopPropagation()},e.isImmediatePropagationStopped=i,null!==e.clientX&&void 0!==e.clientX){var o=ut.documentElement,s=ut.body;e.pageX=e.clientX+(o&&o.scrollLeft||s&&s.scrollLeft||0)-(o&&o.clientLeft||s&&s.clientLeft||0),e.pageY=e.clientY+(o&&o.scrollTop||s&&s.scrollTop||0)-(o&&o.clientTop||s&&s.clientTop||0)}e.which=e.charCode||e.keyCode,null!==e.button&&void 0!==e.button&&(e.button=1&e.button?0:4&e.button?1:2&e.button?2:0)}return e}function q(e,t,i){if(Array.isArray(t))return R(q,e,t,i);var n=I(e);if(n.handlers||(n.handlers={}),n.handlers[t]||(n.handlers[t]=[]),i.guid||(i.guid=L()),n.handlers[t].push(i),n.dispatcher||(n.disabled=!1,n.dispatcher=function(t,i){if(!n.disabled){t=B(t);var r=n.handlers[t.type];if(r)for(var o=r.slice(0),s=0,a=o.length;s<a&&!t.isImmediatePropagationStopped();s++)try{o[s].call(e,t,i)}catch(l){Vt.error(l)}}}),1===n.handlers[t].length)if(e.addEventListener){var r=!1;ei&&ti.indexOf(t)>-1&&(r={passive:!0}),e.addEventListener(t,n.dispatcher,r)}else e.attachEvent&&e.attachEvent("on"+t,n.dispatcher)}function W(e,t,i){if(z(e)){var n=I(e);if(n.handlers){if(Array.isArray(t))return R(W,e,t,i);var r=function(t){n.handlers[t]=[],F(e,t)};if(t){var o=n.handlers[t];if(o){if(!i)return void r(t);if(i.guid)for(var s=0;s<o.length;s++)o[s].guid===i.guid&&o.splice(s--,1);F(e,t)}}else for(var a in n.handlers)r(a)}}}function V(e,t,i){var n=z(e)?I(e):{},r=e.parentNode||e.ownerDocument;if("string"==typeof t&&(t={type:t,target:e}),t=B(t),n.dispatcher&&n.dispatcher.call(e,t,i),r&&!t.isPropagationStopped()&&t.bubbles===!0)V.call(null,r,t,i);else if(!r&&!t.defaultPrevented){var o=I(t.target);t.target[t.type]&&(o.disabled=!0,"function"==typeof t.target[t.type]&&t.target[t.type](),o.disabled=!1)}return!t.defaultPrevented}function X(e,t,i){if(Array.isArray(t))return R(X,e,t,i);var n=function r(){W(e,t,r),i.apply(this,arguments)};n.guid=i.guid=i.guid||L(),q(e,t,n)}function Y(e,t){t&&(ri=t),ot.setTimeout(oi,e)}function G(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=t.eventBusKey;if(i){if(!e[i].nodeName)throw new Error('The eventBusKey "'+i+'" does not refer to an element.');e.eventBusEl_=e[i]}else e.eventBusEl_=f("span",{className:"vjs-event-bus"});return n(e,yi),e.on("dispose",function(){return e.off()}),e}function U(e,t){return n(e,bi),e.state=n({},e.state,t),"function"==typeof e.handleStateChanged&&di(e)&&e.on("statechanged",e.handleStateChanged),e}function K(e){return"string"!=typeof e?e:e.charAt(0).toUpperCase()+e.slice(1)}function Q(e,t){return K(e)===K(t)}function J(){for(var e={},i=arguments.length,n=Array(i),r=0;r<i;r++)n[r]=arguments[r];return n.forEach(function(i){i&&t(i,function(t,i){return o(t)?(o(e[i])||(e[i]={}),void(e[i]=J(e[i],t))):void(e[i]=t)})}),e}function Z(e,t,i){if("number"!=typeof t||t<0||t>i)throw new Error("Failed to execute '"+e+"' on 'TimeRanges': The index provided ("+t+") is non-numeric or out of bounds (0-"+i+").")}function ee(e,t,i,n){return Z(e,n,i.length-1),i[n][t]}function te(e){return void 0===e||0===e.length?{length:0,start:function(){throw new Error("This TimeRanges object is empty")},end:function(){throw new Error("This TimeRanges object is empty")}}:{length:e.length,start:ee.bind(null,"start",0,e),end:ee.bind(null,"end",1,e)}}function ie(e,t){return Array.isArray(e)?te(e):void 0===e||void 0===t?te():te([[e,t]])}function ne(e,t){var i=0,n=void 0,r=void 0;if(!t)return 0;e&&e.length||(e=ie(0,0));for(var o=0;o<e.length;o++)n=e.start(o),r=e.end(o),r>t&&(r=t),i+=r-n;return i/t}function re(e){return e instanceof re?e:("number"==typeof e?this.code=e:"string"==typeof e?this.message=e:r(e)&&("number"==typeof e.code&&(this.code=e.code),n(this,e)),void(this.message||(this.message=re.defaultMessages[this.code]||"")))}function oe(e,t){var i,n=null;try{i=JSON.parse(e,t)}catch(r){n=r}return[n,i]}function se(e){var t=nn.call(e);return"[object Function]"===t||"function"==typeof e&&"[object RegExp]"!==t||"undefined"!=typeof window&&(e===window.setTimeout||e===window.alert||e===window.confirm||e===window.prompt)}function ae(e,t,i){if(!tn(t))throw new TypeError("iterator must be a function");arguments.length<3&&(i=this),"[object Array]"===sn.call(e)?le(e,t,i):"string"==typeof e?ce(e,t,i):ue(e,t,i)}function le(e,t,i){for(var n=0,r=e.length;n<r;n++)an.call(e,n)&&t.call(i,e[n],n,e)}function ce(e,t,i){for(var n=0,r=e.length;n<r;n++)t.call(i,e.charAt(n),n,e)}function ue(e,t,i){for(var n in e)an.call(e,n)&&t.call(i,e[n],n,e)}function de(){for(var e={},t=0;t<arguments.length;t++){var i=arguments[t];for(var n in i)dn.call(i,n)&&(e[n]=i[n])}return e}function pe(e,t){for(var i=0;i<e.length;i++)t(e[i])}function he(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function fe(e,t,i){var n=e;return tn(t)?(i=t,"string"==typeof e&&(n={uri:e})):n=un(t,{uri:e}),n.callback=i,n}function ve(e,t,i){return t=fe(e,t,i),ge(t)}function ge(e){function t(){4===a.readyState&&setTimeout(r,0)}function i(){var e=void 0;if(e=a.response?a.response:a.responseText||me(a),g)try{e=JSON.parse(e)}catch(t){}return e}function n(e){return clearTimeout(u),e instanceof Error||(e=new Error(""+(e||"Unknown XMLHttpRequest Error"))),e.statusCode=0,s(e,m)}function r(){if(!c){var t;clearTimeout(u),t=e.useXDR&&void 0===a.status?200:1223===a.status?204:a.status;var n=m,r=null;return 0!==t?(n={body:i(),statusCode:t,method:p,headers:{},url:d,rawRequest:a},a.getAllResponseHeaders&&(n.headers=cn(a.getAllResponseHeaders()))):r=new Error("Internal XMLHttpRequest Error"),s(r,n,n.body)}}if("undefined"==typeof e.callback)throw new Error("callback argument missing");var o=!1,s=function(t,i,n){o||(o=!0,e.callback(t,i,n))},a=e.xhr||null;a||(a=e.cors||e.useXDR?new ve.XDomainRequest:new ve.XMLHttpRequest);var l,c,u,d=a.url=e.uri||e.url,p=a.method=e.method||"GET",h=e.body||e.data,f=a.headers=e.headers||{},v=!!e.sync,g=!1,m={body:void 0,headers:{},statusCode:0,method:p,url:d,rawRequest:a};if("json"in e&&e.json!==!1&&(g=!0,f.accept||f.Accept||(f.Accept="application/json"),"GET"!==p&&"HEAD"!==p&&(f["content-type"]||f["Content-Type"]||(f["Content-Type"]="application/json"),h=JSON.stringify(e.json===!0?h:e.json))),a.onreadystatechange=t,a.onload=r,a.onerror=n,a.onprogress=function(){},a.onabort=function(){c=!0},a.ontimeout=n,a.open(p,d,!v,e.username,e.password),v||(a.withCredentials=!!e.withCredentials),!v&&e.timeout>0&&(u=setTimeout(function(){if(!c){c=!0,a.abort("timeout");var e=new Error("XMLHttpRequest timeout");e.code="ETIMEDOUT",n(e)}},e.timeout)),a.setRequestHeader)for(l in f)f.hasOwnProperty(l)&&a.setRequestHeader(l,f[l]);else if(e.headers&&!he(e.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in e&&(a.responseType=e.responseType),"beforeSend"in e&&"function"==typeof e.beforeSend&&e.beforeSend(a),a.send(h||null),a}function me(e){if("document"===e.responseType)return e.responseXML;var t=e.responseXML&&"parsererror"===e.responseXML.documentElement.nodeName;return""!==e.responseType||t?null:e.responseXML}function ye(){}function be(e,t){this.name="ParsingError",this.code=e.code,this.message=t||e.message}function we(e){function t(e,t,i,n){return 3600*(0|e)+60*(0|t)+(0|i)+(0|n)/1e3}var i=e.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);return i?i[3]?t(i[1],i[2],i[3].replace(":",""),i[4]):i[1]>59?t(i[1],i[2],0,i[4]):t(0,i[1],i[2],i[4]):null}function Te(){this.values=_n(null)}function Ce(e,t,i,n){var r=n?e.split(n):[e];for(var o in r)if("string"==typeof r[o]){var s=r[o].split(i);if(2===s.length){var a=s[0],l=s[1];t(a,l)}}}function xe(e,t,i){function n(){var t=we(e);if(null===t)throw new be(be.Errors.BadTimeStamp,"Malformed timestamp: "+s);return e=e.replace(/^[^\sa-zA-Z-]+/,""),t}function r(e,t){var n=new Te;Ce(e,function(e,t){switch(e){case"region":for(var r=i.length-1;r>=0;r--)if(i[r].id===t){n.set(e,i[r].region);break}break;case"vertical":n.alt(e,t,["rl","lr"]);break;case"line":var o=t.split(","),s=o[0];n.integer(e,s),n.percent(e,s)?n.set("snapToLines",!1):null,n.alt(e,s,["auto"]),2===o.length&&n.alt("lineAlign",o[1],["start","middle","end"]);break;case"position":o=t.split(","),n.percent(e,o[0]),2===o.length&&n.alt("positionAlign",o[1],["start","middle","end"]);break;case"size":n.percent(e,t);break;case"align":n.alt(e,t,["start","middle","end","left","right"])}},/:/,/\s/),t.region=n.get("region",null),t.vertical=n.get("vertical",""),t.line=n.get("line","auto"),t.lineAlign=n.get("lineAlign","start"),t.snapToLines=n.get("snapToLines",!0),t.size=n.get("size",100),t.align=n.get("align","middle"),t.position=n.get("position",{start:0,left:0,middle:50,end:100,right:100},t.align),t.positionAlign=n.get("positionAlign",{start:"start",left:"start",middle:"middle",end:"end",right:"end"},t.align)}function o(){e=e.replace(/^\s+/,"")}var s=e;if(o(),t.startTime=n(),o(),"-->"!==e.substr(0,3))throw new be(be.Errors.BadTimeStamp,"Malformed time stamp (time stamps must be separated by '-->'): "+s);e=e.substr(3),o(),t.endTime=n(),o(),r(e,t)}function ke(e,t){function i(){function e(e){return t=t.substr(e.length),e}if(!t)return null;var i=t.match(/^([^<]*)(<[^>]+>?)?/);return e(i[1]?i[1]:i[2])}function n(e){return En[e]}function r(e){for(;h=e.match(/&(amp|lt|gt|lrm|rlm|nbsp);/);)e=e.replace(h[0],n);return e}function o(e,t){return!Mn[t.localName]||Mn[t.localName]===e.localName}function s(t,i){var n=An[t];if(!n)return null;var r=e.document.createElement(n);r.localName=n;var o=Pn[t];return o&&i&&(r[o]=i.trim()),r}for(var a,l=e.document.createElement("div"),c=l,u=[];null!==(a=i());)if("<"!==a[0])c.appendChild(e.document.createTextNode(r(a)));else{if("/"===a[1]){u.length&&u[u.length-1]===a.substr(2).replace(">","")&&(u.pop(),c=c.parentNode);continue}var d,p=we(a.substr(1,a.length-2));if(p){d=e.document.createProcessingInstruction("timestamp",p),c.appendChild(d);continue}var h=a.match(/^<([^.\s\/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);if(!h)continue;if(d=s(h[1],h[3]),!d)continue;if(!o(c,d))continue;h[2]&&(d.className=h[2].substr(1).replace("."," ")),u.push(h[1]),c.appendChild(d),c=d}return l}function Se(e){for(var t=0;t<jn.length;t++){var i=jn[t];if(e>=i[0]&&e<=i[1])return!0}return!1}function _e(e){function t(e,t){for(var i=t.childNodes.length-1;i>=0;i--)e.push(t.childNodes[i])}function i(e){if(!e||!e.length)return null;var n=e.pop(),r=n.textContent||n.innerText;if(r){var o=r.match(/^.*(\n|\r)/);return o?(e.length=0,o[0]):r}return"ruby"===n.tagName?i(e):n.childNodes?(t(e,n),i(e)):void 0}var n,r=[],o="";if(!e||!e.childNodes)return"ltr";for(t(r,e);o=i(r);)for(var s=0;s<o.length;s++)if(n=o.charCodeAt(s),Se(n))return"rtl";return"ltr"}function Ee(e){if("number"==typeof e.line&&(e.snapToLines||e.line>=0&&e.line<=100))return e.line;if(!e.track||!e.track.textTrackList||!e.track.textTrackList.mediaElement)return-1;for(var t=e.track,i=t.textTrackList,n=0,r=0;r<i.length&&i[r]!==t;r++)"showing"===i[r].mode&&n++;return++n*-1}function Ae(){}function Pe(e,t,i){var n=/MSIE\s8\.0/.test(navigator.userAgent),r="rgba(255, 255, 255, 1)",o="rgba(0, 0, 0, 0.8)";n&&(r="rgb(255, 255, 255)",o="rgb(0, 0, 0)"),Ae.call(this),this.cue=t,this.cueDiv=ke(e,t.text);var s={color:r,backgroundColor:o,position:"relative",left:0,right:0,top:0,bottom:0,display:"inline"};n||(s.writingMode=""===t.vertical?"horizontal-tb":"lr"===t.vertical?"vertical-lr":"vertical-rl",s.unicodeBidi="plaintext"),this.applyStyles(s,this.cueDiv),this.div=e.document.createElement("div"),s={textAlign:"middle"===t.align?"center":t.align,font:i.font,whiteSpace:"pre-line",position:"absolute"},n||(s.direction=_e(this.cueDiv),s.writingMode=""===t.vertical?"horizontal-tb":"lr"===t.vertical?"vertical-lr":"vertical-rl".stylesunicodeBidi="plaintext"),this.applyStyles(s),this.div.appendChild(this.cueDiv);var a=0;switch(t.positionAlign){case"start":a=t.position;break;case"middle":a=t.position-t.size/2;break;case"end":a=t.position-t.size}""===t.vertical?this.applyStyles({left:this.formatStyle(a,"%"),width:this.formatStyle(t.size,"%")}):this.applyStyles({top:this.formatStyle(a,"%"),height:this.formatStyle(t.size,"%")}),this.move=function(e){this.applyStyles({top:this.formatStyle(e.top,"px"),bottom:this.formatStyle(e.bottom,"px"),left:this.formatStyle(e.left,"px"),right:this.formatStyle(e.right,"px"),height:this.formatStyle(e.height,"px"),width:this.formatStyle(e.width,"px")})}}function Me(e){var t,i,n,r,o=/MSIE\s8\.0/.test(navigator.userAgent);if(e.div){i=e.div.offsetHeight,n=e.div.offsetWidth,r=e.div.offsetTop;var s=(s=e.div.childNodes)&&(s=s[0])&&s.getClientRects&&s.getClientRects();e=e.div.getBoundingClientRect(),t=s?Math.max(s[0]&&s[0].height||0,e.height/s.length):0}this.left=e.left,this.right=e.right,this.top=e.top||r,this.height=e.height||i,this.bottom=e.bottom||r+(e.height||i),this.width=e.width||n,this.lineHeight=void 0!==t?t:e.lineHeight,o&&!this.lineHeight&&(this.lineHeight=13)}function je(e,t,i,n){function r(e,t){for(var r,o=new Me(e),s=1,a=0;a<t.length;a++){for(;e.overlapsOppositeAxis(i,t[a])||e.within(i)&&e.overlapsAny(n);)e.move(t[a]);if(e.within(i))return e;var l=e.intersectPercentage(i);s>l&&(r=new Me(e),s=l),e=new Me(o)}return r||o}var o=new Me(t),s=t.cue,a=Ee(s),l=[];if(s.snapToLines){var c;switch(s.vertical){case"":l=["+y","-y"],c="height";break;case"rl":l=["+x","-x"],c="width";break;case"lr":l=["-x","+x"],c="width"}var u=o.lineHeight,d=u*Math.round(a),p=i[c]+u,h=l[0];Math.abs(d)>p&&(d=d<0?-1:1,d*=Math.ceil(p/u)*u),a<0&&(d+=""===s.vertical?i.height:i.width,l=l.reverse()),o.move(h,d)}else{var f=o.lineHeight/i.height*100;switch(s.lineAlign){case"middle":a-=f/2;break;case"end":a-=f}switch(s.vertical){case"":t.applyStyles({top:t.formatStyle(a,"%")});break;case"rl":t.applyStyles({left:t.formatStyle(a,"%")});break;case"lr":t.applyStyles({right:t.formatStyle(a,"%")})}l=["+y","-x","+x","-y"],o=new Me(t)}var v=r(o,l);t.move(v.toCSSCompatValues(i))}function Oe(){}function Ne(e){if("string"!=typeof e)return!1;var t=In[e.toLowerCase()];return!!t&&e.toLowerCase()}function De(e){if("string"!=typeof e)return!1;var t=zn[e.toLowerCase()];return!!t&&e.toLowerCase()}function $e(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)e[n]=i[n]}return e}function Le(e,t,i){var n=this,r=/MSIE\s8\.0/.test(navigator.userAgent),o={};r?n=document.createElement("custom"):o.enumerable=!0,n.hasBeenReset=!1;var s="",a=!1,l=e,c=t,u=i,d=null,p="",h=!0,f="auto",v="start",g=50,m="middle",y=50,b="middle";if(Object.defineProperty(n,"id",$e({},o,{get:function(){return s},set:function(e){s=""+e}})),Object.defineProperty(n,"pauseOnExit",$e({},o,{get:function(){return a},set:function(e){a=!!e}})),Object.defineProperty(n,"startTime",$e({},o,{get:function(){return l},set:function(e){if("number"!=typeof e)throw new TypeError("Start time must be set to a number.");l=e,this.hasBeenReset=!0}})),Object.defineProperty(n,"endTime",$e({},o,{get:function(){return c},set:function(e){if("number"!=typeof e)throw new TypeError("End time must be set to a number.");
c=e,this.hasBeenReset=!0}})),Object.defineProperty(n,"text",$e({},o,{get:function(){return u},set:function(e){u=""+e,this.hasBeenReset=!0}})),Object.defineProperty(n,"region",$e({},o,{get:function(){return d},set:function(e){d=e,this.hasBeenReset=!0}})),Object.defineProperty(n,"vertical",$e({},o,{get:function(){return p},set:function(e){var t=Ne(e);if(t===!1)throw new SyntaxError("An invalid or illegal string was specified.");p=t,this.hasBeenReset=!0}})),Object.defineProperty(n,"snapToLines",$e({},o,{get:function(){return h},set:function(e){h=!!e,this.hasBeenReset=!0}})),Object.defineProperty(n,"line",$e({},o,{get:function(){return f},set:function(e){if("number"!=typeof e&&e!==Ln)throw new SyntaxError("An invalid number or illegal string was specified.");f=e,this.hasBeenReset=!0}})),Object.defineProperty(n,"lineAlign",$e({},o,{get:function(){return v},set:function(e){var t=De(e);if(!t)throw new SyntaxError("An invalid or illegal string was specified.");v=t,this.hasBeenReset=!0}})),Object.defineProperty(n,"position",$e({},o,{get:function(){return g},set:function(e){if(e<0||e>100)throw new Error("Position must be between 0 and 100.");g=e,this.hasBeenReset=!0}})),Object.defineProperty(n,"positionAlign",$e({},o,{get:function(){return m},set:function(e){var t=De(e);if(!t)throw new SyntaxError("An invalid or illegal string was specified.");m=t,this.hasBeenReset=!0}})),Object.defineProperty(n,"size",$e({},o,{get:function(){return y},set:function(e){if(e<0||e>100)throw new Error("Size must be between 0 and 100.");y=e,this.hasBeenReset=!0}})),Object.defineProperty(n,"align",$e({},o,{get:function(){return b},set:function(e){var t=De(e);if(!t)throw new SyntaxError("An invalid or illegal string was specified.");b=t,this.hasBeenReset=!0}})),n.displayState=void 0,r)return n}function Ie(e){if("string"!=typeof e)return!1;var t=Fn[e.toLowerCase()];return!!t&&e.toLowerCase()}function ze(e){return"number"==typeof e&&e>=0&&e<=100}function He(){var e=100,t=3,i=0,n=100,r=0,o=100,s="";Object.defineProperties(this,{width:{enumerable:!0,get:function(){return e},set:function(t){if(!ze(t))throw new Error("Width must be between 0 and 100.");e=t}},lines:{enumerable:!0,get:function(){return t},set:function(e){if("number"!=typeof e)throw new TypeError("Lines must be set to a number.");t=e}},regionAnchorY:{enumerable:!0,get:function(){return n},set:function(e){if(!ze(e))throw new Error("RegionAnchorX must be between 0 and 100.");n=e}},regionAnchorX:{enumerable:!0,get:function(){return i},set:function(e){if(!ze(e))throw new Error("RegionAnchorY must be between 0 and 100.");i=e}},viewportAnchorY:{enumerable:!0,get:function(){return o},set:function(e){if(!ze(e))throw new Error("ViewportAnchorY must be between 0 and 100.");o=e}},viewportAnchorX:{enumerable:!0,get:function(){return r},set:function(e){if(!ze(e))throw new Error("ViewportAnchorX must be between 0 and 100.");r=e}},scroll:{enumerable:!0,get:function(){return s},set:function(e){var t=Ie(e);if(t===!1)throw new SyntaxError("An invalid or illegal string was specified.");s=t}}})}function Fe(e,t,i,n){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},o=e.textTracks();r.kind=t,i&&(r.label=i),n&&(r.language=n),r.tech=e;var s=new Sn.text.TrackClass(r);return o.addTrack(s),s}function Re(e,t){Wn[e]=Wn[e]||[],Wn[e].push(t)}function Be(e,t,i){e.setTimeout(function(){return Ye(t,Wn[t.type],i,e)},1)}function qe(e,t){e.forEach(function(e){return e.setTech&&e.setTech(t)})}function We(e,t,i){return e.reduceRight(Xe(i),t[i]())}function Ve(e,t,i,n){return t[i](e.reduce(Xe(i),n))}function Xe(e){return function(t,i){return i[e]?i[e](t):t}}function Ye(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],i=arguments[2],r=arguments[3],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],s=arguments.length>5&&void 0!==arguments[5]&&arguments[5],a=t[0],l=t.slice(1);if("string"==typeof a)Ye(e,Wn[a],i,r,o,s);else if(a){var c=a(r);c.setSource(n({},e),function(t,n){return t?Ye(e,l,i,r,o,s):(o.push(c),void Ye(n,e.type===n.type?l:Wn[n.type],i,r,o,s))})}else l.length?Ye(e,l,i,r,o,s):s?i(e,o):Ye(e,Wn["*"],i,r,o,!0)}function Ge(e,t){return"rgba("+parseInt(e[1]+e[1],16)+","+parseInt(e[2]+e[2],16)+","+parseInt(e[3]+e[3],16)+","+t+")"}function Ue(e,t,i){try{e.style[t]=i}catch(n){return}}function Ke(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;e=e<0?0:e;var i=Math.floor(e%60),n=Math.floor(e/60%60),r=Math.floor(e/3600),o=Math.floor(t/60%60),s=Math.floor(t/3600);return(isNaN(e)||e===1/0)&&(r=n=i="-"),r=r>0||s>0?r+":":"",n=((r||o>=10)&&n<10?"0"+n:n)+":",i=i<10?"0"+i:i,r+n+i}function Qe(e,t){if(t&&(e=t(e)),e&&"none"!==e)return e}function Je(e,t){var i=e.options[e.options.selectedIndex].value;return Qe(i,t)}function Ze(e,t,i){if(t)for(var n=0;n<e.options.length;n++)if(Qe(e.options[n].value,i)===t){e.selectedIndex=n;break}}function et(e,t,i){var n=void 0;if("string"==typeof e){var o=et.getPlayers();if(0===e.indexOf("#")&&(e=e.slice(1)),o[e])return t&&Vt.warn('Player "'+e+'" is already initialised. Options will not be applied.'),i&&o[e].ready(i),o[e];n=Gt("#"+e)}else n=e;if(!n||!n.nodeName)throw new TypeError("The element or ID supplied is not valid. (videojs)");if(n.player||yo.players[n.playerId])return n.player||yo.players[n.playerId];t=t||{},et.hooks("beforesetup").forEach(function(e){var i=e(n,J(t));return!r(i)||Array.isArray(i)?void Vt.error("please return an object in beforesetup hooks"):void(t=J(t,i))});var s=wi.getComponent("Player"),a=new s(n,t,i);return et.hooks("setup").forEach(function(e){return e(a)}),a}var tt,it="6.2.1",nt="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};tt="undefined"!=typeof window?window:"undefined"!=typeof nt?nt:"undefined"!=typeof self?self:{};var rt,ot=tt,st={},at=(Object.freeze||Object)({"default":st}),lt=at&&st||at,ct="undefined"!=typeof nt?nt:"undefined"!=typeof window?window:{};"undefined"!=typeof document?rt=document:(rt=ct["__GLOBAL_DOCUMENT_CACHE@4"],rt||(rt=ct["__GLOBAL_DOCUMENT_CACHE@4"]=lt));var ut=rt,dt=ot.navigator&&ot.navigator.userAgent||"",pt=/AppleWebKit\/([\d.]+)/i.exec(dt),ht=pt?parseFloat(pt.pop()):null,ft=/iPad/i.test(dt),vt=/iPhone/i.test(dt)&&!ft,gt=/iPod/i.test(dt),mt=vt||ft||gt,yt=function(){var e=dt.match(/OS (\d+)_/i);return e&&e[1]?e[1]:null}(),bt=/Android/i.test(dt),wt=function(){var e=dt.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);if(!e)return null;var t=e[1]&&parseFloat(e[1]),i=e[2]&&parseFloat(e[2]);return t&&i?parseFloat(e[1]+"."+e[2]):t?t:null}(),Tt=bt&&/webkit/i.test(dt)&&wt<2.3,Ct=bt&&wt<5&&ht<537,xt=/Firefox/i.test(dt),kt=/Edge/i.test(dt),St=!kt&&/Chrome/i.test(dt),_t=function(){var e=dt.match(/Chrome\/(\d+)/);return e&&e[1]?parseFloat(e[1]):null}(),Et=/MSIE\s8\.0/.test(dt),At=function(){var e=/MSIE\s(\d+)\.\d/.exec(dt),t=e&&parseFloat(e[1]);return!t&&/Trident\/7.0/i.test(dt)&&/rv:11.0/.test(dt)&&(t=11),t}(),Pt=/Safari/i.test(dt)&&!St&&!bt&&!kt,Mt=Pt||mt,jt=d()&&("ontouchstart"in ot||ot.DocumentTouch&&ot.document instanceof ot.DocumentTouch),Ot=d()&&"backgroundSize"in ot.document.createElement("video").style,Nt=(Object.freeze||Object)({IS_IPAD:ft,IS_IPHONE:vt,IS_IPOD:gt,IS_IOS:mt,IOS_VERSION:yt,IS_ANDROID:bt,ANDROID_VERSION:wt,IS_OLD_ANDROID:Tt,IS_NATIVE_ANDROID:Ct,IS_FIREFOX:xt,IS_EDGE:kt,IS_CHROME:St,CHROME_VERSION:_t,IS_IE8:Et,IE_VERSION:At,IS_SAFARI:Pt,IS_ANY_SAFARI:Mt,TOUCH_ENABLED:jt,BACKGROUND_SIZE_SUPPORTED:Ot}),Dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$t=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},Lt=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},It=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},zt=function(e,t){return e.raw=t,e},Ht=Object.prototype.toString,Ft=function(e){return r(e)?Object.keys(e):[]},Rt=void 0,Bt="all",qt=[],Wt=function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:!!At&&At<11,n=Rt.levels[Bt],o=new RegExp("^("+n+")$");"log"!==e&&t.unshift(e.toUpperCase()+":"),qt&&qt.push([].concat(t)),t.unshift("VIDEOJS:");var s=ot.console&&ot.console[e];s&&n&&o.test(e)&&(i&&(t=t.map(function(e){if(r(e)||Array.isArray(e))try{return JSON.stringify(e)}catch(t){return String(e)}return String(e)}).join(" ")),s.apply?s[Array.isArray(t)?"apply":"call"](ot.console,t):s(t))};Rt=function(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];Wt("log",t)},Rt.levels={all:"log|warn|error",error:"error",off:"",warn:"warn|error",DEFAULT:Bt},Rt.level=function(e){if("string"==typeof e){if(!Rt.levels.hasOwnProperty(e))throw new Error('"'+e+'" in not a valid log level');Bt=e}return Bt},Rt.history=function(){return qt?[].concat(qt):[]},Rt.history.clear=function(){qt&&(qt.length=0)},Rt.history.disable=function(){null!==qt&&(qt.length=0,qt=null)},Rt.history.enable=function(){null===qt&&(qt=[])},Rt.error=function(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];return Wt("error",t)},Rt.warn=function(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];return Wt("warn",t)};var Vt=Rt,Xt=function(e){for(var t="",i=0;i<arguments.length;i++)t+=s(e[i])+(arguments[i+1]||"");return t},Yt=zt(["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set "," to ","."],["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set "," to ","."]),Gt=h("querySelector"),Ut=h("querySelectorAll"),Kt=(Object.freeze||Object)({isReal:d,isEl:p,createEl:f,textContent:v,prependTo:g,hasClass:m,addClass:y,removeClass:b,toggleClass:w,setAttributes:T,getAttributes:C,getAttribute:x,setAttribute:k,removeAttribute:S,blockTextSelection:_,unblockTextSelection:E,getBoundingClientRect:A,findPosition:P,getPointerPosition:M,isTextNode:j,emptyEl:O,normalizeContent:N,appendContent:D,insertContent:$,$:Gt,$$:Ut}),Qt=1,Jt={},Zt="vdata"+(new Date).getTime(),ei=!1;!function(){try{var e=Object.defineProperty({},"passive",{get:function(){ei=!0}});ot.addEventListener("test",null,e)}catch(t){}}();var ti=["touchstart","touchmove"],ii=(Object.freeze||Object)({fixEvent:B,on:q,off:W,trigger:V,one:X}),ni=!1,ri=void 0,oi=function(){if(d()){var e=ut.getElementsByTagName("video"),t=ut.getElementsByTagName("audio"),i=[];if(e&&e.length>0)for(var n=0,r=e.length;n<r;n++)i.push(e[n]);if(t&&t.length>0)for(var o=0,s=t.length;o<s;o++)i.push(t[o]);if(i&&i.length>0)for(var a=0,l=i.length;a<l;a++){var c=i[a];if(!c||!c.getAttribute){Y(1);break}if(void 0===c.player){var u=c.getAttribute("data-setup");null!==u&&ri(c)}}else ni||Y(1)}};d()&&"complete"===ut.readyState?ni=!0:X(ot,"load",function(){ni=!0});var si=function(e){var t=ut.createElement("style");return t.className=e,t},ai=function(e,t){e.styleSheet?e.styleSheet.cssText=t:e.textContent=t},li=function(e,t,i){t.guid||(t.guid=L());var n=function(){return t.apply(e,arguments)};return n.guid=i?i+"_"+t.guid:t.guid,n},ci=function(e,t){var i=Date.now(),n=function(){var n=Date.now();n-i>=t&&(e.apply(void 0,arguments),i=n)};return n},ui=function(){};ui.prototype.allowedEvents_={},ui.prototype.on=function(e,t){var i=this.addEventListener;this.addEventListener=function(){},q(this,e,t),this.addEventListener=i},ui.prototype.addEventListener=ui.prototype.on,ui.prototype.off=function(e,t){W(this,e,t)},ui.prototype.removeEventListener=ui.prototype.off,ui.prototype.one=function(e,t){var i=this.addEventListener;this.addEventListener=function(){},X(this,e,t),this.addEventListener=i},ui.prototype.trigger=function(e){var t=e.type||e;"string"==typeof e&&(e={type:t}),e=B(e),this.allowedEvents_[t]&&this["on"+t]&&this["on"+t](e),V(this,e)},ui.prototype.dispatchEvent=ui.prototype.trigger;var di=function(e){return e instanceof ui||!!e.eventBusEl_&&["on","one","off","trigger"].every(function(t){return"function"==typeof e[t]})},pi=function(e){return"string"==typeof e&&/\S/.test(e)||Array.isArray(e)&&!!e.length},hi=function(e){if(!e.nodeName&&!di(e))throw new Error("Invalid target; must be a DOM node or evented object.")},fi=function(e){if(!pi(e))throw new Error("Invalid event type; must be a non-empty string or array.")},vi=function(e){if("function"!=typeof e)throw new Error("Invalid listener; must be a function.")},gi=function(e,t){var i=t.length<3||t[0]===e||t[0]===e.eventBusEl_,n=void 0,r=void 0,o=void 0;return i?(n=e.eventBusEl_,t.length>=3&&t.shift(),r=t[0],o=t[1]):(n=t[0],r=t[1],o=t[2]),hi(n),fi(r),vi(o),o=li(e,o),{isTargetingSelf:i,target:n,type:r,listener:o}},mi=function(e,t,i,n){hi(e),e.nodeName?ii[t](e,i,n):e[t](i,n)},yi={on:function(){for(var e=this,t=arguments.length,i=Array(t),n=0;n<t;n++)i[n]=arguments[n];var r=gi(this,i),o=r.isTargetingSelf,s=r.target,a=r.type,l=r.listener;if(mi(s,"on",a,l),!o){var c=function(){return e.off(s,a,l)};c.guid=l.guid;var u=function(){return e.off("dispose",c)};u.guid=l.guid,mi(this,"on","dispose",c),mi(s,"on","dispose",u)}},one:function(){for(var e=this,t=arguments.length,i=Array(t),n=0;n<t;n++)i[n]=arguments[n];var r=gi(this,i),o=r.isTargetingSelf,s=r.target,a=r.type,l=r.listener;if(o)mi(s,"one",a,l);else{var c=function u(){for(var t=arguments.length,i=Array(t),n=0;n<t;n++)i[n]=arguments[n];e.off(s,a,u),l.apply(null,i)};c.guid=l.guid,mi(s,"one",a,c)}},off:function(e,t,i){if(!e||pi(e))W(this.eventBusEl_,e,t);else{var n=e,r=t;hi(n),fi(r),vi(i),i=li(this,i),this.off("dispose",i),n.nodeName?(W(n,r,i),W(n,"dispose",i)):di(n)&&(n.off(r,i),n.off("dispose",i))}},trigger:function(e,t){return V(this.eventBusEl_,e,t)}},bi={state:{},setState:function(e){var i=this;"function"==typeof e&&(e=e());var n=void 0;return t(e,function(e,t){i.state[t]!==e&&(n=n||{},n[t]={from:i.state[t],to:e}),i.state[t]=e}),n&&di(this)&&this.trigger({changes:n,type:"statechanged"}),n}},wi=function(){function e(t,i,n){if($t(this,e),!t&&this.play?this.player_=t=this:this.player_=t,this.options_=J({},this.options_),i=this.options_=J(this.options_,i),this.id_=i.id||i.el&&i.el.id,!this.id_){var r=t&&t.id&&t.id()||"no_player";this.id_=r+"_component_"+L()}this.name_=i.name||null,i.el?this.el_=i.el:i.createEl!==!1&&(this.el_=this.createEl()),G(this,{eventBusKey:this.el_?"el_":null}),U(this,this.constructor.defaultState),this.children_=[],this.childIndex_={},this.childNameIndex_={},i.initChildren!==!1&&this.initChildren(),this.ready(n),i.reportTouchActivity!==!1&&this.enableTouchActivity()}return e.prototype.dispose=function(){if(this.trigger({type:"dispose",bubbles:!1}),this.children_)for(var e=this.children_.length-1;e>=0;e--)this.children_[e].dispose&&this.children_[e].dispose();this.children_=null,this.childIndex_=null,this.childNameIndex_=null,this.el_&&(this.el_.parentNode&&this.el_.parentNode.removeChild(this.el_),H(this.el_),this.el_=null)},e.prototype.player=function(){return this.player_},e.prototype.options=function(e){return Vt.warn("this.options() has been deprecated and will be moved to the constructor in 6.0"),e?(this.options_=J(this.options_,e),this.options_):this.options_},e.prototype.el=function(){return this.el_},e.prototype.createEl=function(e,t,i){return f(e,t,i)},e.prototype.localize=function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e,n=this.player_.language&&this.player_.language(),r=this.player_.languages&&this.player_.languages(),o=r&&r[n],s=n&&n.split("-")[0],a=r&&r[s],l=i;return o&&o[e]?l=o[e]:a&&a[e]&&(l=a[e]),t&&(l=l.replace(/\{(\d+)\}/g,function(e,i){var n=t[i-1],r=n;return"undefined"==typeof n&&(r=e),r})),l},e.prototype.contentEl=function(){return this.contentEl_||this.el_},e.prototype.id=function(){return this.id_},e.prototype.name=function(){return this.name_},e.prototype.children=function(){return this.children_},e.prototype.getChildById=function(e){return this.childIndex_[e]},e.prototype.getChild=function(e){if(e)return e=K(e),this.childNameIndex_[e]},e.prototype.addChild=function(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.children_.length,r=void 0,o=void 0;if("string"==typeof t){o=K(t);var s=i.componentClass||o;i.name=o;var a=e.getComponent(s);if(!a)throw new Error("Component "+s+" does not exist");if("function"!=typeof a)return null;r=new a(this.player_||this,i)}else r=t;if(this.children_.splice(n,0,r),"function"==typeof r.id&&(this.childIndex_[r.id()]=r),o=o||r.name&&K(r.name()),o&&(this.childNameIndex_[o]=r),"function"==typeof r.el&&r.el()){var l=this.contentEl().children,c=l[n]||null;this.contentEl().insertBefore(r.el(),c)}return r},e.prototype.removeChild=function(e){if("string"==typeof e&&(e=this.getChild(e)),e&&this.children_){for(var t=!1,i=this.children_.length-1;i>=0;i--)if(this.children_[i]===e){t=!0,this.children_.splice(i,1);break}if(t){this.childIndex_[e.id()]=null,this.childNameIndex_[e.name()]=null;var n=e.el();n&&n.parentNode===this.contentEl()&&this.contentEl().removeChild(e.el())}}},e.prototype.initChildren=function(){var t=this,i=this.options_.children;if(i){var n=this.options_,r=function(e){var i=e.name,r=e.opts;if(void 0!==n[i]&&(r=n[i]),r!==!1){r===!0&&(r={}),r.playerOptions=t.options_.playerOptions;var o=t.addChild(i,r);o&&(t[i]=o)}},o=void 0,s=e.getComponent("Tech");o=Array.isArray(i)?i:Object.keys(i),o.concat(Object.keys(this.options_).filter(function(e){return!o.some(function(t){return"string"==typeof t?e===t:e===t.name})})).map(function(e){var n=void 0,r=void 0;return"string"==typeof e?(n=e,r=i[n]||t.options_[n]||{}):(n=e.name,r=e),{name:n,opts:r}}).filter(function(t){var i=e.getComponent(t.opts.componentClass||K(t.name));return i&&!s.isTech(i)}).forEach(r)}},e.prototype.buildCSSClass=function(){return""},e.prototype.ready=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e&&(this.isReady_?t?e.call(this):this.setTimeout(e,1):(this.readyQueue_=this.readyQueue_||[],this.readyQueue_.push(e)))},e.prototype.triggerReady=function(){this.isReady_=!0,this.setTimeout(function(){var e=this.readyQueue_;this.readyQueue_=[],e&&e.length>0&&e.forEach(function(e){e.call(this)},this),this.trigger("ready")},1)},e.prototype.$=function(e,t){return Gt(e,t||this.contentEl())},e.prototype.$$=function(e,t){return Ut(e,t||this.contentEl())},e.prototype.hasClass=function(e){return m(this.el_,e)},e.prototype.addClass=function(e){y(this.el_,e)},e.prototype.removeClass=function(e){b(this.el_,e)},e.prototype.toggleClass=function(e,t){w(this.el_,e,t)},e.prototype.show=function(){this.removeClass("vjs-hidden")},e.prototype.hide=function(){this.addClass("vjs-hidden")},e.prototype.lockShowing=function(){this.addClass("vjs-lock-showing")},e.prototype.unlockShowing=function(){this.removeClass("vjs-lock-showing")},e.prototype.getAttribute=function(e){return x(this.el_,e)},e.prototype.setAttribute=function(e,t){k(this.el_,e,t)},e.prototype.removeAttribute=function(e){S(this.el_,e)},e.prototype.width=function(e,t){return this.dimension("width",e,t)},e.prototype.height=function(e,t){return this.dimension("height",e,t)},e.prototype.dimensions=function(e,t){this.width(e,!0),this.height(t)},e.prototype.dimension=function(e,t,i){if(void 0!==t)return null!==t&&t===t||(t=0),(""+t).indexOf("%")!==-1||(""+t).indexOf("px")!==-1?this.el_.style[e]=t:"auto"===t?this.el_.style[e]="":this.el_.style[e]=t+"px",void(i||this.trigger("componentresize"));if(!this.el_)return 0;var n=this.el_.style[e],r=n.indexOf("px");return r!==-1?parseInt(n.slice(0,r),10):parseInt(this.el_["offset"+K(e)],10)},e.prototype.currentDimension=function(e){var t=0;if("width"!==e&&"height"!==e)throw new Error("currentDimension only accepts width or height value");if("function"==typeof ot.getComputedStyle){var i=ot.getComputedStyle(this.el_);t=i.getPropertyValue(e)||i[e]}if(t=parseFloat(t),0===t){var n="offset"+K(e);t=this.el_[n]}return t},e.prototype.currentDimensions=function(){return{width:this.currentDimension("width"),height:this.currentDimension("height")}},e.prototype.currentWidth=function(){return this.currentDimension("width")},e.prototype.currentHeight=function(){return this.currentDimension("height")},e.prototype.focus=function(){this.el_.focus()},e.prototype.blur=function(){this.el_.blur()},e.prototype.emitTapEvents=function(){var e=0,t=null,i=10,n=200,r=void 0;this.on("touchstart",function(i){1===i.touches.length&&(t={pageX:i.touches[0].pageX,pageY:i.touches[0].pageY},e=(new Date).getTime(),r=!0)}),this.on("touchmove",function(e){if(e.touches.length>1)r=!1;else if(t){var n=e.touches[0].pageX-t.pageX,o=e.touches[0].pageY-t.pageY,s=Math.sqrt(n*n+o*o);s>i&&(r=!1)}});var o=function(){r=!1};this.on("touchleave",o),this.on("touchcancel",o),this.on("touchend",function(i){if(t=null,r===!0){var o=(new Date).getTime()-e;o<n&&(i.preventDefault(),this.trigger("tap"))}})},e.prototype.enableTouchActivity=function(){if(this.player()&&this.player().reportUserActivity){var e=li(this.player(),this.player().reportUserActivity),t=void 0;this.on("touchstart",function(){e(),this.clearInterval(t),t=this.setInterval(e,250)});var i=function(i){e(),this.clearInterval(t)};this.on("touchmove",e),this.on("touchend",i),this.on("touchcancel",i)}},e.prototype.setTimeout=function(e,t){e=li(this,e);var i=ot.setTimeout(e,t),n=function(){this.clearTimeout(i)};return n.guid="vjs-timeout-"+i,this.on("dispose",n),i},e.prototype.clearTimeout=function(e){ot.clearTimeout(e);var t=function(){};return t.guid="vjs-timeout-"+e,this.off("dispose",t),e},e.prototype.setInterval=function(e,t){e=li(this,e);var i=ot.setInterval(e,t),n=function(){this.clearInterval(i)};return n.guid="vjs-interval-"+i,this.on("dispose",n),i},e.prototype.clearInterval=function(e){ot.clearInterval(e);var t=function(){};return t.guid="vjs-interval-"+e,this.off("dispose",t),e},e.prototype.requestAnimationFrame=function(e){var t=this;if(this.supportsRaf_){e=li(this,e);var i=ot.requestAnimationFrame(e),n=function(){return t.cancelAnimationFrame(i)};return n.guid="vjs-raf-"+i,this.on("dispose",n),i}return this.setTimeout(e,1e3/60)},e.prototype.cancelAnimationFrame=function(e){if(this.supportsRaf_){ot.cancelAnimationFrame(e);var t=function(){};return t.guid="vjs-raf-"+e,this.off("dispose",t),e}return this.clearTimeout(e)},e.registerComponent=function(t,i){if("string"!=typeof t||!t)throw new Error('Illegal component name, "'+t+'"; must be a non-empty string.');var n=e.getComponent("Tech"),r=n&&n.isTech(i),o=e===i||e.prototype.isPrototypeOf(i.prototype);if(r||!o){var s=void 0;throw s=r?"techs must be registered using Tech.registerTech()":"must be a Component subclass",new Error('Illegal component, "'+t+'"; '+s+".")}t=K(t),e.components_||(e.components_={});var a=e.getComponent("Player");if("Player"===t&&a&&a.players){var l=a.players,c=Object.keys(l);if(l&&c.length>0&&c.map(function(e){return l[e]}).every(Boolean))throw new Error("Can not register Player component after player has been created.")}return e.components_[t]=i,i},e.getComponent=function(t){if(t)return t=K(t),e.components_&&e.components_[t]?e.components_[t]:void 0},e}();wi.prototype.supportsRaf_="function"==typeof ot.requestAnimationFrame&&"function"==typeof ot.cancelAnimationFrame,wi.registerComponent("Component",wi);for(var Ti={},Ci=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],xi=Ci[0],ki=void 0,Si=0;Si<Ci.length;Si++)if(Ci[Si][1]in ut){ki=Ci[Si];break}if(ki)for(var _i=0;_i<ki.length;_i++)Ti[xi[_i]]=ki[_i];re.prototype.code=0,re.prototype.message="",re.prototype.status=null,re.errorTypes=["MEDIA_ERR_CUSTOM","MEDIA_ERR_ABORTED","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","MEDIA_ERR_ENCRYPTED"],re.defaultMessages={1:"You aborted the media playback",2:"A network error caused the media download to fail part-way.",3:"The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",4:"The media could not be loaded, either because the server or network failed or because the format is not supported.",5:"The media is encrypted and we do not have the keys to decrypt it."};for(var Ei=0;Ei<re.errorTypes.length;Ei++)re[re.errorTypes[Ei]]=Ei,re.prototype[re.errorTypes[Ei]]=Ei;var Ai=oe,Pi=function(e){var t=["kind","label","language","id","inBandMetadataTrackDispatchType","mode","src"].reduce(function(t,i,n){return e[i]&&(t[i]=e[i]),t},{cues:e.cues&&Array.prototype.map.call(e.cues,function(e){return{startTime:e.startTime,endTime:e.endTime,text:e.text,id:e.id}})});return t},Mi=function(e){var t=e.$$("track"),i=Array.prototype.map.call(t,function(e){return e.track}),n=Array.prototype.map.call(t,function(e){var t=Pi(e.track);return e.src&&(t.src=e.src),t});return n.concat(Array.prototype.filter.call(e.textTracks(),function(e){return i.indexOf(e)===-1}).map(Pi))},ji=function(e,t){return e.forEach(function(e){var i=t.addRemoteTextTrack(e).track;!e.src&&e.cues&&e.cues.forEach(function(e){return i.addCue(e)})}),t.textTracks()},Oi={textTracksToJson:Mi,jsonToTextTracks:ji,trackToJson_:Pi},Ni="vjs-modal-dialog",Di=27,$i=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.opened_=r.hasBeenOpened_=r.hasBeenFilled_=!1,r.closeable(!r.options_.uncloseable),r.content(r.options_.content),r.contentEl_=f("div",{className:Ni+"-content"},{role:"document"}),r.descEl_=f("p",{className:Ni+"-description vjs-control-text",id:r.el().getAttribute("aria-describedby")}),v(r.descEl_,r.description()),r.el_.appendChild(r.descEl_),r.el_.appendChild(r.contentEl_),r}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:this.buildCSSClass(),tabIndex:-1},{"aria-describedby":this.id()+"_description","aria-hidden":"true","aria-label":this.label(),role:"dialog"})},t.prototype.buildCSSClass=function(){return Ni+" vjs-hidden "+e.prototype.buildCSSClass.call(this)},t.prototype.handleKeyPress=function(e){e.which===Di&&this.closeable()&&this.close()},t.prototype.label=function(){return this.localize(this.options_.label||"Modal Window")},t.prototype.description=function(){var e=this.options_.description||this.localize("This is a modal window.");return this.closeable()&&(e+=" "+this.localize("This modal can be closed by pressing the Escape key or activating the close button.")),e},t.prototype.open=function(){if(!this.opened_){var e=this.player();this.trigger("beforemodalopen"),this.opened_=!0,(this.options_.fillAlways||!this.hasBeenOpened_&&!this.hasBeenFilled_)&&this.fill(),this.wasPlaying_=!e.paused(),this.options_.pauseOnOpen&&this.wasPlaying_&&e.pause(),this.closeable()&&this.on(this.el_.ownerDocument,"keydown",li(this,this.handleKeyPress)),e.controls(!1),this.show(),this.conditionalFocus_(),this.el().setAttribute("aria-hidden","false"),this.trigger("modalopen"),this.hasBeenOpened_=!0}},t.prototype.opened=function(e){return"boolean"==typeof e&&this[e?"open":"close"](),this.opened_},t.prototype.close=function(){if(this.opened_){var e=this.player();this.trigger("beforemodalclose"),this.opened_=!1,this.wasPlaying_&&this.options_.pauseOnOpen&&e.play(),this.closeable()&&this.off(this.el_.ownerDocument,"keydown",li(this,this.handleKeyPress)),e.controls(!0),this.hide(),this.el().setAttribute("aria-hidden","true"),this.trigger("modalclose"),this.conditionalBlur_(),this.options_.temporary&&this.dispose()}},t.prototype.closeable=function i(e){if("boolean"==typeof e){var i=this.closeable_=!!e,t=this.getChild("closeButton");if(i&&!t){var n=this.contentEl_;this.contentEl_=this.el_,t=this.addChild("closeButton",{controlText:"Close Modal Dialog"}),this.contentEl_=n,this.on(t,"close",this.close)}!i&&t&&(this.off(t,"close",this.close),this.removeChild(t),t.dispose())}return this.closeable_},t.prototype.fill=function(){this.fillWith(this.content())},t.prototype.fillWith=function(e){var t=this.contentEl(),i=t.parentNode,n=t.nextSibling;this.trigger("beforemodalfill"),this.hasBeenFilled_=!0,i.removeChild(t),this.empty(),$(t,e),this.trigger("modalfill"),n?i.insertBefore(t,n):i.appendChild(t);var r=this.getChild("closeButton");r&&i.appendChild(r.el_)},t.prototype.empty=function(){this.trigger("beforemodalempty"),O(this.contentEl()),this.trigger("modalempty")},t.prototype.content=function(e){return"undefined"!=typeof e&&(this.content_=e),this.content_},t.prototype.conditionalFocus_=function(){var e=ut.activeElement,t=this.player_.el_;this.previouslyActiveEl_=null,(t.contains(e)||t===e)&&(this.previouslyActiveEl_=e,this.focus(),this.on(ut,"keydown",this.handleKeyDown))},t.prototype.conditionalBlur_=function(){this.previouslyActiveEl_&&(this.previouslyActiveEl_.focus(),this.previouslyActiveEl_=null),this.off(ut,"keydown",this.handleKeyDown)},t.prototype.handleKeyDown=function(e){if(9===e.which){for(var t=this.focusableEls_(),i=this.el_.querySelector(":focus"),n=void 0,r=0;r<t.length;r++)if(i===t[r]){n=r;break}ut.activeElement===this.el_&&(n=0),e.shiftKey&&0===n?(t[t.length-1].focus(),e.preventDefault()):e.shiftKey||n!==t.length-1||(t[0].focus(),e.preventDefault())}},t.prototype.focusableEls_=function(){var e=this.el_.querySelectorAll("*");return Array.prototype.filter.call(e,function(e){return(e instanceof ot.HTMLAnchorElement||e instanceof ot.HTMLAreaElement)&&e.hasAttribute("href")||(e instanceof ot.HTMLInputElement||e instanceof ot.HTMLSelectElement||e instanceof ot.HTMLTextAreaElement||e instanceof ot.HTMLButtonElement)&&!e.hasAttribute("disabled")||e instanceof ot.HTMLIFrameElement||e instanceof ot.HTMLObjectElement||e instanceof ot.HTMLEmbedElement||e.hasAttribute("tabindex")&&e.getAttribute("tabindex")!==-1||e.hasAttribute("contenteditable")})},t}(wi);$i.prototype.options_={pauseOnOpen:!0,temporary:!0},wi.registerComponent("ModalDialog",$i);var Li=function(e){function t(){var i,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;$t(this,t);var o=It(this,e.call(this));if(!r&&(r=o,Et)){r=ut.createElement("custom");for(var s in t.prototype)"constructor"!==s&&(r[s]=t.prototype[s])}r.tracks_=[],Object.defineProperty(r,"length",{get:function(){return this.tracks_.length}});for(var a=0;a<n.length;a++)r.addTrack(n[a]);return i=r,It(o,i)}return Lt(t,e),t.prototype.addTrack=function(e){var t=this.tracks_.length;""+t in this||Object.defineProperty(this,t,{get:function(){return this.tracks_[t]}}),this.tracks_.indexOf(e)===-1&&(this.tracks_.push(e),this.trigger({track:e,type:"addtrack"}))},t.prototype.removeTrack=function(e){for(var t=void 0,i=0,n=this.length;i<n;i++)if(this[i]===e){t=this[i],t.off&&t.off(),this.tracks_.splice(i,1);break}t&&this.trigger({track:t,type:"removetrack"})},t.prototype.getTrackById=function(e){for(var t=null,i=0,n=this.length;i<n;i++){var r=this[i];if(r.id===e){t=r;break}}return t},t}(ui);Li.prototype.allowedEvents_={change:"change",addtrack:"addtrack",removetrack:"removetrack"
};for(var Ii in Li.prototype.allowedEvents_)Li.prototype["on"+Ii]=null;var zi=function(e,t){for(var i=0;i<e.length;i++)Object.keys(e[i]).length&&t.id!==e[i].id&&(e[i].enabled=!1)},Hi=function(e){function t(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];$t(this,t);for(var o=void 0,s=r.length-1;s>=0;s--)if(r[s].enabled){zi(r,r[s]);break}if(Et){o=ut.createElement("custom");for(var a in Li.prototype)"constructor"!==a&&(o[a]=Li.prototype[a]);for(var l in t.prototype)"constructor"!==l&&(o[l]=t.prototype[l])}return o=i=It(this,e.call(this,r,o)),o.changing_=!1,n=o,It(i,n)}return Lt(t,e),t.prototype.addTrack=function(t){var i=this;t.enabled&&zi(this,t),e.prototype.addTrack.call(this,t),t.addEventListener&&t.addEventListener("enabledchange",function(){i.changing_||(i.changing_=!0,zi(i,t),i.changing_=!1,i.trigger("change"))})},t}(Li),Fi=function(e,t){for(var i=0;i<e.length;i++)Object.keys(e[i]).length&&t.id!==e[i].id&&(e[i].selected=!1)},Ri=function(e){function t(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];$t(this,t);for(var o=void 0,s=r.length-1;s>=0;s--)if(r[s].selected){Fi(r,r[s]);break}if(Et){o=ut.createElement("custom");for(var a in Li.prototype)"constructor"!==a&&(o[a]=Li.prototype[a]);for(var l in t.prototype)"constructor"!==l&&(o[l]=t.prototype[l])}return o=i=It(this,e.call(this,r,o)),o.changing_=!1,Object.defineProperty(o,"selectedIndex",{get:function(){for(var e=0;e<this.length;e++)if(this[e].selected)return e;return-1},set:function(){}}),n=o,It(i,n)}return Lt(t,e),t.prototype.addTrack=function(t){var i=this;t.selected&&Fi(this,t),e.prototype.addTrack.call(this,t),t.addEventListener&&t.addEventListener("selectedchange",function(){i.changing_||(i.changing_=!0,Fi(i,t),i.changing_=!1,i.trigger("change"))})},t}(Li),Bi=function(e){function t(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];$t(this,t);var o=void 0;if(Et){o=ut.createElement("custom");for(var s in Li.prototype)"constructor"!==s&&(o[s]=Li.prototype[s]);for(var a in t.prototype)"constructor"!==a&&(o[a]=t.prototype[a])}return o=i=It(this,e.call(this,r,o)),n=o,It(i,n)}return Lt(t,e),t.prototype.addTrack=function(t){e.prototype.addTrack.call(this,t),t.addEventListener("modechange",li(this,function(){this.trigger("change")}));var i=["metadata","chapters"];i.indexOf(t.kind)===-1&&t.addEventListener("modechange",li(this,function(){this.trigger("selectedlanguagechange")}))},t}(Li),qi=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];$t(this,e);var i=this;if(Et){i=ut.createElement("custom");for(var n in e.prototype)"constructor"!==n&&(i[n]=e.prototype[n])}i.trackElements_=[],Object.defineProperty(i,"length",{get:function(){return this.trackElements_.length}});for(var r=0,o=t.length;r<o;r++)i.addTrackElement_(t[r]);if(Et)return i}return e.prototype.addTrackElement_=function(e){var t=this.trackElements_.length;""+t in this||Object.defineProperty(this,t,{get:function(){return this.trackElements_[t]}}),this.trackElements_.indexOf(e)===-1&&this.trackElements_.push(e)},e.prototype.getTrackElementByTrack_=function(e){for(var t=void 0,i=0,n=this.trackElements_.length;i<n;i++)if(e===this.trackElements_[i].track){t=this.trackElements_[i];break}return t},e.prototype.removeTrackElement_=function(e){for(var t=0,i=this.trackElements_.length;t<i;t++)if(e===this.trackElements_[t]){this.trackElements_.splice(t,1);break}},e}(),Wi=function(){function e(t){$t(this,e);var i=this;if(Et){i=ut.createElement("custom");for(var n in e.prototype)"constructor"!==n&&(i[n]=e.prototype[n])}if(e.prototype.setCues_.call(i,t),Object.defineProperty(i,"length",{get:function(){return this.length_}}),Et)return i}return e.prototype.setCues_=function(e){var t=this.length||0,i=0,n=e.length;this.cues_=e,this.length_=e.length;var r=function(e){""+e in this||Object.defineProperty(this,""+e,{get:function(){return this.cues_[e]}})};if(t<n)for(i=t;i<n;i++)r.call(this,i)},e.prototype.getCueById=function(e){for(var t=null,i=0,n=this.length;i<n;i++){var r=this[i];if(r.id===e){t=r;break}}return t},e}(),Vi={alternative:"alternative",captions:"captions",main:"main",sign:"sign",subtitles:"subtitles",commentary:"commentary"},Xi={alternative:"alternative",descriptions:"descriptions",main:"main","main-desc":"main-desc",translation:"translation",commentary:"commentary"},Yi={subtitles:"subtitles",captions:"captions",descriptions:"descriptions",chapters:"chapters",metadata:"metadata"},Gi={disabled:"disabled",hidden:"hidden",showing:"showing"},Ui=function(e){function t(){var i,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};$t(this,t);var r=It(this,e.call(this)),o=r;if(Et){o=ut.createElement("custom");for(var s in t.prototype)"constructor"!==s&&(o[s]=t.prototype[s])}var a={id:n.id||"vjs_track_"+L(),kind:n.kind||"",label:n.label||"",language:n.language||""},l=function(e){Object.defineProperty(o,e,{get:function(){return a[e]},set:function(){}})};for(var c in a)l(c);return i=o,It(r,i)}return Lt(t,e),t}(ui),Ki=function(e){var t=["protocol","hostname","port","pathname","search","hash","host"],i=ut.createElement("a");i.href=e;var n=""===i.host&&"file:"!==i.protocol,r=void 0;n&&(r=ut.createElement("div"),r.innerHTML='<a href="'+e+'"></a>',i=r.firstChild,r.setAttribute("style","display:none; position:absolute;"),ut.body.appendChild(r));for(var o={},s=0;s<t.length;s++)o[t[s]]=i[t[s]];return"http:"===o.protocol&&(o.host=o.host.replace(/:80$/,"")),"https:"===o.protocol&&(o.host=o.host.replace(/:443$/,"")),n&&ut.body.removeChild(r),o},Qi=function(e){if(!e.match(/^https?:\/\//)){var t=ut.createElement("div");t.innerHTML='<a href="'+e+'">x</a>',e=t.firstChild.href}return e},Ji=function(e){if("string"==typeof e){var t=/^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i,i=t.exec(e);if(i)return i.pop().toLowerCase()}return""},Zi=function(e){var t=ot.location,i=Ki(e),n=":"===i.protocol?t.protocol:i.protocol,r=n+i.host!==t.protocol+t.host;return r},en=(Object.freeze||Object)({parseUrl:Ki,getAbsoluteURL:Qi,getFileExtension:Ji,isCrossOrigin:Zi}),tn=se,nn=Object.prototype.toString,rn=e(function(e,t){function i(e){return e.replace(/^\s*|\s*$/g,"")}t=e.exports=i,t.left=function(e){return e.replace(/^\s*/,"")},t.right=function(e){return e.replace(/\s*$/,"")}}),on=ae,sn=Object.prototype.toString,an=Object.prototype.hasOwnProperty,ln=function(e){return"[object Array]"===Object.prototype.toString.call(e)},cn=function(e){if(!e)return{};var t={};return on(rn(e).split("\n"),function(e){var i=e.indexOf(":"),n=rn(e.slice(0,i)).toLowerCase(),r=rn(e.slice(i+1));"undefined"==typeof t[n]?t[n]=r:ln(t[n])?t[n].push(r):t[n]=[t[n],r]}),t},un=de,dn=Object.prototype.hasOwnProperty,pn=ve;ve.XMLHttpRequest=ot.XMLHttpRequest||ye,ve.XDomainRequest="withCredentials"in new ve.XMLHttpRequest?ve.XMLHttpRequest:ot.XDomainRequest,pe(["get","put","post","patch","head","delete"],function(e){ve["delete"===e?"del":e]=function(t,i,n){return i=fe(t,i,n),i.method=e.toUpperCase(),ge(i)}});var hn=function(e,t){var i=new ot.WebVTT.Parser(ot,ot.vttjs,ot.WebVTT.StringDecoder()),n=[];i.oncue=function(e){t.addCue(e)},i.onparsingerror=function(e){n.push(e)},i.onflush=function(){t.trigger({type:"loadeddata",target:t})},i.parse(e),n.length>0&&(ot.console&&ot.console.groupCollapsed&&ot.console.groupCollapsed("Text Track parsing errors for "+t.src),n.forEach(function(e){return Vt.error(e)}),ot.console&&ot.console.groupEnd&&ot.console.groupEnd()),i.flush()},fn=function(e,t){var i={uri:e},n=Zi(e);n&&(i.cors=n),pn(i,li(this,function(e,i,n){if(e)return Vt.error(e,i);if(t.loaded_=!0,"function"!=typeof ot.WebVTT){if(t.tech_){var r=function(){return hn(n,t)};t.tech_.on("vttjsloaded",r),t.tech_.on("vttjserror",function(){Vt.error("vttjs failed to load, stopping trying to process "+t.src),t.tech_.off("vttjsloaded",r)})}}else hn(n,t)}))},vn=function(e){function t(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if($t(this,t),!r.tech)throw new Error("A tech was not provided.");var o=J(r,{kind:Yi[r.kind]||"subtitles",language:r.language||r.srclang||""}),s=Gi[o.mode]||"disabled",a=o["default"];"metadata"!==o.kind&&"chapters"!==o.kind||(s="hidden");var l=i=It(this,e.call(this,o));if(l.tech_=o.tech,Et)for(var c in t.prototype)"constructor"!==c&&(l[c]=t.prototype[c]);l.cues_=[],l.activeCues_=[];var u=new Wi(l.cues_),d=new Wi(l.activeCues_),p=!1,h=li(l,function(){this.activeCues,p&&(this.trigger("cuechange"),p=!1)});return"disabled"!==s&&l.tech_.ready(function(){l.tech_.on("timeupdate",h)},!0),Object.defineProperty(l,"default",{get:function(){return a},set:function(){}}),Object.defineProperty(l,"mode",{get:function(){return s},set:function(e){var t=this;Gi[e]&&(s=e,"showing"===s&&this.tech_.ready(function(){t.tech_.on("timeupdate",h)},!0),this.trigger("modechange"))}}),Object.defineProperty(l,"cues",{get:function(){return this.loaded_?u:null},set:function(){}}),Object.defineProperty(l,"activeCues",{get:function(){if(!this.loaded_)return null;if(0===this.cues.length)return d;for(var e=this.tech_.currentTime(),t=[],i=0,n=this.cues.length;i<n;i++){var r=this.cues[i];r.startTime<=e&&r.endTime>=e?t.push(r):r.startTime===r.endTime&&r.startTime<=e&&r.startTime+.5>=e&&t.push(r)}if(p=!1,t.length!==this.activeCues_.length)p=!0;else for(var o=0;o<t.length;o++)this.activeCues_.indexOf(t[o])===-1&&(p=!0);return this.activeCues_=t,d.setCues_(this.activeCues_),d},set:function(){}}),o.src?(l.src=o.src,fn(o.src,l)):l.loaded_=!0,n=l,It(i,n)}return Lt(t,e),t.prototype.addCue=function(e){var t=e;if(ot.vttjs&&!(e instanceof ot.vttjs.VTTCue)){t=new ot.vttjs.VTTCue(e.startTime,e.endTime,e.text);for(var i in e)i in t||(t[i]=e[i]);t.id=e.id,t.originalCue_=e}for(var n=this.tech_.textTracks(),r=0;r<n.length;r++)n[r]!==this&&n[r].removeCue(t);this.cues_.push(t),this.cues.setCues_(this.cues_)},t.prototype.removeCue=function(e){for(var t=this.cues_.length;t--;){var i=this.cues_[t];if(i===e||i.originalCue_&&i.originalCue_===e){this.cues_.splice(t,1),this.cues.setCues_(this.cues_);break}}},t}(Ui);vn.prototype.allowedEvents_={cuechange:"cuechange"};var gn=function(e){function t(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};$t(this,t);var o=J(r,{kind:Xi[r.kind]||""}),s=i=It(this,e.call(this,o)),a=!1;if(Et)for(var l in t.prototype)"constructor"!==l&&(s[l]=t.prototype[l]);return Object.defineProperty(s,"enabled",{get:function(){return a},set:function(e){"boolean"==typeof e&&e!==a&&(a=e,this.trigger("enabledchange"))}}),o.enabled&&(s.enabled=o.enabled),s.loaded_=!0,n=s,It(i,n)}return Lt(t,e),t}(Ui),mn=function(e){function t(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};$t(this,t);var o=J(r,{kind:Vi[r.kind]||""}),s=i=It(this,e.call(this,o)),a=!1;if(Et)for(var l in t.prototype)"constructor"!==l&&(s[l]=t.prototype[l]);return Object.defineProperty(s,"selected",{get:function(){return a},set:function(e){"boolean"==typeof e&&e!==a&&(a=e,this.trigger("selectedchange"))}}),o.selected&&(s.selected=o.selected),n=s,It(i,n)}return Lt(t,e),t}(Ui),yn=0,bn=1,wn=2,Tn=3,Cn=function(e){function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};$t(this,t);var n=It(this,e.call(this)),r=void 0,o=n;if(Et){o=ut.createElement("custom");for(var s in t.prototype)"constructor"!==s&&(o[s]=t.prototype[s])}var a=new vn(i);if(o.kind=a.kind,o.src=a.src,o.srclang=a.language,o.label=a.label,o["default"]=a["default"],Object.defineProperty(o,"readyState",{get:function(){return r}}),Object.defineProperty(o,"track",{get:function(){return a}}),r=yn,a.addEventListener("loadeddata",function(){r=wn,o.trigger({type:"load",target:o})}),Et){var l;return l=o,It(n,l)}return n}return Lt(t,e),t}(ui);Cn.prototype.allowedEvents_={load:"load"},Cn.NONE=yn,Cn.LOADING=bn,Cn.LOADED=wn,Cn.ERROR=Tn;var xn={audio:{ListClass:Hi,TrackClass:gn,capitalName:"Audio"},video:{ListClass:Ri,TrackClass:mn,capitalName:"Video"},text:{ListClass:Bi,TrackClass:vn,capitalName:"Text"}};Object.keys(xn).forEach(function(e){xn[e].getterName=e+"Tracks",xn[e].privateName=e+"Tracks_"});var kn={remoteText:{ListClass:Bi,TrackClass:vn,capitalName:"RemoteText",getterName:"remoteTextTracks",privateName:"remoteTextTracks_"},remoteTextEl:{ListClass:qi,TrackClass:Cn,capitalName:"RemoteTextTrackEls",getterName:"remoteTextTrackEls",privateName:"remoteTextTrackEls_"}},Sn=J(xn,kn);kn.names=Object.keys(kn),xn.names=Object.keys(xn),Sn.names=[].concat(kn.names).concat(xn.names);var _n=Object.create||function(){function e(){}return function(t){if(1!==arguments.length)throw new Error("Object.create shim only accepts one parameter.");return e.prototype=t,new e}}();be.prototype=_n(Error.prototype),be.prototype.constructor=be,be.Errors={BadSignature:{code:0,message:"Malformed WebVTT signature."},BadTimeStamp:{code:1,message:"Malformed time stamp."}},Te.prototype={set:function(e,t){this.get(e)||""===t||(this.values[e]=t)},get:function(e,t,i){return i?this.has(e)?this.values[e]:t[i]:this.has(e)?this.values[e]:t},has:function(e){return e in this.values},alt:function(e,t,i){for(var n=0;n<i.length;++n)if(t===i[n]){this.set(e,t);break}},integer:function(e,t){/^-?\d+$/.test(t)&&this.set(e,parseInt(t,10))},percent:function(e,t){var i;return!!((i=t.match(/^([\d]{1,3})(\.[\d]*)?%$/))&&(t=parseFloat(t),t>=0&&t<=100))&&(this.set(e,t),!0)}};var En={"&amp;":"&","&lt;":"<","&gt;":">","&lrm;":"‎","&rlm;":"‏","&nbsp;":" "},An={c:"span",i:"i",b:"b",u:"u",ruby:"ruby",rt:"rt",v:"span",lang:"span"},Pn={v:"title",lang:"lang"},Mn={rt:"ruby"},jn=[[1470,1470],[1472,1472],[1475,1475],[1478,1478],[1488,1514],[1520,1524],[1544,1544],[1547,1547],[1549,1549],[1563,1563],[1566,1610],[1645,1647],[1649,1749],[1765,1766],[1774,1775],[1786,1805],[1807,1808],[1810,1839],[1869,1957],[1969,1969],[1984,2026],[2036,2037],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2096,2110],[2112,2136],[2142,2142],[2208,2208],[2210,2220],[8207,8207],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64449],[64467,64829],[64848,64911],[64914,64967],[65008,65020],[65136,65140],[65142,65276],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67671,67679],[67840,67867],[67872,67897],[67903,67903],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68147],[68160,68167],[68176,68184],[68192,68223],[68352,68405],[68416,68437],[68440,68466],[68472,68479],[68608,68680],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[1114109,1114109]];Ae.prototype.applyStyles=function(e,t){t=t||this.div;for(var i in e)e.hasOwnProperty(i)&&(t.style[i]=e[i])},Ae.prototype.formatStyle=function(e,t){return 0===e?0:e+t},Pe.prototype=_n(Ae.prototype),Pe.prototype.constructor=Pe,Me.prototype.move=function(e,t){switch(t=void 0!==t?t:this.lineHeight,e){case"+x":this.left+=t,this.right+=t;break;case"-x":this.left-=t,this.right-=t;break;case"+y":this.top+=t,this.bottom+=t;break;case"-y":this.top-=t,this.bottom-=t}},Me.prototype.overlaps=function(e){return this.left<e.right&&this.right>e.left&&this.top<e.bottom&&this.bottom>e.top},Me.prototype.overlapsAny=function(e){for(var t=0;t<e.length;t++)if(this.overlaps(e[t]))return!0;return!1},Me.prototype.within=function(e){return this.top>=e.top&&this.bottom<=e.bottom&&this.left>=e.left&&this.right<=e.right},Me.prototype.overlapsOppositeAxis=function(e,t){switch(t){case"+x":return this.left<e.left;case"-x":return this.right>e.right;case"+y":return this.top<e.top;case"-y":return this.bottom>e.bottom}},Me.prototype.intersectPercentage=function(e){var t=Math.max(0,Math.min(this.right,e.right)-Math.max(this.left,e.left)),i=Math.max(0,Math.min(this.bottom,e.bottom)-Math.max(this.top,e.top)),n=t*i;return n/(this.height*this.width)},Me.prototype.toCSSCompatValues=function(e){return{top:this.top-e.top,bottom:e.bottom-this.bottom,left:this.left-e.left,right:e.right-this.right,height:this.height,width:this.width}},Me.getSimpleBoxPosition=function(e){var t=e.div?e.div.offsetHeight:e.tagName?e.offsetHeight:0,i=e.div?e.div.offsetWidth:e.tagName?e.offsetWidth:0,n=e.div?e.div.offsetTop:e.tagName?e.offsetTop:0;e=e.div?e.div.getBoundingClientRect():e.tagName?e.getBoundingClientRect():e;var r={left:e.left,right:e.right,top:e.top||n,height:e.height||t,bottom:e.bottom||n+(e.height||t),width:e.width||i};return r},Oe.StringDecoder=function(){return{decode:function(e){if(!e)return"";if("string"!=typeof e)throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(e))}}},Oe.convertCueToDOMTree=function(e,t){return e&&t?ke(e,t):null};var On=.05,Nn="sans-serif",Dn="1.5%";Oe.processCues=function(e,t,i){function n(e){for(var t=0;t<e.length;t++)if(e[t].hasBeenReset||!e[t].displayState)return!0;return!1}if(!e||!t||!i)return null;for(;i.firstChild;)i.removeChild(i.firstChild);var r=e.document.createElement("div");if(r.style.position="absolute",r.style.left="0",r.style.right="0",r.style.top="0",r.style.bottom="0",r.style.margin=Dn,i.appendChild(r),n(t)){var o=[],s=Me.getSimpleBoxPosition(r),a=Math.round(s.height*On*100)/100,l={font:a+"px "+Nn};!function(){for(var i,n,a=0;a<t.length;a++)n=t[a],i=new Pe(e,n,l),r.appendChild(i.div),je(e,i,s,o),n.displayState=i.div,o.push(Me.getSimpleBoxPosition(i))}()}else for(var c=0;c<t.length;c++)r.appendChild(t[c].displayState)},Oe.Parser=function(e,t,i){i||(i=t,t={}),t||(t={}),this.window=e,this.vttjs=t,this.state="INITIAL",this.buffer="",this.decoder=i||new TextDecoder("utf8"),this.regionList=[]},Oe.Parser.prototype={reportOrThrowError:function(e){if(!(e instanceof be))throw e;this.onparsingerror&&this.onparsingerror(e)},parse:function(e){function t(){for(var e=o.buffer,t=0;t<e.length&&"\r"!==e[t]&&"\n"!==e[t];)++t;var i=e.substr(0,t);return"\r"===e[t]&&++t,"\n"===e[t]&&++t,o.buffer=e.substr(t),i}function i(e){var t=new Te;if(Ce(e,function(e,i){switch(e){case"id":t.set(e,i);break;case"width":t.percent(e,i);break;case"lines":t.integer(e,i);break;case"regionanchor":case"viewportanchor":var n=i.split(",");if(2!==n.length)break;var r=new Te;if(r.percent("x",n[0]),r.percent("y",n[1]),!r.has("x")||!r.has("y"))break;t.set(e+"X",r.get("x")),t.set(e+"Y",r.get("y"));break;case"scroll":t.alt(e,i,["up"])}},/=/,/\s/),t.has("id")){var i=new(o.vttjs.VTTRegion||o.window.VTTRegion);i.width=t.get("width",100),i.lines=t.get("lines",3),i.regionAnchorX=t.get("regionanchorX",0),i.regionAnchorY=t.get("regionanchorY",100),i.viewportAnchorX=t.get("viewportanchorX",0),i.viewportAnchorY=t.get("viewportanchorY",100),i.scroll=t.get("scroll",""),o.onregion&&o.onregion(i),o.regionList.push({id:t.get("id"),region:i})}}function n(e){var t=new Te;Ce(e,function(e,i){switch(e){case"MPEGT":t.integer(e+"S",i);break;case"LOCA":t.set(e+"L",we(i))}},/[^\d]:/,/,/),o.ontimestampmap&&o.ontimestampmap({MPEGTS:t.get("MPEGTS"),LOCAL:t.get("LOCAL")})}function r(e){e.match(/X-TIMESTAMP-MAP/)?Ce(e,function(e,t){switch(e){case"X-TIMESTAMP-MAP":n(t)}},/=/):Ce(e,function(e,t){switch(e){case"Region":i(t)}},/:/)}var o=this;e&&(o.buffer+=o.decoder.decode(e,{stream:!0}));try{var s;if("INITIAL"===o.state){if(!/\r\n|\n/.test(o.buffer))return this;s=t();var a=s.match(/^WEBVTT([ \t].*)?$/);if(!a||!a[0])throw new be(be.Errors.BadSignature);o.state="HEADER"}for(var l=!1;o.buffer;){if(!/\r\n|\n/.test(o.buffer))return this;switch(l?l=!1:s=t(),o.state){case"HEADER":/:/.test(s)?r(s):s||(o.state="ID");continue;case"NOTE":s||(o.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(s)){o.state="NOTE";break}if(!s)continue;if(o.cue=new(o.vttjs.VTTCue||o.window.VTTCue)(0,0,""),o.state="CUE",s.indexOf("-->")===-1){o.cue.id=s;continue}case"CUE":try{xe(s,o.cue,o.regionList)}catch(c){o.reportOrThrowError(c),o.cue=null,o.state="BADCUE";continue}o.state="CUETEXT";continue;case"CUETEXT":var u=s.indexOf("-->")!==-1;if(!s||u&&(l=!0)){o.oncue&&o.oncue(o.cue),o.cue=null,o.state="ID";continue}o.cue.text&&(o.cue.text+="\n"),o.cue.text+=s;continue;case"BADCUE":s||(o.state="ID");continue}}}catch(c){o.reportOrThrowError(c),"CUETEXT"===o.state&&o.cue&&o.oncue&&o.oncue(o.cue),o.cue=null,o.state="INITIAL"===o.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){var e=this;try{if(e.buffer+=e.decoder.decode(),(e.cue||"HEADER"===e.state)&&(e.buffer+="\n\n",e.parse()),"INITIAL"===e.state)throw new be(be.Errors.BadSignature)}catch(t){e.reportOrThrowError(t)}return e.onflush&&e.onflush(),this}};var $n=Oe,Ln="auto",In={"":!0,lr:!0,rl:!0},zn={start:!0,middle:!0,end:!0,left:!0,right:!0};Le.prototype.getCueAsHTML=function(){return WebVTT.convertCueToDOMTree(window,this.text)};var Hn=Le,Fn={"":!0,up:!0},Rn=He,Bn=e(function(e){var t=e.exports={WebVTT:$n,VTTCue:Hn,VTTRegion:Rn};ot.vttjs=t,ot.WebVTT=t.WebVTT;var i=t.VTTCue,n=t.VTTRegion,r=ot.VTTCue,o=ot.VTTRegion;t.shim=function(){ot.VTTCue=i,ot.VTTRegion=n},t.restore=function(){ot.VTTCue=r,ot.VTTRegion=o},ot.VTTCue||t.shim()}),qn=function(e){function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};$t(this,t),i.reportTouchActivity=!1;var r=It(this,e.call(this,null,i,n));return r.hasStarted_=!1,r.on("playing",function(){this.hasStarted_=!0}),r.on("loadstart",function(){this.hasStarted_=!1}),Sn.names.forEach(function(e){var t=Sn[e];i&&i[t.getterName]&&(r[t.privateName]=i[t.getterName])}),r.featuresProgressEvents||r.manualProgressOn(),r.featuresTimeupdateEvents||r.manualTimeUpdatesOn(),["Text","Audio","Video"].forEach(function(e){i["native"+e+"Tracks"]===!1&&(r["featuresNative"+e+"Tracks"]=!1)}),i.nativeCaptions===!1||i.nativeTextTracks===!1?r.featuresNativeTextTracks=!1:i.nativeCaptions!==!0&&i.nativeTextTracks!==!0||(r.featuresNativeTextTracks=!0),r.featuresNativeTextTracks||r.emulateTextTracks(),r.autoRemoteTextTracks_=new Sn.text.ListClass,r.initTrackListeners(),i.nativeControlsForTouch||r.emitTapEvents(),r.constructor&&(r.name_=r.constructor.name||"Unknown Tech"),r}return Lt(t,e),t.prototype.manualProgressOn=function(){this.on("durationchange",this.onDurationChange),this.manualProgress=!0,this.one("ready",this.trackProgress)},t.prototype.manualProgressOff=function(){this.manualProgress=!1,this.stopTrackingProgress(),this.off("durationchange",this.onDurationChange)},t.prototype.trackProgress=function(e){this.stopTrackingProgress(),this.progressInterval=this.setInterval(li(this,function(){var e=this.bufferedPercent();this.bufferedPercent_!==e&&this.trigger("progress"),this.bufferedPercent_=e,1===e&&this.stopTrackingProgress()}),500)},t.prototype.onDurationChange=function(e){this.duration_=this.duration()},t.prototype.buffered=function(){return ie(0,0)},t.prototype.bufferedPercent=function(){return ne(this.buffered(),this.duration_)},t.prototype.stopTrackingProgress=function(){this.clearInterval(this.progressInterval)},t.prototype.manualTimeUpdatesOn=function(){this.manualTimeUpdates=!0,this.on("play",this.trackCurrentTime),this.on("pause",this.stopTrackingCurrentTime)},t.prototype.manualTimeUpdatesOff=function(){this.manualTimeUpdates=!1,this.stopTrackingCurrentTime(),this.off("play",this.trackCurrentTime),this.off("pause",this.stopTrackingCurrentTime)},t.prototype.trackCurrentTime=function(){this.currentTimeInterval&&this.stopTrackingCurrentTime(),this.currentTimeInterval=this.setInterval(function(){this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},250)},t.prototype.stopTrackingCurrentTime=function(){this.clearInterval(this.currentTimeInterval),this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},t.prototype.dispose=function(){this.clearTracks(xn.names),this.manualProgress&&this.manualProgressOff(),this.manualTimeUpdates&&this.manualTimeUpdatesOff(),e.prototype.dispose.call(this)},t.prototype.clearTracks=function(e){var t=this;e=[].concat(e),e.forEach(function(e){for(var i=t[e+"Tracks"]()||[],n=i.length;n--;){var r=i[n];"text"===e&&t.removeRemoteTextTrack(r),i.removeTrack(r)}})},t.prototype.cleanupAutoTextTracks=function(){for(var e=this.autoRemoteTextTracks_||[],t=e.length;t--;){var i=e[t];this.removeRemoteTextTrack(i)}},t.prototype.reset=function(){},t.prototype.error=function(e){return void 0!==e&&(this.error_=new re(e),this.trigger("error")),this.error_},t.prototype.played=function(){return this.hasStarted_?ie(0,0):ie()},t.prototype.setCurrentTime=function(){this.manualTimeUpdates&&this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},t.prototype.initTrackListeners=function(){var e=this;xn.names.forEach(function(t){var i=xn[t],n=function(){e.trigger(t+"trackchange")},r=e[i.getterName]();r.addEventListener("removetrack",n),r.addEventListener("addtrack",n),e.on("dispose",function(){r.removeEventListener("removetrack",n),r.removeEventListener("addtrack",n)})})},t.prototype.addWebVttScript_=function(){var e=this;if(!ot.WebVTT)if(ut.body.contains(this.el())){if(!this.options_["vtt.js"]&&o(Bn)&&Object.keys(Bn).length>0)return void this.trigger("vttjsloaded");var t=ut.createElement("script");t.src=this.options_["vtt.js"]||"https://vjs.zencdn.net/vttjs/0.12.4/vtt.min.js",t.onload=function(){e.trigger("vttjsloaded")},t.onerror=function(){e.trigger("vttjserror")},this.on("dispose",function(){t.onload=null,t.onerror=null}),ot.WebVTT=!0,this.el().parentNode.appendChild(t)}else this.ready(this.addWebVttScript_)},t.prototype.emulateTextTracks=function(){var e=this,t=this.textTracks(),i=this.remoteTextTracks(),n=function(e){return t.addTrack(e.track)},r=function(e){return t.removeTrack(e.track)};i.on("addtrack",n),i.on("removetrack",r),this.addWebVttScript_();var o=function(){return e.trigger("texttrackchange")},s=function(){o();for(var e=0;e<t.length;e++){var i=t[e];i.removeEventListener("cuechange",o),"showing"===i.mode&&i.addEventListener("cuechange",o)}};s(),t.addEventListener("change",s),t.addEventListener("addtrack",s),t.addEventListener("removetrack",s),this.on("dispose",function(){i.off("addtrack",n),i.off("removetrack",r),t.removeEventListener("change",s),t.removeEventListener("addtrack",s),t.removeEventListener("removetrack",s);for(var e=0;e<t.length;e++){var a=t[e];a.removeEventListener("cuechange",o)}})},t.prototype.addTextTrack=function(e,t,i){if(!e)throw new Error("TextTrack kind is required but was not provided");return Fe(this,e,t,i)},t.prototype.createRemoteTextTrack=function(e){var t=J(e,{tech:this});return new kn.remoteTextEl.TrackClass(t)},t.prototype.addRemoteTextTrack=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments[1],n=this.createRemoteTextTrack(t);return i!==!0&&i!==!1&&(Vt.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js'),i=!0),this.remoteTextTrackEls().addTrackElement_(n),this.remoteTextTracks().addTrack(n.track),i!==!0&&this.ready(function(){return e.autoRemoteTextTracks_.addTrack(n.track)}),n},t.prototype.removeRemoteTextTrack=function(e){var t=this.remoteTextTrackEls().getTrackElementByTrack_(e);this.remoteTextTrackEls().removeTrackElement_(t),this.remoteTextTracks().removeTrack(e),this.autoRemoteTextTracks_.removeTrack(e)},t.prototype.getVideoPlaybackQuality=function(){return{}},t.prototype.setPoster=function(){},t.prototype.playsinline=function(){},t.prototype.setPlaysinline=function(){},t.prototype.canPlayType=function(){return""},t.canPlayType=function(){return""},t.canPlaySource=function(e,i){return t.canPlayType(e.type)},t.isTech=function(e){return e.prototype instanceof t||e instanceof t||e===t},t.registerTech=function(e,i){if(t.techs_||(t.techs_={}),!t.isTech(i))throw new Error("Tech "+e+" must be a Tech");if(!t.canPlayType)throw new Error("Techs must have a static canPlayType method on them");if(!t.canPlaySource)throw new Error("Techs must have a static canPlaySource method on them");return e=K(e),t.techs_[e]=i,"Tech"!==e&&t.defaultTechOrder_.push(e),i},t.getTech=function(e){if(e)return e=K(e),t.techs_&&t.techs_[e]?t.techs_[e]:ot&&ot.videojs&&ot.videojs[e]?(Vt.warn("The "+e+" tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)"),ot.videojs[e]):void 0},t}(wi);Sn.names.forEach(function(e){var t=Sn[e];qn.prototype[t.getterName]=function(){return this[t.privateName]=this[t.privateName]||new t.ListClass,this[t.privateName]}}),qn.prototype.featuresVolumeControl=!0,qn.prototype.featuresFullscreenResize=!1,qn.prototype.featuresPlaybackRate=!1,qn.prototype.featuresProgressEvents=!1,qn.prototype.featuresTimeupdateEvents=!1,qn.prototype.featuresNativeTextTracks=!1,qn.withSourceHandlers=function(e){e.registerSourceHandler=function(t,i){var n=e.sourceHandlers;n||(n=e.sourceHandlers=[]),void 0===i&&(i=n.length),n.splice(i,0,t)},e.canPlayType=function(t){for(var i=e.sourceHandlers||[],n=void 0,r=0;r<i.length;r++)if(n=i[r].canPlayType(t))return n;return""},e.selectSourceHandler=function(t,i){for(var n=e.sourceHandlers||[],r=void 0,o=0;o<n.length;o++)if(r=n[o].canHandleSource(t,i))return n[o];return null},e.canPlaySource=function(t,i){var n=e.selectSourceHandler(t,i);return n?n.canHandleSource(t,i):""};var t=["seekable","duration"];t.forEach(function(e){var t=this[e];"function"==typeof t&&(this[e]=function(){return this.sourceHandler_&&this.sourceHandler_[e]?this.sourceHandler_[e].apply(this.sourceHandler_,arguments):t.apply(this,arguments)})},e.prototype),e.prototype.setSource=function(t){var i=e.selectSourceHandler(t,this.options_);i||(e.nativeSourceHandler?i=e.nativeSourceHandler:Vt.error("No source hander found for the current source.")),this.disposeSourceHandler(),this.off("dispose",this.disposeSourceHandler),i!==e.nativeSourceHandler&&(this.currentSource_=t),this.sourceHandler_=i.handleSource(t,this,this.options_),this.on("dispose",this.disposeSourceHandler)},e.prototype.disposeSourceHandler=function(){this.currentSource_&&(this.clearTracks(["audio","video"]),this.currentSource_=null),this.cleanupAutoTextTracks(),this.sourceHandler_&&(this.sourceHandler_.dispose&&this.sourceHandler_.dispose(),this.sourceHandler_=null)}},wi.registerComponent("Tech",qn),qn.registerTech("Tech",qn),qn.defaultTechOrder_=[];var Wn={},Vn={buffered:1,currentTime:1,duration:1,seekable:1,played:1},Xn={setCurrentTime:1},Yn=function Do(e){if(Array.isArray(e)){var t=[];e.forEach(function(e){e=Do(e),Array.isArray(e)?t=t.concat(e):r(e)&&t.push(e)}),e=t}else e="string"==typeof e&&e.trim()?[{src:e}]:r(e)&&"string"==typeof e.src&&e.src&&e.src.trim()?[e]:[];return e},Gn=function(e){function t(i,n,r){$t(this,t);var o=J({createEl:!1},n),s=It(this,e.call(this,i,o,r));if(n.playerOptions.sources&&0!==n.playerOptions.sources.length)i.src(n.playerOptions.sources);else for(var a=0,l=n.playerOptions.techOrder;a<l.length;a++){var c=K(l[a]),u=qn.getTech(c);if(c||(u=wi.getComponent(c)),u&&u.isSupported()){i.loadTech_(c);break}}return s}return Lt(t,e),t}(wi);wi.registerComponent("MediaLoader",Gn);var Un=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.emitTapEvents(),r.enable(),r}return Lt(t,e),t.prototype.createEl=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};i=n({innerHTML:'<span aria-hidden="true" class="vjs-icon-placeholder"></span>',className:this.buildCSSClass(),tabIndex:0},i),"button"===t&&Vt.error("Creating a ClickableComponent with an HTML element of "+t+" is not supported; use a Button instead."),r=n({role:"button","aria-live":"polite"},r),this.tabIndex_=i.tabIndex;var o=e.prototype.createEl.call(this,t,i,r);return this.createControlTextEl(o),o},t.prototype.createControlTextEl=function(e){
return this.controlTextEl_=f("span",{className:"vjs-control-text"}),e&&e.appendChild(this.controlTextEl_),this.controlText(this.controlText_,e),this.controlTextEl_},t.prototype.controlText=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.el();if(!e)return this.controlText_||"Need Text";var i=this.localize(e);this.controlText_=e,v(this.controlTextEl_,i),this.nonIconControl||t.setAttribute("title",i)},t.prototype.buildCSSClass=function(){return"vjs-control vjs-button "+e.prototype.buildCSSClass.call(this)},t.prototype.enable=function(){this.enabled_||(this.enabled_=!0,this.removeClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","false"),"undefined"!=typeof this.tabIndex_&&this.el_.setAttribute("tabIndex",this.tabIndex_),this.on(["tap","click"],this.handleClick),this.on("focus",this.handleFocus),this.on("blur",this.handleBlur))},t.prototype.disable=function(){this.enabled_=!1,this.addClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","true"),"undefined"!=typeof this.tabIndex_&&this.el_.removeAttribute("tabIndex"),this.off(["tap","click"],this.handleClick),this.off("focus",this.handleFocus),this.off("blur",this.handleBlur)},t.prototype.handleClick=function(e){},t.prototype.handleFocus=function(e){q(ut,"keydown",li(this,this.handleKeyPress))},t.prototype.handleKeyPress=function(t){32===t.which||13===t.which?(t.preventDefault(),this.trigger("click")):e.prototype.handleKeyPress&&e.prototype.handleKeyPress.call(this,t)},t.prototype.handleBlur=function(e){W(ut,"keydown",li(this,this.handleKeyPress))},t}(wi);wi.registerComponent("ClickableComponent",Un);var Kn=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.update(),i.on("posterchange",li(r,r.update)),r}return Lt(t,e),t.prototype.dispose=function(){this.player().off("posterchange",this.update),e.prototype.dispose.call(this)},t.prototype.createEl=function(){var e=f("div",{className:"vjs-poster",tabIndex:-1});return Ot||(this.fallbackImg_=f("img"),e.appendChild(this.fallbackImg_)),e},t.prototype.update=function(e){var t=this.player().poster();this.setSrc(t),t?this.show():this.hide()},t.prototype.setSrc=function(e){if(this.fallbackImg_)this.fallbackImg_.src=e;else{var t="";e&&(t='url("'+e+'")'),this.el_.style.backgroundImage=t}},t.prototype.handleClick=function(e){this.player_.controls()&&(this.player_.paused()?this.player_.play():this.player_.pause())},t}(Un);wi.registerComponent("PosterImage",Kn);var Qn="#222",Jn="#ccc",Zn={monospace:"monospace",sansSerif:"sans-serif",serif:"serif",monospaceSansSerif:'"Andale Mono", "Lucida Console", monospace',monospaceSerif:'"Courier New", monospace',proportionalSansSerif:"sans-serif",proportionalSerif:"serif",casual:'"Comic Sans MS", Impact, fantasy',script:'"Monotype Corsiva", cursive',smallcaps:'"Andale Mono", "Lucida Console", monospace, sans-serif'},er=function(e){function t(i,n,r){$t(this,t);var o=It(this,e.call(this,i,n,r));return i.on("loadstart",li(o,o.toggleDisplay)),i.on("texttrackchange",li(o,o.updateDisplay)),i.on("loadstart",li(o,o.preselectTrack)),i.ready(li(o,function(){if(i.tech_&&i.tech_.featuresNativeTextTracks)return void this.hide();i.on("fullscreenchange",li(this,this.updateDisplay));for(var e=this.options_.playerOptions.tracks||[],t=0;t<e.length;t++)this.player_.addRemoteTextTrack(e[t],!0);this.preselectTrack()})),o}return Lt(t,e),t.prototype.preselectTrack=function(){for(var e={captions:1,subtitles:1},t=this.player_.textTracks(),i=this.player_.cache_.selectedLanguage,n=void 0,r=void 0,o=void 0,s=0;s<t.length;s++){var a=t[s];i&&i.enabled&&i.language===a.language?a.kind===i.kind?o=a:o||(o=a):i&&!i.enabled?(o=null,n=null,r=null):a["default"]&&("descriptions"!==a.kind||n?a.kind in e&&!r&&(r=a):n=a)}o?o.mode="showing":r?r.mode="showing":n&&(n.mode="showing")},t.prototype.toggleDisplay=function(){this.player_.tech_&&this.player_.tech_.featuresNativeTextTracks?this.hide():this.show()},t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-text-track-display"},{"aria-live":"off","aria-atomic":"true"})},t.prototype.clearDisplay=function(){"function"==typeof ot.WebVTT&&ot.WebVTT.processCues(ot,[],this.el_)},t.prototype.updateDisplay=function(){var e=this.player_.textTracks();this.clearDisplay();for(var t=null,i=null,n=e.length;n--;){var r=e[n];"showing"===r.mode&&("descriptions"===r.kind?t=r:i=r)}i?("off"!==this.getAttribute("aria-live")&&this.setAttribute("aria-live","off"),this.updateForTrack(i)):t&&("assertive"!==this.getAttribute("aria-live")&&this.setAttribute("aria-live","assertive"),this.updateForTrack(t))},t.prototype.updateForTrack=function(e){if("function"==typeof ot.WebVTT&&e.activeCues){for(var t=this.player_.textTrackSettings.getValues(),i=[],n=0;n<e.activeCues.length;n++)i.push(e.activeCues[n]);ot.WebVTT.processCues(ot,i,this.el_);for(var r=i.length;r--;){var o=i[r];if(o){var s=o.displayState;if(t.color&&(s.firstChild.style.color=t.color),t.textOpacity&&Ue(s.firstChild,"color",Ge(t.color||"#fff",t.textOpacity)),t.backgroundColor&&(s.firstChild.style.backgroundColor=t.backgroundColor),t.backgroundOpacity&&Ue(s.firstChild,"backgroundColor",Ge(t.backgroundColor||"#000",t.backgroundOpacity)),t.windowColor&&(t.windowOpacity?Ue(s,"backgroundColor",Ge(t.windowColor,t.windowOpacity)):s.style.backgroundColor=t.windowColor),t.edgeStyle&&("dropshadow"===t.edgeStyle?s.firstChild.style.textShadow="2px 2px 3px "+Qn+", 2px 2px 4px "+Qn+", 2px 2px 5px "+Qn:"raised"===t.edgeStyle?s.firstChild.style.textShadow="1px 1px "+Qn+", 2px 2px "+Qn+", 3px 3px "+Qn:"depressed"===t.edgeStyle?s.firstChild.style.textShadow="1px 1px "+Jn+", 0 1px "+Jn+", -1px -1px "+Qn+", 0 -1px "+Qn:"uniform"===t.edgeStyle&&(s.firstChild.style.textShadow="0 0 4px "+Qn+", 0 0 4px "+Qn+", 0 0 4px "+Qn+", 0 0 4px "+Qn)),t.fontPercent&&1!==t.fontPercent){var a=ot.parseFloat(s.style.fontSize);s.style.fontSize=a*t.fontPercent+"px",s.style.height="auto",s.style.top="auto",s.style.bottom="2px"}t.fontFamily&&"default"!==t.fontFamily&&("small-caps"===t.fontFamily?s.firstChild.style.fontVariant="small-caps":s.firstChild.style.fontFamily=Zn[t.fontFamily])}}}},t}(wi);wi.registerComponent("TextTrackDisplay",er);var tr=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-loading-spinner",dir:"ltr"})},t}(wi);wi.registerComponent("LoadingSpinner",tr);var ir=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.createEl=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};e="button",t=n({innerHTML:'<span aria-hidden="true" class="vjs-icon-placeholder"></span>',className:this.buildCSSClass()},t),i=n({type:"button","aria-live":"polite"},i);var r=wi.prototype.createEl.call(this,e,t,i);return this.createControlTextEl(r),r},t.prototype.addChild=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=this.constructor.name;return Vt.warn("Adding an actionable (user controllable) child to a Button ("+i+") is not supported; use a ClickableComponent instead."),wi.prototype.addChild.call(this,e,t)},t.prototype.enable=function(){e.prototype.enable.call(this),this.el_.removeAttribute("disabled")},t.prototype.disable=function(){e.prototype.disable.call(this),this.el_.setAttribute("disabled","disabled")},t.prototype.handleKeyPress=function(t){32!==t.which&&13!==t.which&&e.prototype.handleKeyPress.call(this,t)},t}(Un);wi.registerComponent("Button",ir);var nr=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-big-play-button"},t.prototype.handleClick=function(e){var t=this.player_.play(),i=this.player_.getChild("controlBar"),n=i&&i.getChild("playToggle");return n?void(t?t.then(function(){return n.focus()}):this.setTimeout(function(){n.focus()},1)):void this.player_.focus()},t}(ir);nr.prototype.controlText_="Play Video",wi.registerComponent("BigPlayButton",nr);var rr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.controlText(n&&n.controlText||r.localize("Close")),r}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-close-button "+e.prototype.buildCSSClass.call(this)},t.prototype.handleClick=function(e){this.trigger({type:"close",bubbles:!1})},t}(ir);wi.registerComponent("CloseButton",rr);var or=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.on(i,"play",r.handlePlay),r.on(i,"pause",r.handlePause),r.on(i,"ended",r.handleEnded),r}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-play-control "+e.prototype.buildCSSClass.call(this)},t.prototype.handleClick=function(e){this.player_.paused()?this.player_.play():this.player_.pause()},t.prototype.handlePlay=function(e){this.removeClass("vjs-ended"),this.removeClass("vjs-paused"),this.addClass("vjs-playing"),this.controlText("Pause")},t.prototype.handlePause=function(e){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),this.controlText("Play")},t.prototype.handleEnded=function(e){this.removeClass("vjs-playing"),this.addClass("vjs-ended"),this.controlText("Replay")},t}(ir);or.prototype.controlText_="Play",wi.registerComponent("PlayToggle",or);var sr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.throttledUpdateContent=ci(li(r,r.updateContent),25),r.on(i,"timeupdate",r.throttledUpdateContent),r}return Lt(t,e),t.prototype.createEl=function(){var t=e.prototype.createEl.call(this,"div",{className:"vjs-current-time vjs-time-control vjs-control"});return this.contentEl_=f("div",{className:"vjs-current-time-display"},{"aria-live":"off"},f("span",{className:"vjs-control-text",textContent:this.localize("Current Time")})),this.updateTextNode_(),t.appendChild(this.contentEl_),t},t.prototype.updateTextNode_=function(){this.textNode_&&this.contentEl_.removeChild(this.textNode_),this.textNode_=ut.createTextNode(" "+(this.formattedTime_||"0:00")),this.contentEl_.appendChild(this.textNode_)},t.prototype.updateContent=function(e){var t=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime(),i=Ke(t,this.player_.duration());i!==this.formattedTime_&&(this.formattedTime_=i,this.requestAnimationFrame(this.updateTextNode_))},t}(wi);wi.registerComponent("CurrentTimeDisplay",sr);var ar=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.throttledUpdateContent=ci(li(r,r.updateContent),25),r.on(i,["durationchange","loadedmetadata","timeupdate"],r.throttledUpdateContent),r}return Lt(t,e),t.prototype.createEl=function(){var t=e.prototype.createEl.call(this,"div",{className:"vjs-duration vjs-time-control vjs-control"});return this.contentEl_=f("div",{className:"vjs-duration-display"},{"aria-live":"off"},f("span",{className:"vjs-control-text",textContent:this.localize("Duration Time")})),this.updateTextNode_(),t.appendChild(this.contentEl_),t},t.prototype.updateTextNode_=function(){this.textNode_&&this.contentEl_.removeChild(this.textNode_),this.textNode_=ut.createTextNode(" "+(this.formattedTime_||"0:00")),this.contentEl_.appendChild(this.textNode_)},t.prototype.updateContent=function(e){var t=this.player_.duration();t&&this.duration_!==t&&(this.duration_=t,this.formattedTime_=Ke(t),this.requestAnimationFrame(this.updateTextNode_))},t}(wi);wi.registerComponent("DurationDisplay",ar);var lr=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-time-control vjs-time-divider",innerHTML:"<div><span>/</span></div>"})},t}(wi);wi.registerComponent("TimeDivider",lr);var cr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.throttledUpdateContent=ci(li(r,r.updateContent),25),r.on(i,["timeupdate","durationchange"],r.throttledUpdateContent),r}return Lt(t,e),t.prototype.createEl=function(){var t=e.prototype.createEl.call(this,"div",{className:"vjs-remaining-time vjs-time-control vjs-control"});return this.contentEl_=f("div",{className:"vjs-remaining-time-display"},{"aria-live":"off"},f("span",{className:"vjs-control-text",textContent:this.localize("Remaining Time")})),this.updateTextNode_(),t.appendChild(this.contentEl_),t},t.prototype.updateTextNode_=function(){this.textNode_&&this.contentEl_.removeChild(this.textNode_),this.textNode_=ut.createTextNode(" -"+(this.formattedTime_||"0:00")),this.contentEl_.appendChild(this.textNode_)},t.prototype.updateContent=function(e){if(this.player_.duration()){var t=Ke(this.player_.remainingTime());t!==this.formattedTime_&&(this.formattedTime_=t,this.requestAnimationFrame(this.updateTextNode_))}},t}(wi);wi.registerComponent("RemainingTimeDisplay",cr);var ur=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.updateShowing(),r.on(r.player(),"durationchange",r.updateShowing),r}return Lt(t,e),t.prototype.createEl=function(){var t=e.prototype.createEl.call(this,"div",{className:"vjs-live-control vjs-control"});return this.contentEl_=f("div",{className:"vjs-live-display",innerHTML:'<span class="vjs-control-text">'+this.localize("Stream Type")+"</span>"+this.localize("LIVE")},{"aria-live":"off"}),t.appendChild(this.contentEl_),t},t.prototype.updateShowing=function(e){this.player().duration()===1/0?this.show():this.hide()},t}(wi);wi.registerComponent("LiveDisplay",ur);var dr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.bar=r.getChild(r.options_.barName),r.vertical(!!r.options_.vertical),r.on("mousedown",r.handleMouseDown),r.on("touchstart",r.handleMouseDown),r.on("focus",r.handleFocus),r.on("blur",r.handleBlur),r.on("click",r.handleClick),r.on(i,"controlsvisible",r.update),r.playerEvent&&r.on(i,r.playerEvent,r.update),r}return Lt(t,e),t.prototype.createEl=function(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return i.className=i.className+" vjs-slider",i=n({tabIndex:0},i),r=n({role:"slider","aria-valuenow":0,"aria-valuemin":0,"aria-valuemax":100,tabIndex:0},r),e.prototype.createEl.call(this,t,i,r)},t.prototype.handleMouseDown=function(e){var t=this.bar.el_.ownerDocument;e.preventDefault(),_(),this.addClass("vjs-sliding"),this.trigger("slideractive"),this.on(t,"mousemove",this.handleMouseMove),this.on(t,"mouseup",this.handleMouseUp),this.on(t,"touchmove",this.handleMouseMove),this.on(t,"touchend",this.handleMouseUp),this.handleMouseMove(e)},t.prototype.handleMouseMove=function(e){},t.prototype.handleMouseUp=function(){var e=this.bar.el_.ownerDocument;E(),this.removeClass("vjs-sliding"),this.trigger("sliderinactive"),this.off(e,"mousemove",this.handleMouseMove),this.off(e,"mouseup",this.handleMouseUp),this.off(e,"touchmove",this.handleMouseMove),this.off(e,"touchend",this.handleMouseUp),this.update()},t.prototype.update=function(){if(this.el_){var e=this.getPercent(),t=this.bar;if(t){("number"!=typeof e||e!==e||e<0||e===1/0)&&(e=0);var i=(100*e).toFixed(2)+"%",n=t.el().style;return this.vertical()?n.height=i:n.width=i,e}}},t.prototype.calculateDistance=function(e){var t=M(this.el_,e);return this.vertical()?t.y:t.x},t.prototype.handleFocus=function(){this.on(this.bar.el_.ownerDocument,"keydown",this.handleKeyPress)},t.prototype.handleKeyPress=function(e){37===e.which||40===e.which?(e.preventDefault(),this.stepBack()):38!==e.which&&39!==e.which||(e.preventDefault(),this.stepForward())},t.prototype.handleBlur=function(){this.off(this.bar.el_.ownerDocument,"keydown",this.handleKeyPress)},t.prototype.handleClick=function(e){e.stopImmediatePropagation(),e.preventDefault()},t.prototype.vertical=function(e){return void 0===e?this.vertical_||!1:(this.vertical_=!!e,void(this.vertical_?this.addClass("vjs-slider-vertical"):this.addClass("vjs-slider-horizontal")))},t}(wi);wi.registerComponent("Slider",dr);var pr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.partEls_=[],r.on(i,"progress",r.update),r}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-load-progress",innerHTML:'<span class="vjs-control-text"><span>'+this.localize("Loaded")+"</span>: 0%</span>"})},t.prototype.update=function(e){var t=this.player_.buffered(),i=this.player_.duration(),n=this.player_.bufferedEnd(),r=this.partEls_,o=function(e,t){var i=e/t||0;return 100*(i>=1?1:i)+"%"};this.el_.style.width=o(n,i);for(var s=0;s<t.length;s++){var a=t.start(s),l=t.end(s),c=r[s];c||(c=this.el_.appendChild(f()),r[s]=c),c.style.left=o(a,n),c.style.width=o(l-a,n)}for(var u=r.length;u>t.length;u--)this.el_.removeChild(r[u-1]);r.length=t.length},t}(wi);wi.registerComponent("LoadProgressBar",pr);var hr=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-time-tooltip"})},t.prototype.update=function(e,t,i){var n=A(this.el_),r=A(this.player_.el()),o=e.width*t;if(r&&n){var s=e.left-r.left+o,a=e.width-o+(r.right-e.right),l=n.width/2;s<l?l+=l-s:a<l&&(l=a),l<0?l=0:l>n.width&&(l=n.width),this.el_.style.right="-"+l+"px",v(this.el_,i)}},t}(wi);wi.registerComponent("TimeTooltip",hr);var fr=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-play-progress vjs-slider-bar",innerHTML:'<span class="vjs-control-text"><span>'+this.localize("Progress")+"</span>: 0%</span>"})},t.prototype.update=function(e,t){var i=this;this.rafId_&&this.cancelAnimationFrame(this.rafId_),this.rafId_=this.requestAnimationFrame(function(){var n=i.player_.scrubbing()?i.player_.getCache().currentTime:i.player_.currentTime(),r=Ke(n,i.player_.duration()),o=i.getChild("timeTooltip");o&&o.update(e,t,r)})},t}(wi);fr.prototype.options_={children:[]},At&&!(At>8)||mt||bt||fr.prototype.options_.children.push("timeTooltip"),wi.registerComponent("PlayProgressBar",fr);var vr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.update=ci(li(r,r.update),25),r}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-mouse-display"})},t.prototype.update=function(e,t){var i=this;this.rafId_&&this.cancelAnimationFrame(this.rafId_),this.rafId_=this.requestAnimationFrame(function(){var n=i.player_.duration(),r=Ke(t*n,n);i.el_.style.left=e.width*t+"px",i.getChild("timeTooltip").update(e,t,r)})},t}(wi);vr.prototype.options_={children:["timeTooltip"]},wi.registerComponent("MouseTimeDisplay",vr);var gr=5,mr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.update=ci(li(r,r.update),50),r.on(i,["timeupdate","ended"],r.update),r}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-progress-holder"},{"aria-label":this.localize("Progress Bar")})},t.prototype.update=function(){var t=e.prototype.update.call(this),i=this.player_.duration(),n=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime();return this.el_.setAttribute("aria-valuenow",(100*t).toFixed(2)),this.el_.setAttribute("aria-valuetext",this.localize("progress bar timing: currentTime={1} duration={2}",[Ke(n,i),Ke(i,i)],"{1} of {2}")),this.bar.update(A(this.el_),t),t},t.prototype.getPercent=function(){var e=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime(),t=e/this.player_.duration();return t>=1?1:t},t.prototype.handleMouseDown=function(t){this.player_.scrubbing(!0),this.videoWasPlaying=!this.player_.paused(),this.player_.pause(),e.prototype.handleMouseDown.call(this,t)},t.prototype.handleMouseMove=function(e){var t=this.calculateDistance(e)*this.player_.duration();t===this.player_.duration()&&(t-=.1),this.player_.currentTime(t)},t.prototype.handleMouseUp=function(t){e.prototype.handleMouseUp.call(this,t),this.player_.scrubbing(!1),this.videoWasPlaying&&this.player_.play()},t.prototype.stepForward=function(){this.player_.currentTime(this.player_.currentTime()+gr)},t.prototype.stepBack=function(){this.player_.currentTime(this.player_.currentTime()-gr)},t.prototype.handleAction=function(e){this.player_.paused()?this.player_.play():this.player_.pause()},t.prototype.handleKeyPress=function(t){32===t.which||13===t.which?(t.preventDefault(),this.handleAction(t)):e.prototype.handleKeyPress&&e.prototype.handleKeyPress.call(this,t)},t}(dr);mr.prototype.options_={children:["loadProgressBar","playProgressBar"],barName:"playProgressBar"},At&&!(At>8)||mt||bt||mr.prototype.options_.children.splice(1,0,"mouseTimeDisplay"),mr.prototype.playerEvent="timeupdate",wi.registerComponent("SeekBar",mr);var yr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.handleMouseMove=ci(li(r,r.handleMouseMove),25),r.on(r.el_,"mousemove",r.handleMouseMove),r.throttledHandleMouseSeek=ci(li(r,r.handleMouseSeek),25),r.on(["mousedown","touchstart"],r.handleMouseDown),r}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-progress-control vjs-control"})},t.prototype.handleMouseMove=function(e){var t=this.getChild("seekBar"),i=t.getChild("mouseTimeDisplay"),n=t.el(),r=A(n),o=M(n,e).x;o>1?o=1:o<0&&(o=0),i&&i.update(r,o)},t.prototype.handleMouseSeek=function(e){var t=this.getChild("seekBar");t.handleMouseMove(e)},t.prototype.handleMouseDown=function(e){var t=this.el_.ownerDocument;this.on(t,"mousemove",this.throttledHandleMouseSeek),this.on(t,"touchmove",this.throttledHandleMouseSeek),this.on(t,"mouseup",this.handleMouseUp),this.on(t,"touchend",this.handleMouseUp)},t.prototype.handleMouseUp=function(e){var t=this.el_.ownerDocument;this.off(t,"mousemove",this.throttledHandleMouseSeek),this.off(t,"touchmove",this.throttledHandleMouseSeek),this.off(t,"mouseup",this.handleMouseUp),this.off(t,"touchend",this.handleMouseUp)},t}(wi);yr.prototype.options_={children:["seekBar"]},wi.registerComponent("ProgressControl",yr);var br=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.on(i,"fullscreenchange",r.handleFullscreenChange),r}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-fullscreen-control "+e.prototype.buildCSSClass.call(this)},t.prototype.handleFullscreenChange=function(e){this.player_.isFullscreen()?this.controlText("Non-Fullscreen"):this.controlText("Fullscreen")},t.prototype.handleClick=function(e){this.player_.isFullscreen()?this.player_.exitFullscreen():this.player_.requestFullscreen()},t}(ir);br.prototype.controlText_="Fullscreen",wi.registerComponent("FullscreenToggle",br);var wr=function(e,t){t.tech_&&!t.tech_.featuresVolumeControl&&e.addClass("vjs-hidden"),e.on(t,"loadstart",function(){t.tech_.featuresVolumeControl?e.removeClass("vjs-hidden"):e.addClass("vjs-hidden")})},Tr=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-volume-level",innerHTML:'<span class="vjs-control-text"></span>'})},t}(wi);wi.registerComponent("VolumeLevel",Tr);var Cr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.on("slideractive",r.updateLastVolume_),r.on(i,"volumechange",r.updateARIAAttributes),i.ready(function(){return r.updateARIAAttributes()}),r}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-volume-bar vjs-slider-bar"},{"aria-label":this.localize("Volume Level"),"aria-live":"polite"})},t.prototype.handleMouseMove=function(e){this.checkMuted(),this.player_.volume(this.calculateDistance(e))},t.prototype.checkMuted=function(){this.player_.muted()&&this.player_.muted(!1)},t.prototype.getPercent=function(){return this.player_.muted()?0:this.player_.volume()},t.prototype.stepForward=function(){this.checkMuted(),this.player_.volume(this.player_.volume()+.1)},t.prototype.stepBack=function(){this.checkMuted(),this.player_.volume(this.player_.volume()-.1)},t.prototype.updateARIAAttributes=function(e){var t=this.player_.muted()?0:this.volumeAsPercentage_();this.el_.setAttribute("aria-valuenow",t),this.el_.setAttribute("aria-valuetext",t+"%")},t.prototype.volumeAsPercentage_=function(){return Math.round(100*this.player_.volume())},t.prototype.updateLastVolume_=function(){var e=this,t=this.player_.volume();this.one("sliderinactive",function(){0===e.player_.volume()&&e.player_.lastVolume_(t)})},t}(dr);Cr.prototype.options_={children:["volumeLevel"],barName:"volumeLevel"},Cr.prototype.playerEvent="volumechange",wi.registerComponent("VolumeBar",Cr);var xr=function(e){function t(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};$t(this,t),n.vertical=n.vertical||!1,("undefined"==typeof n.volumeBar||o(n.volumeBar))&&(n.volumeBar=n.volumeBar||{},n.volumeBar.vertical=n.vertical);var r=It(this,e.call(this,i,n));return wr(r,i),r.throttledHandleMouseMove=ci(li(r,r.handleMouseMove),25),r.on("mousedown",r.handleMouseDown),r.on("touchstart",r.handleMouseDown),r.on(r.volumeBar,["focus","slideractive"],function(){r.volumeBar.addClass("vjs-slider-active"),r.addClass("vjs-slider-active"),r.trigger("slideractive")}),r.on(r.volumeBar,["blur","sliderinactive"],function(){r.volumeBar.removeClass("vjs-slider-active"),r.removeClass("vjs-slider-active"),r.trigger("sliderinactive")}),r}return Lt(t,e),t.prototype.createEl=function(){var t="vjs-volume-horizontal";return this.options_.vertical&&(t="vjs-volume-vertical"),e.prototype.createEl.call(this,"div",{className:"vjs-volume-control vjs-control "+t})},t.prototype.handleMouseDown=function(e){var t=this.el_.ownerDocument;this.on(t,"mousemove",this.throttledHandleMouseMove),this.on(t,"touchmove",this.throttledHandleMouseMove),this.on(t,"mouseup",this.handleMouseUp),this.on(t,"touchend",this.handleMouseUp)},t.prototype.handleMouseUp=function(e){var t=this.el_.ownerDocument;this.off(t,"mousemove",this.throttledHandleMouseMove),this.off(t,"touchmove",this.throttledHandleMouseMove),this.off(t,"mouseup",this.handleMouseUp),this.off(t,"touchend",this.handleMouseUp)},t.prototype.handleMouseMove=function(e){this.volumeBar.handleMouseMove(e)},t}(wi);xr.prototype.options_={children:["volumeBar"]},wi.registerComponent("VolumeControl",xr);var kr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return wr(r,i),r.on(i,["loadstart","volumechange"],r.update),r}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-mute-control "+e.prototype.buildCSSClass.call(this)},t.prototype.handleClick=function(e){var t=this.player_.volume(),i=this.player_.lastVolume_();if(0===t){var n=i<.1?.1:i;this.player_.volume(n),this.player_.muted(!1)}else this.player_.muted(!this.player_.muted())},t.prototype.update=function(e){this.updateIcon_(),this.updateControlText_()},t.prototype.updateIcon_=function(){var e=this.player_.volume(),t=3;0===e||this.player_.muted()?t=0:e<.33?t=1:e<.67&&(t=2);for(var i=0;i<4;i++)b(this.el_,"vjs-vol-"+i);y(this.el_,"vjs-vol-"+t)},t.prototype.updateControlText_=function(){var e=this.player_.muted()||0===this.player_.volume(),t=e?"Unmute":"Mute";this.controlText()!==t&&this.controlText(t)},t}(ir);kr.prototype.controlText_="Mute",wi.registerComponent("MuteToggle",kr);var Sr=function(e){function t(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};$t(this,t),"undefined"!=typeof n.inline?n.inline=n.inline:n.inline=!0,("undefined"==typeof n.volumeControl||o(n.volumeControl))&&(n.volumeControl=n.volumeControl||{},n.volumeControl.vertical=!n.inline);var r=It(this,e.call(this,i,n));return wr(r,i),r.on(r.volumeControl,["slideractive"],r.sliderActive_),r.on(r.muteToggle,"focus",r.sliderActive_),r.on(r.volumeControl,["sliderinactive"],r.sliderInactive_),r.on(r.muteToggle,"blur",r.sliderInactive_),r}return Lt(t,e),t.prototype.sliderActive_=function(){this.addClass("vjs-slider-active")},t.prototype.sliderInactive_=function(){this.removeClass("vjs-slider-active")},t.prototype.createEl=function(){var t="vjs-volume-panel-horizontal";return this.options_.inline||(t="vjs-volume-panel-vertical"),e.prototype.createEl.call(this,"div",{className:"vjs-volume-panel vjs-control "+t})},t}(wi);Sr.prototype.options_={children:["muteToggle","volumeControl"]},wi.registerComponent("VolumePanel",Sr);var _r=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return n&&(r.menuButton_=n.menuButton),r.focusedChild_=-1,r.on("keydown",r.handleKeyPress),r}return Lt(t,e),t.prototype.addItem=function(e){this.addChild(e),e.on("click",li(this,function(t){this.menuButton_&&(this.menuButton_.unpressButton(),"CaptionSettingsMenuItem"!==e.name()&&this.menuButton_.focus())}))},t.prototype.createEl=function(){var t=this.options_.contentElType||"ul";this.contentEl_=f(t,{className:"vjs-menu-content"}),this.contentEl_.setAttribute("role","menu");var i=e.prototype.createEl.call(this,"div",{append:this.contentEl_,className:"vjs-menu"});return i.appendChild(this.contentEl_),q(i,"click",function(e){e.preventDefault(),e.stopImmediatePropagation()}),i},t.prototype.handleKeyPress=function(e){37===e.which||40===e.which?(e.preventDefault(),this.stepForward()):38!==e.which&&39!==e.which||(e.preventDefault(),this.stepBack())},t.prototype.stepForward=function(){var e=0;void 0!==this.focusedChild_&&(e=this.focusedChild_+1),this.focus(e)},t.prototype.stepBack=function(){var e=0;void 0!==this.focusedChild_&&(e=this.focusedChild_-1),this.focus(e)},t.prototype.focus=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=this.children().slice(),i=t.length&&t[0].className&&/vjs-menu-title/.test(t[0].className);i&&t.shift(),t.length>0&&(e<0?e=0:e>=t.length&&(e=t.length-1),this.focusedChild_=e,t[e].el_.focus())},t}(wi);wi.registerComponent("Menu",_r);var Er=function(e){function t(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};$t(this,t);var r=It(this,e.call(this,i,n));r.menuButton_=new ir(i,n),r.menuButton_.controlText(r.controlText_),r.menuButton_.el_.setAttribute("aria-haspopup","true");var o=ir.prototype.buildCSSClass();return r.menuButton_.el_.className=r.buildCSSClass()+" "+o,r.menuButton_.removeClass("vjs-control"),r.addChild(r.menuButton_),r.update(),r.enabled_=!0,r.on(r.menuButton_,"tap",r.handleClick),r.on(r.menuButton_,"click",r.handleClick),r.on(r.menuButton_,"focus",r.handleFocus),r.on(r.menuButton_,"blur",r.handleBlur),r.on("keydown",r.handleSubmenuKeyPress),r}return Lt(t,e),t.prototype.update=function(){var e=this.createMenu();this.menu&&this.removeChild(this.menu),this.menu=e,this.addChild(e),this.buttonPressed_=!1,this.menuButton_.el_.setAttribute("aria-expanded","false"),this.items&&this.items.length<=this.hideThreshold_?this.hide():this.show()},t.prototype.createMenu=function(){var e=new _r(this.player_,{menuButton:this});if(this.hideThreshold_=0,this.options_.title){var t=f("li",{className:"vjs-menu-title",innerHTML:K(this.options_.title),tabIndex:-1});this.hideThreshold_+=1,e.children_.unshift(t),g(t,e.contentEl())}if(this.items=this.createItems(),this.items)for(var i=0;i<this.items.length;i++)e.addItem(this.items[i]);return e},t.prototype.createItems=function(){},t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:this.buildWrapperCSSClass()},{})},t.prototype.buildWrapperCSSClass=function(){var t="vjs-menu-button";t+=this.options_.inline===!0?"-inline":"-popup";var i=ir.prototype.buildCSSClass();return"vjs-menu-button "+t+" "+i+" "+e.prototype.buildCSSClass.call(this)},t.prototype.buildCSSClass=function(){var t="vjs-menu-button";return t+=this.options_.inline===!0?"-inline":"-popup","vjs-menu-button "+t+" "+e.prototype.buildCSSClass.call(this)},t.prototype.controlText=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.menuButton_.el();return this.menuButton_.controlText(e,t);
},t.prototype.handleClick=function(e){this.one(this.menu.contentEl(),"mouseleave",li(this,function(e){this.unpressButton(),this.el_.blur()})),this.buttonPressed_?this.unpressButton():this.pressButton()},t.prototype.focus=function(){this.menuButton_.focus()},t.prototype.blur=function(){this.menuButton_.blur()},t.prototype.handleFocus=function(){q(ut,"keydown",li(this,this.handleKeyPress))},t.prototype.handleBlur=function(){W(ut,"keydown",li(this,this.handleKeyPress))},t.prototype.handleKeyPress=function(e){27===e.which||9===e.which?(this.buttonPressed_&&this.unpressButton(),9!==e.which&&(e.preventDefault(),this.menuButton_.el_.focus())):38!==e.which&&40!==e.which||this.buttonPressed_||(this.pressButton(),e.preventDefault())},t.prototype.handleSubmenuKeyPress=function(e){27!==e.which&&9!==e.which||(this.buttonPressed_&&this.unpressButton(),9!==e.which&&(e.preventDefault(),this.menuButton_.el_.focus()))},t.prototype.pressButton=function(){this.enabled_&&(this.buttonPressed_=!0,this.menu.lockShowing(),this.menuButton_.el_.setAttribute("aria-expanded","true"),this.menu.focus())},t.prototype.unpressButton=function(){this.enabled_&&(this.buttonPressed_=!1,this.menu.unlockShowing(),this.menuButton_.el_.setAttribute("aria-expanded","false"))},t.prototype.disable=function(){this.unpressButton(),this.enabled_=!1,this.addClass("vjs-disabled"),this.menuButton_.disable()},t.prototype.enable=function(){this.enabled_=!0,this.removeClass("vjs-disabled"),this.menuButton_.enable()},t}(wi);wi.registerComponent("MenuButton",Er);var Ar=function(e){function t(i,n){$t(this,t);var r=n.tracks,o=It(this,e.call(this,i,n));if(o.items.length<=1&&o.hide(),!r)return It(o);var s=li(o,o.update);return r.addEventListener("removetrack",s),r.addEventListener("addtrack",s),o.player_.on("ready",s),o.player_.on("dispose",function(){r.removeEventListener("removetrack",s),r.removeEventListener("addtrack",s)}),o}return Lt(t,e),t}(Er);wi.registerComponent("TrackButton",Ar);var Pr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.selectable=n.selectable,r.selected(n.selected),r.selectable?r.el_.setAttribute("role","menuitemcheckbox"):r.el_.setAttribute("role","menuitem"),r}return Lt(t,e),t.prototype.createEl=function(t,i,r){return this.nonIconControl=!0,e.prototype.createEl.call(this,"li",n({className:"vjs-menu-item",innerHTML:'<span class="vjs-menu-item-text">'+this.localize(this.options_.label)+"</span>",tabIndex:-1},i),r)},t.prototype.handleClick=function(e){this.selected(!0)},t.prototype.selected=function(e){this.selectable&&(e?(this.addClass("vjs-selected"),this.el_.setAttribute("aria-checked","true"),this.controlText(", selected")):(this.removeClass("vjs-selected"),this.el_.setAttribute("aria-checked","false"),this.controlText(" ")))},t}(Un);wi.registerComponent("MenuItem",Pr);var Mr=function(e){function t(i,n){$t(this,t);var r=n.track,o=i.textTracks();n.label=r.label||r.language||"Unknown",n.selected="showing"===r.mode;var s=It(this,e.call(this,i,n));s.track=r;var a=li(s,s.handleTracksChange),l=li(s,s.handleSelectedLanguageChange);if(i.on(["loadstart","texttrackchange"],a),o.addEventListener("change",a),o.addEventListener("selectedlanguagechange",l),s.on("dispose",function(){o.removeEventListener("change",a),o.removeEventListener("selectedlanguagechange",l)}),void 0===o.onchange){var c=void 0;s.on(["tap","click"],function(){if("object"!==Dt(ot.Event))try{c=new ot.Event("change")}catch(e){}c||(c=ut.createEvent("Event"),c.initEvent("change",!0,!0)),o.dispatchEvent(c)})}return s}return Lt(t,e),t.prototype.handleClick=function(t){var i=this.track.kind,n=this.track.kinds,r=this.player_.textTracks();if(n||(n=[i]),e.prototype.handleClick.call(this,t),r)for(var o=0;o<r.length;o++){var s=r[o];s===this.track&&n.indexOf(s.kind)>-1?"showing"!==s.mode&&(s.mode="showing"):"disabled"!==s.mode&&(s.mode="disabled")}},t.prototype.handleTracksChange=function(e){this.selected("showing"===this.track.mode)},t.prototype.handleSelectedLanguageChange=function(e){if("showing"===this.track.mode){var t=this.player_.cache_.selectedLanguage;if(t&&t.enabled&&t.language===this.track.language&&t.kind!==this.track.kind)return;this.player_.cache_.selectedLanguage={enabled:!0,language:this.track.language,kind:this.track.kind}}},t}(Pr);wi.registerComponent("TextTrackMenuItem",Mr);var jr=function(e){function t(i,n){$t(this,t),n.track={player:i,kind:n.kind,kinds:n.kinds,"default":!1,mode:"disabled"},n.kinds||(n.kinds=[n.kind]),n.label?n.track.label=n.label:n.track.label=n.kinds.join(" and ")+" off",n.selectable=!0;var r=It(this,e.call(this,i,n));return r.selected(!0),r}return Lt(t,e),t.prototype.handleTracksChange=function(e){for(var t=this.player().textTracks(),i=!0,n=0,r=t.length;n<r;n++){var o=t[n];if(this.options_.kinds.indexOf(o.kind)>-1&&"showing"===o.mode){i=!1;break}}this.selected(i)},t.prototype.handleSelectedLanguageChange=function(e){for(var t=this.player().textTracks(),i=!0,n=0,r=t.length;n<r;n++){var o=t[n];if(["captions","descriptions","subtitles"].indexOf(o.kind)>-1&&"showing"===o.mode){i=!1;break}}i&&(this.player_.cache_.selectedLanguage={enabled:!1})},t}(Mr);wi.registerComponent("OffTextTrackMenuItem",jr);var Or=function(e){function t(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $t(this,t),n.tracks=i.textTracks(),It(this,e.call(this,i,n))}return Lt(t,e),t.prototype.createItems=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Mr,i=void 0;this.label_&&(i=this.label_+" off"),e.push(new jr(this.player_,{kinds:this.kinds_,kind:this.kind_,label:i})),this.hideThreshold_+=1;var n=this.player_.textTracks();Array.isArray(this.kinds_)||(this.kinds_=[this.kind_]);for(var r=0;r<n.length;r++){var o=n[r];if(this.kinds_.indexOf(o.kind)>-1){var s=new t(this.player_,{track:o,selectable:!0});s.addClass("vjs-"+o.kind+"-menu-item"),e.push(s)}}return e},t}(Ar);wi.registerComponent("TextTrackButton",Or);var Nr=function(e){function t(i,n){$t(this,t);var r=n.track,o=n.cue,s=i.currentTime();n.selectable=!0,n.label=o.text,n.selected=o.startTime<=s&&s<o.endTime;var a=It(this,e.call(this,i,n));return a.track=r,a.cue=o,r.addEventListener("cuechange",li(a,a.update)),a}return Lt(t,e),t.prototype.handleClick=function(t){e.prototype.handleClick.call(this),this.player_.currentTime(this.cue.startTime),this.update(this.cue.startTime)},t.prototype.update=function(e){var t=this.cue,i=this.player_.currentTime();this.selected(t.startTime<=i&&i<t.endTime)},t}(Pr);wi.registerComponent("ChaptersTrackMenuItem",Nr);var Dr=function(e){function t(i,n,r){return $t(this,t),It(this,e.call(this,i,n,r))}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-chapters-button "+e.prototype.buildCSSClass.call(this)},t.prototype.buildWrapperCSSClass=function(){return"vjs-chapters-button "+e.prototype.buildWrapperCSSClass.call(this)},t.prototype.update=function(t){this.track_&&(!t||"addtrack"!==t.type&&"removetrack"!==t.type)||this.setTrack(this.findChaptersTrack()),e.prototype.update.call(this)},t.prototype.setTrack=function(e){if(this.track_!==e){if(this.updateHandler_||(this.updateHandler_=this.update.bind(this)),this.track_){var t=this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);t&&t.removeEventListener("load",this.updateHandler_),this.track_=null}if(this.track_=e,this.track_){this.track_.mode="hidden";var i=this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);i&&i.addEventListener("load",this.updateHandler_)}}},t.prototype.findChaptersTrack=function(){for(var e=this.player_.textTracks()||[],t=e.length-1;t>=0;t--){var i=e[t];if(i.kind===this.kind_)return i}},t.prototype.getMenuCaption=function(){return this.track_&&this.track_.label?this.track_.label:this.localize(K(this.kind_))},t.prototype.createMenu=function(){return this.options_.title=this.getMenuCaption(),e.prototype.createMenu.call(this)},t.prototype.createItems=function(){var e=[];if(!this.track_)return e;var t=this.track_.cues;if(!t)return e;for(var i=0,n=t.length;i<n;i++){var r=t[i],o=new Nr(this.player_,{track:this.track_,cue:r});e.push(o)}return e},t}(Or);Dr.prototype.kind_="chapters",Dr.prototype.controlText_="Chapters",wi.registerComponent("ChaptersButton",Dr);var $r=function(e){function t(i,n,r){$t(this,t);var o=It(this,e.call(this,i,n,r)),s=i.textTracks(),a=li(o,o.handleTracksChange);return s.addEventListener("change",a),o.on("dispose",function(){s.removeEventListener("change",a)}),o}return Lt(t,e),t.prototype.handleTracksChange=function(e){for(var t=this.player().textTracks(),i=!1,n=0,r=t.length;n<r;n++){var o=t[n];if(o.kind!==this.kind_&&"showing"===o.mode){i=!0;break}}i?this.disable():this.enable()},t.prototype.buildCSSClass=function(){return"vjs-descriptions-button "+e.prototype.buildCSSClass.call(this)},t.prototype.buildWrapperCSSClass=function(){return"vjs-descriptions-button "+e.prototype.buildWrapperCSSClass.call(this)},t}(Or);$r.prototype.kind_="descriptions",$r.prototype.controlText_="Descriptions",wi.registerComponent("DescriptionsButton",$r);var Lr=function(e){function t(i,n,r){return $t(this,t),It(this,e.call(this,i,n,r))}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-subtitles-button "+e.prototype.buildCSSClass.call(this)},t.prototype.buildWrapperCSSClass=function(){return"vjs-subtitles-button "+e.prototype.buildWrapperCSSClass.call(this)},t}(Or);Lr.prototype.kind_="subtitles",Lr.prototype.controlText_="Subtitles",wi.registerComponent("SubtitlesButton",Lr);var Ir=function(e){function t(i,n){$t(this,t),n.track={player:i,kind:n.kind,label:n.kind+" settings",selectable:!1,"default":!1,mode:"disabled"},n.selectable=!1,n.name="CaptionSettingsMenuItem";var r=It(this,e.call(this,i,n));return r.addClass("vjs-texttrack-settings"),r.controlText(", opens "+n.kind+" settings dialog"),r}return Lt(t,e),t.prototype.handleClick=function(e){this.player().getChild("textTrackSettings").open()},t}(Mr);wi.registerComponent("CaptionSettingsMenuItem",Ir);var zr=function(e){function t(i,n,r){return $t(this,t),It(this,e.call(this,i,n,r))}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-captions-button "+e.prototype.buildCSSClass.call(this)},t.prototype.buildWrapperCSSClass=function(){return"vjs-captions-button "+e.prototype.buildWrapperCSSClass.call(this)},t.prototype.createItems=function(){var t=[];return this.player().tech_&&this.player().tech_.featuresNativeTextTracks||(t.push(new Ir(this.player_,{kind:this.kind_})),this.hideThreshold_+=1),e.prototype.createItems.call(this,t)},t}(Or);zr.prototype.kind_="captions",zr.prototype.controlText_="Captions",wi.registerComponent("CaptionsButton",zr);var Hr=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.createEl=function(t,i,r){var o='<span class="vjs-menu-item-text">'+this.localize(this.options_.label);"captions"===this.options_.track.kind&&(o+='\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> '+this.localize("Captions")+"</span>\n      "),o+="</span>";var s=e.prototype.createEl.call(this,t,n({innerHTML:o},i),r);return s},t}(Mr);wi.registerComponent("SubsCapsMenuItem",Hr);var Fr=function(e){function t(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};$t(this,t);var r=It(this,e.call(this,i,n));return r.label_="subtitles",["en","en-us","en-ca","fr-ca"].indexOf(r.player_.language_)>-1&&(r.label_="captions"),r.menuButton_.controlText(K(r.label_)),r}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-subs-caps-button "+e.prototype.buildCSSClass.call(this)},t.prototype.buildWrapperCSSClass=function(){return"vjs-subs-caps-button "+e.prototype.buildWrapperCSSClass.call(this)},t.prototype.createItems=function(){var t=[];return this.player().tech_&&this.player().tech_.featuresNativeTextTracks||(t.push(new Ir(this.player_,{kind:this.label_})),this.hideThreshold_+=1),t=e.prototype.createItems.call(this,t,Hr)},t}(Or);Fr.prototype.kinds_=["captions","subtitles"],Fr.prototype.controlText_="Subtitles",wi.registerComponent("SubsCapsButton",Fr);var Rr=function(e){function t(i,n){$t(this,t);var r=n.track,o=i.audioTracks();n.label=r.label||r.language||"Unknown",n.selected=r.enabled;var s=It(this,e.call(this,i,n));s.track=r;var a=li(s,s.handleTracksChange);return o.addEventListener("change",a),s.on("dispose",function(){o.removeEventListener("change",a)}),s}return Lt(t,e),t.prototype.handleClick=function(t){var i=this.player_.audioTracks();e.prototype.handleClick.call(this,t);for(var n=0;n<i.length;n++){var r=i[n];r.enabled=r===this.track}},t.prototype.handleTracksChange=function(e){this.selected(this.track.enabled)},t}(Pr);wi.registerComponent("AudioTrackMenuItem",Rr);var Br=function(e){function t(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $t(this,t),n.tracks=i.audioTracks(),It(this,e.call(this,i,n))}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-audio-button "+e.prototype.buildCSSClass.call(this)},t.prototype.buildWrapperCSSClass=function(){return"vjs-audio-button "+e.prototype.buildWrapperCSSClass.call(this)},t.prototype.createItems=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this.hideThreshold_=1;for(var t=this.player_.audioTracks(),i=0;i<t.length;i++){var n=t[i];e.push(new Rr(this.player_,{track:n,selectable:!0}))}return e},t}(Ar);Br.prototype.controlText_="Audio Track",wi.registerComponent("AudioTrackButton",Br);var qr=function(e){function t(i,n){$t(this,t);var r=n.rate,o=parseFloat(r,10);n.label=r,n.selected=1===o,n.selectable=!0;var s=It(this,e.call(this,i,n));return s.label=r,s.rate=o,s.on(i,"ratechange",s.update),s}return Lt(t,e),t.prototype.handleClick=function(t){e.prototype.handleClick.call(this),this.player().playbackRate(this.rate)},t.prototype.update=function(e){this.selected(this.player().playbackRate()===this.rate)},t}(Pr);qr.prototype.contentElType="button",wi.registerComponent("PlaybackRateMenuItem",qr);var Wr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.updateVisibility(),r.updateLabel(),r.on(i,"loadstart",r.updateVisibility),r.on(i,"ratechange",r.updateLabel),r}return Lt(t,e),t.prototype.createEl=function(){var t=e.prototype.createEl.call(this);return this.labelEl_=f("div",{className:"vjs-playback-rate-value",innerHTML:1}),t.appendChild(this.labelEl_),t},t.prototype.buildCSSClass=function(){return"vjs-playback-rate "+e.prototype.buildCSSClass.call(this)},t.prototype.buildWrapperCSSClass=function(){return"vjs-playback-rate "+e.prototype.buildWrapperCSSClass.call(this)},t.prototype.createMenu=function(){var e=new _r(this.player()),t=this.playbackRates();if(t)for(var i=t.length-1;i>=0;i--)e.addChild(new qr(this.player(),{rate:t[i]+"x"}));return e},t.prototype.updateARIAAttributes=function(){this.el().setAttribute("aria-valuenow",this.player().playbackRate())},t.prototype.handleClick=function(e){for(var t=this.player().playbackRate(),i=this.playbackRates(),n=i[0],r=0;r<i.length;r++)if(i[r]>t){n=i[r];break}this.player().playbackRate(n)},t.prototype.playbackRates=function(){return this.options_.playbackRates||this.options_.playerOptions&&this.options_.playerOptions.playbackRates},t.prototype.playbackRateSupported=function(){return this.player().tech_&&this.player().tech_.featuresPlaybackRate&&this.playbackRates()&&this.playbackRates().length>0},t.prototype.updateVisibility=function(e){this.playbackRateSupported()?this.removeClass("vjs-hidden"):this.addClass("vjs-hidden")},t.prototype.updateLabel=function(e){this.playbackRateSupported()&&(this.labelEl_.innerHTML=this.player().playbackRate()+"x")},t}(Er);Wr.prototype.controlText_="Playback Rate",wi.registerComponent("PlaybackRateMenuButton",Wr);var Vr=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-spacer "+e.prototype.buildCSSClass.call(this)},t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:this.buildCSSClass()})},t}(wi);wi.registerComponent("Spacer",Vr);var Xr=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-custom-control-spacer "+e.prototype.buildCSSClass.call(this)},t.prototype.createEl=function(){var t=e.prototype.createEl.call(this,{className:this.buildCSSClass()});return t.innerHTML="&nbsp;",t},t}(Vr);wi.registerComponent("CustomControlSpacer",Xr);var Yr=function(e){function t(){return $t(this,t),It(this,e.apply(this,arguments))}return Lt(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-control-bar",dir:"ltr"},{role:"group"})},t}(wi);Yr.prototype.options_={children:["playToggle","volumePanel","currentTimeDisplay","timeDivider","durationDisplay","progressControl","liveDisplay","remainingTimeDisplay","customControlSpacer","playbackRateMenuButton","chaptersButton","descriptionsButton","subsCapsButton","audioTrackButton","fullscreenToggle"]},wi.registerComponent("ControlBar",Yr);var Gr=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n));return r.on(i,"error",r.open),r}return Lt(t,e),t.prototype.buildCSSClass=function(){return"vjs-error-display "+e.prototype.buildCSSClass.call(this)},t.prototype.content=function(){var e=this.player().error();return e?this.localize(e.message):""},t}($i);Gr.prototype.options_=J($i.prototype.options_,{pauseOnOpen:!1,fillAlways:!0,temporary:!1,uncloseable:!0}),wi.registerComponent("ErrorDisplay",Gr);var Ur="vjs-text-track-settings",Kr=["#000","Black"],Qr=["#00F","Blue"],Jr=["#0FF","Cyan"],Zr=["#0F0","Green"],eo=["#F0F","Magenta"],to=["#F00","Red"],io=["#FFF","White"],no=["#FF0","Yellow"],ro=["1","Opaque"],oo=["0.5","Semi-Transparent"],so=["0","Transparent"],ao={backgroundColor:{selector:".vjs-bg-color > select",id:"captions-background-color-%s",label:"Color",options:[Kr,io,to,Zr,Qr,no,eo,Jr]},backgroundOpacity:{selector:".vjs-bg-opacity > select",id:"captions-background-opacity-%s",label:"Transparency",options:[ro,oo,so]},color:{selector:".vjs-fg-color > select",id:"captions-foreground-color-%s",label:"Color",options:[io,Kr,to,Zr,Qr,no,eo,Jr]},edgeStyle:{selector:".vjs-edge-style > select",id:"%s",label:"Text Edge Style",options:[["none","None"],["raised","Raised"],["depressed","Depressed"],["uniform","Uniform"],["dropshadow","Dropshadow"]]},fontFamily:{selector:".vjs-font-family > select",id:"captions-font-family-%s",label:"Font Family",options:[["proportionalSansSerif","Proportional Sans-Serif"],["monospaceSansSerif","Monospace Sans-Serif"],["proportionalSerif","Proportional Serif"],["monospaceSerif","Monospace Serif"],["casual","Casual"],["script","Script"],["small-caps","Small Caps"]]},fontPercent:{selector:".vjs-font-percent > select",id:"captions-font-size-%s",label:"Font Size",options:[["0.50","50%"],["0.75","75%"],["1.00","100%"],["1.25","125%"],["1.50","150%"],["1.75","175%"],["2.00","200%"],["3.00","300%"],["4.00","400%"]],"default":2,parser:function(e){return"1.00"===e?null:Number(e)}},textOpacity:{selector:".vjs-text-opacity > select",id:"captions-foreground-opacity-%s",label:"Transparency",options:[ro,oo]},windowColor:{selector:".vjs-window-color > select",id:"captions-window-color-%s",label:"Color"},windowOpacity:{selector:".vjs-window-opacity > select",id:"captions-window-opacity-%s",label:"Transparency",options:[so,oo,ro]}};ao.windowColor.options=ao.backgroundColor.options;var lo=function(e){function n(i,r){$t(this,n),r.temporary=!1;var o=It(this,e.call(this,i,r));return o.updateDisplay=li(o,o.updateDisplay),o.fill(),o.hasBeenOpened_=o.hasBeenFilled_=!0,o.endDialog=f("p",{className:"vjs-control-text",textContent:o.localize("End of dialog window.")}),o.el().appendChild(o.endDialog),o.setDefaults(),void 0===r.persistTextTrackSettings&&(o.options_.persistTextTrackSettings=o.options_.playerOptions.persistTextTrackSettings),o.on(o.$(".vjs-done-button"),"click",function(){o.saveSettings(),o.close()}),o.on(o.$(".vjs-default-button"),"click",function(){o.setDefaults(),o.updateDisplay()}),t(ao,function(e){o.on(o.$(e.selector),"change",o.updateDisplay)}),o.options_.persistTextTrackSettings&&o.restoreSettings(),o}return Lt(n,e),n.prototype.createElSelect_=function(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"label",r=ao[e],o=r.id.replace("%s",this.id_);return["<"+n+' id="'+o+'" class="'+("label"===n?"vjs-label":"")+'">',this.localize(r.label),"</"+n+">",'<select aria-labelledby="'+i+" "+o+'">'].concat(r.options.map(function(e){var n=o+"-"+e[1];return['<option id="'+n+'" value="'+e[0]+'" ','aria-labelledby="'+i+" "+o+" "+n+'">',t.localize(e[1]),"</option>"].join("")})).concat("</select>").join("")},n.prototype.createElFgColor_=function(){var e="captions-text-legend-"+this.id_;return['<fieldset class="vjs-fg-color vjs-track-setting">','<legend id="'+e+'">',this.localize("Text"),"</legend>",this.createElSelect_("color",e),'<span class="vjs-text-opacity vjs-opacity">',this.createElSelect_("textOpacity",e),"</span>","</fieldset>"].join("")},n.prototype.createElBgColor_=function(){var e="captions-background-"+this.id_;return['<fieldset class="vjs-bg-color vjs-track-setting">','<legend id="'+e+'">',this.localize("Background"),"</legend>",this.createElSelect_("backgroundColor",e),'<span class="vjs-bg-opacity vjs-opacity">',this.createElSelect_("backgroundOpacity",e),"</span>","</fieldset>"].join("")},n.prototype.createElWinColor_=function(){var e="captions-window-"+this.id_;return['<fieldset class="vjs-window-color vjs-track-setting">','<legend id="'+e+'">',this.localize("Window"),"</legend>",this.createElSelect_("windowColor",e),'<span class="vjs-window-opacity vjs-opacity">',this.createElSelect_("windowOpacity",e),"</span>","</fieldset>"].join("")},n.prototype.createElColors_=function(){return f("div",{className:"vjs-track-settings-colors",innerHTML:[this.createElFgColor_(),this.createElBgColor_(),this.createElWinColor_()].join("")})},n.prototype.createElFont_=function(){return f("div",{className:'vjs-track-settings-font">',innerHTML:['<fieldset class="vjs-font-percent vjs-track-setting">',this.createElSelect_("fontPercent","","legend"),"</fieldset>",'<fieldset class="vjs-edge-style vjs-track-setting">',this.createElSelect_("edgeStyle","","legend"),"</fieldset>",'<fieldset class="vjs-font-family vjs-track-setting">',this.createElSelect_("fontFamily","","legend"),"</fieldset>"].join("")})},n.prototype.createElControls_=function(){var e=this.localize("restore all settings to the default values");return f("div",{className:"vjs-track-settings-controls",innerHTML:['<button class="vjs-default-button" title="'+e+'">',this.localize("Reset"),'<span class="vjs-control-text"> '+e+"</span>","</button>",'<button class="vjs-done-button">'+this.localize("Done")+"</button>"].join("")})},n.prototype.content=function(){return[this.createElColors_(),this.createElFont_(),this.createElControls_()]},n.prototype.label=function(){return this.localize("Caption Settings Dialog")},n.prototype.description=function(){return this.localize("Beginning of dialog window. Escape will cancel and close the window.")},n.prototype.buildCSSClass=function(){return e.prototype.buildCSSClass.call(this)+" vjs-text-track-settings"},n.prototype.getValues=function(){var e=this;return i(ao,function(t,i,n){var r=Je(e.$(i.selector),i.parser);return void 0!==r&&(t[n]=r),t},{})},n.prototype.setValues=function(e){var i=this;t(ao,function(t,n){Ze(i.$(t.selector),e[n],t.parser)})},n.prototype.setDefaults=function(){var e=this;t(ao,function(t){var i=t.hasOwnProperty("default")?t["default"]:0;e.$(t.selector).selectedIndex=i})},n.prototype.restoreSettings=function(){var e=void 0;try{e=JSON.parse(ot.localStorage.getItem(Ur))}catch(t){Vt.warn(t)}e&&this.setValues(e)},n.prototype.saveSettings=function(){if(this.options_.persistTextTrackSettings){var e=this.getValues();try{Object.keys(e).length?ot.localStorage.setItem(Ur,JSON.stringify(e)):ot.localStorage.removeItem(Ur)}catch(t){Vt.warn(t)}}},n.prototype.updateDisplay=function(){var e=this.player_.getChild("textTrackDisplay");e&&e.updateDisplay()},n.prototype.conditionalBlur_=function(){this.previouslyActiveEl_=null,this.off(ut,"keydown",this.handleKeyDown);var e=this.player_.controlBar,t=e&&e.subsCapsButton,i=e&&e.captionsButton;t?t.focus():i&&i.focus()},n}($i);wi.registerComponent("TextTrackSettings",lo);var co=zt(["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n            This may prevent text tracks from loading."],["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n            This may prevent text tracks from loading."]),uo=function(e){function t(i,n){$t(this,t);var r=It(this,e.call(this,i,n)),o=i.source,s=!1;if(o&&(r.el_.currentSrc!==o.src||i.tag&&3===i.tag.initNetworkState_)?r.setSource(o):r.handleLateInit_(r.el_),r.el_.hasChildNodes()){for(var a=r.el_.childNodes,l=a.length,c=[];l--;){var u=a[l],d=u.nodeName.toLowerCase();"track"===d&&(r.featuresNativeTextTracks?(r.remoteTextTrackEls().addTrackElement_(u),r.remoteTextTracks().addTrack(u.track),r.textTracks().addTrack(u.track),s||r.el_.hasAttribute("crossorigin")||!Zi(u.src)||(s=!0)):c.push(u))}for(var p=0;p<c.length;p++)r.el_.removeChild(c[p])}return r.proxyNativeTracks_(),r.featuresNativeTextTracks&&s&&Vt.warn(Xt(co)),(jt||vt||Ct)&&i.nativeControlsForTouch===!0&&r.setControls(!0),r.proxyWebkitFullscreen_(),r.triggerReady(),r}return Lt(t,e),t.prototype.dispose=function(){t.disposeMediaElement(this.el_),e.prototype.dispose.call(this)},t.prototype.proxyNativeTracks_=function(){var e=this;xn.names.forEach(function(t){var i=xn[t],n=e.el()[i.getterName],r=e[i.getterName]();if(e["featuresNative"+i.capitalName+"Tracks"]&&n&&n.addEventListener){var o={change:function(e){r.trigger({type:"change",target:r,currentTarget:r,srcElement:r})},addtrack:function(e){r.addTrack(e.track)},removetrack:function(e){r.removeTrack(e.track)}},s=function(){for(var e=[],t=0;t<r.length;t++){for(var i=!1,o=0;o<n.length;o++)if(n[o]===r[t]){i=!0;break}i||e.push(r[t])}for(;e.length;)r.removeTrack(e.shift())};Object.keys(o).forEach(function(t){var i=o[t];n.addEventListener(t,i),e.on("dispose",function(e){return n.removeEventListener(t,i)})}),e.on("loadstart",s),e.on("dispose",function(t){return e.off("loadstart",s)})}})},t.prototype.createEl=function(){var e=this.options_.tag;if(!e||!this.options_.playerElIngest&&!this.movingMediaElementInDOM){if(e){var i=e.cloneNode(!0);e.parentNode&&e.parentNode.insertBefore(i,e),t.disposeMediaElement(e),e=i}else{e=ut.createElement("video");var r=this.options_.tag&&C(this.options_.tag),o=J({},r);jt&&this.options_.nativeControlsForTouch===!0||delete o.controls,T(e,n(o,{id:this.options_.techId,"class":"vjs-tech"}))}e.playerId=this.options_.playerId}for(var s=["autoplay","preload","loop","muted","playsinline"],a=s.length-1;a>=0;a--){var l=s[a],c={};"undefined"!=typeof this.options_[l]&&(c[l]=this.options_[l]),T(e,c)}return e},t.prototype.handleLateInit_=function(e){if(0!==e.networkState&&3!==e.networkState){if(0===e.readyState){var t=!1,i=function(){t=!0};this.on("loadstart",i);var n=function(){t||this.trigger("loadstart")};return this.on("loadedmetadata",n),void this.ready(function(){this.off("loadstart",i),this.off("loadedmetadata",n),t||this.trigger("loadstart")})}var r=["loadstart"];r.push("loadedmetadata"),e.readyState>=2&&r.push("loadeddata"),e.readyState>=3&&r.push("canplay"),e.readyState>=4&&r.push("canplaythrough"),this.ready(function(){r.forEach(function(e){this.trigger(e)},this)})}},t.prototype.setCurrentTime=function(e){try{this.el_.currentTime=e}catch(t){Vt(t,"Video is not ready. (Video.js)")}},t.prototype.duration=function(){var e=this;if(this.el_.duration===1/0&&bt&&St&&0===this.el_.currentTime){var t=function i(){e.el_.currentTime>0&&(e.el_.duration===1/0&&e.trigger("durationchange"),e.off("timeupdate",i))};return this.on("timeupdate",t),NaN}return this.el_.duration||NaN},t.prototype.width=function(){return this.el_.offsetWidth},t.prototype.height=function(){return this.el_.offsetHeight},t.prototype.proxyWebkitFullscreen_=function(){var e=this;if("webkitDisplayingFullscreen"in this.el_){var t=function(){this.trigger("fullscreenchange",{isFullscreen:!1})},i=function(){"webkitPresentationMode"in this.el_&&"picture-in-picture"!==this.el_.webkitPresentationMode&&(this.one("webkitendfullscreen",t),this.trigger("fullscreenchange",{isFullscreen:!0}))};this.on("webkitbeginfullscreen",i),this.on("dispose",function(){e.off("webkitbeginfullscreen",i),e.off("webkitendfullscreen",t)})}},t.prototype.supportsFullScreen=function(){if("function"==typeof this.el_.webkitEnterFullScreen){var e=ot.navigator&&ot.navigator.userAgent||"";if(/Android/.test(e)||!/Chrome|Mac OS X 10.5/.test(e))return!0}return!1},t.prototype.enterFullScreen=function(){var e=this.el_;e.paused&&e.networkState<=e.HAVE_METADATA?(this.el_.play(),this.setTimeout(function(){e.pause(),e.webkitEnterFullScreen()},0)):e.webkitEnterFullScreen()},t.prototype.exitFullScreen=function(){this.el_.webkitExitFullScreen()},t.prototype.src=function(e){return void 0===e?this.el_.src:void this.setSrc(e)},t.prototype.reset=function(){t.resetMediaElement(this.el_)},t.prototype.currentSrc=function(){return this.currentSource_?this.currentSource_.src:this.el_.currentSrc},t.prototype.setControls=function(e){this.el_.controls=!!e},t.prototype.addTextTrack=function(t,i,n){return this.featuresNativeTextTracks?this.el_.addTextTrack(t,i,n):e.prototype.addTextTrack.call(this,t,i,n)},t.prototype.createRemoteTextTrack=function(t){if(!this.featuresNativeTextTracks)return e.prototype.createRemoteTextTrack.call(this,t);var i=ut.createElement("track");return t.kind&&(i.kind=t.kind),t.label&&(i.label=t.label),(t.language||t.srclang)&&(i.srclang=t.language||t.srclang),t["default"]&&(i["default"]=t["default"]),t.id&&(i.id=t.id),t.src&&(i.src=t.src),i},t.prototype.addRemoteTextTrack=function(t,i){var n=e.prototype.addRemoteTextTrack.call(this,t,i);return this.featuresNativeTextTracks&&this.el().appendChild(n),n},t.prototype.removeRemoteTextTrack=function(t){if(e.prototype.removeRemoteTextTrack.call(this,t),this.featuresNativeTextTracks)for(var i=this.$$("track"),n=i.length;n--;)t!==i[n]&&t!==i[n].track||this.el().removeChild(i[n])},t.prototype.playsinline=function(){return this.el_.hasAttribute("playsinline")},t.prototype.setPlaysinline=function(e){e?this.el_.setAttribute("playsinline","playsinline"):this.el_.removeAttribute("playsinline")},t.prototype.getVideoPlaybackQuality=function(){if("function"==typeof this.el().getVideoPlaybackQuality)return this.el().getVideoPlaybackQuality();var e={};return"undefined"!=typeof this.el().webkitDroppedFrameCount&&"undefined"!=typeof this.el().webkitDecodedFrameCount&&(e.droppedVideoFrames=this.el().webkitDroppedFrameCount,e.totalVideoFrames=this.el().webkitDecodedFrameCount),ot.performance&&"function"==typeof ot.performance.now?e.creationTime=ot.performance.now():ot.performance&&ot.performance.timing&&"number"==typeof ot.performance.timing.navigationStart&&(e.creationTime=ot.Date.now()-ot.performance.timing.navigationStart),e},t}(qn);if(d()){uo.TEST_VID=ut.createElement("video");var po=ut.createElement("track");po.kind="captions",po.srclang="en",po.label="English",uo.TEST_VID.appendChild(po)}uo.isSupported=function(){try{uo.TEST_VID.volume=.5}catch(e){return!1}return!(!uo.TEST_VID||!uo.TEST_VID.canPlayType)},uo.canPlayType=function(e){return uo.TEST_VID.canPlayType(e)},uo.canPlaySource=function(e,t){return uo.canPlayType(e.type)},uo.canControlVolume=function(){try{var e=uo.TEST_VID.volume;return uo.TEST_VID.volume=e/2+.1,e!==uo.TEST_VID.volume}catch(t){return!1}},uo.canControlPlaybackRate=function(){if(bt&&St&&_t<58)return!1;try{var e=uo.TEST_VID.playbackRate;return uo.TEST_VID.playbackRate=e/2+.1,e!==uo.TEST_VID.playbackRate}catch(t){return!1}},uo.supportsNativeTextTracks=function(){
return Mt},uo.supportsNativeVideoTracks=function(){return!(!uo.TEST_VID||!uo.TEST_VID.videoTracks)},uo.supportsNativeAudioTracks=function(){return!(!uo.TEST_VID||!uo.TEST_VID.audioTracks)},uo.Events=["loadstart","suspend","abort","error","emptied","stalled","loadedmetadata","loadeddata","canplay","canplaythrough","playing","waiting","seeking","seeked","ended","durationchange","timeupdate","progress","play","pause","ratechange","resize","volumechange"],uo.prototype.featuresVolumeControl=uo.canControlVolume(),uo.prototype.featuresPlaybackRate=uo.canControlPlaybackRate(),uo.prototype.movingMediaElementInDOM=!mt,uo.prototype.featuresFullscreenResize=!0,uo.prototype.featuresProgressEvents=!0,uo.prototype.featuresTimeupdateEvents=!0,uo.prototype.featuresNativeTextTracks=uo.supportsNativeTextTracks(),uo.prototype.featuresNativeVideoTracks=uo.supportsNativeVideoTracks(),uo.prototype.featuresNativeAudioTracks=uo.supportsNativeAudioTracks();var ho=uo.TEST_VID&&uo.TEST_VID.constructor.prototype.canPlayType,fo=/^application\/(?:x-|vnd\.apple\.)mpegurl/i,vo=/^video\/mp4/i;uo.patchCanPlayType=function(){wt>=4&&!xt?uo.TEST_VID.constructor.prototype.canPlayType=function(e){return e&&fo.test(e)?"maybe":ho.call(this,e)}:Tt&&(uo.TEST_VID.constructor.prototype.canPlayType=function(e){return e&&vo.test(e)?"maybe":ho.call(this,e)})},uo.unpatchCanPlayType=function(){var e=uo.TEST_VID.constructor.prototype.canPlayType;return uo.TEST_VID.constructor.prototype.canPlayType=ho,e},uo.patchCanPlayType(),uo.disposeMediaElement=function(e){if(e){for(e.parentNode&&e.parentNode.removeChild(e);e.hasChildNodes();)e.removeChild(e.firstChild);e.removeAttribute("src"),"function"==typeof e.load&&!function(){try{e.load()}catch(t){}}()}},uo.resetMediaElement=function(e){if(e){for(var t=e.querySelectorAll("source"),i=t.length;i--;)e.removeChild(t[i]);e.removeAttribute("src"),"function"==typeof e.load&&!function(){try{e.load()}catch(t){}}()}},["paused","currentTime","buffered","volume","muted","defaultMuted","poster","preload","autoplay","controls","loop","error","seeking","seekable","ended","defaultMuted","playbackRate","defaultPlaybackRate","played","networkState","readyState","videoWidth","videoHeight"].forEach(function(e){uo.prototype[e]=function(){return this.el_[e]}}),["volume","muted","defaultMuted","src","poster","preload","autoplay","loop","playbackRate","defaultPlaybackRate"].forEach(function(e){uo.prototype["set"+K(e)]=function(t){this.el_[e]=t}}),["pause","load","play"].forEach(function(e){uo.prototype[e]=function(){return this.el_[e]()}}),qn.withSourceHandlers(uo),uo.nativeSourceHandler={},uo.nativeSourceHandler.canPlayType=function(e){try{return uo.TEST_VID.canPlayType(e)}catch(t){return""}},uo.nativeSourceHandler.canHandleSource=function(e,t){if(e.type)return uo.nativeSourceHandler.canPlayType(e.type);if(e.src){var i=Ji(e.src);return uo.nativeSourceHandler.canPlayType("video/"+i)}return""},uo.nativeSourceHandler.handleSource=function(e,t,i){t.setSrc(e.src)},uo.nativeSourceHandler.dispose=function(){},uo.registerSourceHandler(uo.nativeSourceHandler),qn.registerTech("Html5",uo);var go=zt(["\n        Using the tech directly can be dangerous. I hope you know what you're doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      "],["\n        Using the tech directly can be dangerous. I hope you know what you're doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      "]),mo=["progress","abort","suspend","emptied","stalled","loadedmetadata","loadeddata","timeupdate","ratechange","resize","volumechange","texttrackchange"],yo=function(e){function t(i,r,o){if($t(this,t),i.id=i.id||"vjs_video_"+L(),r=n(t.getTagSettings(i),r),r.initChildren=!1,r.createEl=!1,r.reportTouchActivity=!1,!r.language)if("function"==typeof i.closest){var s=i.closest("[lang]");s&&(r.language=s.getAttribute("lang"))}else for(var a=i;a&&1===a.nodeType;){if(C(a).hasOwnProperty("lang")){r.language=a.getAttribute("lang");break}a=a.parentNode}var l=It(this,e.call(this,null,r,o));if(l.isReady_=!1,!l.options_||!l.options_.techOrder||!l.options_.techOrder.length)throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");if(l.tag=i,l.tagAttributes=i&&C(i),l.language(l.options_.language),r.languages){var c={};Object.getOwnPropertyNames(r.languages).forEach(function(e){c[e.toLowerCase()]=r.languages[e]}),l.languages_=c}else l.languages_=t.prototype.options_.languages;l.cache_={},l.poster_=r.poster||"",l.controls_=!!r.controls,l.cache_.lastVolume=1,i.controls=!1,l.scrubbing_=!1,l.el_=l.createEl(),G(l,{eventBusKey:"el_"});var u=J(l.options_);if(r.plugins){var d=r.plugins;Object.keys(d).forEach(function(e){if("function"!=typeof this[e])throw new Error('plugin "'+e+'" does not exist');this[e](d[e])},l)}l.options_.playerOptions=u,l.middleware_=[],l.initChildren(),l.isAudio("audio"===i.nodeName.toLowerCase()),l.controls()?l.addClass("vjs-controls-enabled"):l.addClass("vjs-controls-disabled"),l.el_.setAttribute("role","region"),l.isAudio()?l.el_.setAttribute("aria-label",l.localize("Audio Player")):l.el_.setAttribute("aria-label",l.localize("Video Player")),l.isAudio()&&l.addClass("vjs-audio"),l.flexNotSupported_()&&l.addClass("vjs-no-flex"),mt||l.addClass("vjs-workinghover"),t.players[l.id_]=l;var p=it.split(".")[0];return l.addClass("vjs-v"+p),l.userActive(!0),l.reportUserActivity(),l.listenForUserActivity_(),l.on("fullscreenchange",l.handleFullscreenChange_),l.on("stageclick",l.handleStageClick_),l.changingSrc_=!1,l}return Lt(t,e),t.prototype.dispose=function(){this.trigger("dispose"),this.off("dispose"),this.styleEl_&&this.styleEl_.parentNode&&this.styleEl_.parentNode.removeChild(this.styleEl_),t.players[this.id_]=null,this.tag&&this.tag.player&&(this.tag.player=null),this.el_&&this.el_.player&&(this.el_.player=null),this.tech_&&this.tech_.dispose(),e.prototype.dispose.call(this)},t.prototype.createEl=function(){var t=this.tag,i=void 0,n=this.playerElIngest_=t.parentNode&&t.parentNode.hasAttribute&&t.parentNode.hasAttribute("data-vjs-player");i=n?this.el_=t.parentNode:this.el_=e.prototype.createEl.call(this,"div"),t.setAttribute("tabindex","-1"),t.removeAttribute("width"),t.removeAttribute("height");var r=C(t);if(Object.getOwnPropertyNames(r).forEach(function(e){"class"===e?i.className+=" "+r[e]:i.setAttribute(e,r[e])}),t.playerId=t.id,t.id+="_html5_api",t.className="vjs-tech",t.player=i.player=this,this.addClass("vjs-paused"),ot.VIDEOJS_NO_DYNAMIC_STYLE!==!0){this.styleEl_=si("vjs-styles-dimensions");var o=Gt(".vjs-styles-defaults"),s=Gt("head");s.insertBefore(this.styleEl_,o?o.nextSibling:s.firstChild)}this.width(this.options_.width),this.height(this.options_.height),this.fluid(this.options_.fluid),this.aspectRatio(this.options_.aspectRatio);for(var a=t.getElementsByTagName("a"),l=0;l<a.length;l++){var c=a.item(l);y(c,"vjs-hidden"),c.setAttribute("hidden","hidden")}return t.initNetworkState_=t.networkState,t.parentNode&&!n&&t.parentNode.insertBefore(i,t),g(t,i),this.children_.unshift(t),this.el_.setAttribute("lang",this.language_),this.el_=i,i},t.prototype.width=function(e){return this.dimension("width",e)},t.prototype.height=function(e){return this.dimension("height",e)},t.prototype.dimension=function(e,t){var i=e+"_";if(void 0===t)return this[i]||0;if(""===t)this[i]=void 0;else{var n=parseFloat(t);if(isNaN(n))return void Vt.error('Improper value "'+t+'" supplied for for '+e);this[i]=n}this.updateStyleEl_()},t.prototype.fluid=function(e){return void 0===e?!!this.fluid_:(this.fluid_=!!e,e?this.addClass("vjs-fluid"):this.removeClass("vjs-fluid"),void this.updateStyleEl_())},t.prototype.aspectRatio=function(e){if(void 0===e)return this.aspectRatio_;if(!/^\d+\:\d+$/.test(e))throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");this.aspectRatio_=e,this.fluid(!0),this.updateStyleEl_()},t.prototype.updateStyleEl_=function(){if(ot.VIDEOJS_NO_DYNAMIC_STYLE===!0){var e="number"==typeof this.width_?this.width_:this.options_.width,t="number"==typeof this.height_?this.height_:this.options_.height,i=this.tech_&&this.tech_.el();return void(i&&(e>=0&&(i.width=e),t>=0&&(i.height=t)))}var n=void 0,r=void 0,o=void 0,s=void 0;o=void 0!==this.aspectRatio_&&"auto"!==this.aspectRatio_?this.aspectRatio_:this.videoWidth()>0?this.videoWidth()+":"+this.videoHeight():"16:9";var a=o.split(":"),l=a[1]/a[0];n=void 0!==this.width_?this.width_:void 0!==this.height_?this.height_/l:this.videoWidth()||300,r=void 0!==this.height_?this.height_:n*l,s=/^[^a-zA-Z]/.test(this.id())?"dimensions-"+this.id():this.id()+"-dimensions",this.addClass(s),ai(this.styleEl_,"\n      ."+s+" {\n        width: "+n+"px;\n        height: "+r+"px;\n      }\n\n      ."+s+".vjs-fluid {\n        padding-top: "+100*l+"%;\n      }\n    ")},t.prototype.loadTech_=function(e,t){var i=this;this.tech_&&this.unloadTech_();var r=K(e),o=e.charAt(0).toLowerCase()+e.slice(1);"Html5"!==r&&this.tag&&(qn.getTech("Html5").disposeMediaElement(this.tag),this.tag.player=null,this.tag=null),this.techName_=r,this.isReady_=!1;var s={source:t,nativeControlsForTouch:this.options_.nativeControlsForTouch,playerId:this.id(),techId:this.id()+"_"+r+"_api",autoplay:this.options_.autoplay,playsinline:this.options_.playsinline,preload:this.options_.preload,loop:this.options_.loop,muted:this.options_.muted,poster:this.poster(),language:this.language(),playerElIngest:this.playerElIngest_||!1,"vtt.js":this.options_["vtt.js"]};Sn.names.forEach(function(e){var t=Sn[e];s[t.getterName]=i[t.privateName]}),n(s,this.options_[r]),n(s,this.options_[o]),n(s,this.options_[e.toLowerCase()]),this.tag&&(s.tag=this.tag),t&&t.src===this.cache_.src&&this.cache_.currentTime>0&&(s.startTime=this.cache_.currentTime);var a=qn.getTech(e);if(!a)throw new Error("No Tech named '"+r+"' exists! '"+r+"' should be registered using videojs.registerTech()'");this.tech_=new a(s),this.tech_.ready(li(this,this.handleTechReady_),!0),Oi.jsonToTextTracks(this.textTracksJson_||[],this.tech_),mo.forEach(function(e){i.on(i.tech_,e,i["handleTech"+K(e)+"_"])}),this.on(this.tech_,"loadstart",this.handleTechLoadStart_),this.on(this.tech_,"waiting",this.handleTechWaiting_),this.on(this.tech_,"canplay",this.handleTechCanPlay_),this.on(this.tech_,"canplaythrough",this.handleTechCanPlayThrough_),this.on(this.tech_,"playing",this.handleTechPlaying_),this.on(this.tech_,"ended",this.handleTechEnded_),this.on(this.tech_,"seeking",this.handleTechSeeking_),this.on(this.tech_,"seeked",this.handleTechSeeked_),this.on(this.tech_,"play",this.handleTechPlay_),this.on(this.tech_,"firstplay",this.handleTechFirstPlay_),this.on(this.tech_,"pause",this.handleTechPause_),this.on(this.tech_,"durationchange",this.handleTechDurationChange_),this.on(this.tech_,"fullscreenchange",this.handleTechFullscreenChange_),this.on(this.tech_,"error",this.handleTechError_),this.on(this.tech_,"loadedmetadata",this.updateStyleEl_),this.on(this.tech_,"posterchange",this.handleTechPosterChange_),this.on(this.tech_,"textdata",this.handleTechTextData_),this.usingNativeControls(this.techGet_("controls")),this.controls()&&!this.usingNativeControls()&&this.addTechControlsListeners_(),this.tech_.el().parentNode===this.el()||"Html5"===r&&this.tag||g(this.tech_.el(),this.el()),this.tag&&(this.tag.player=null,this.tag=null)},t.prototype.unloadTech_=function(){var e=this;Sn.names.forEach(function(t){var i=Sn[t];e[i.privateName]=e[i.getterName]()}),this.textTracksJson_=Oi.textTracksToJson(this.tech_),this.isReady_=!1,this.tech_.dispose(),this.tech_=!1},t.prototype.tech=function(e){return void 0===e&&Vt.warn(Xt(go)),this.tech_},t.prototype.addTechControlsListeners_=function(){this.removeTechControlsListeners_(),this.on(this.tech_,"mousedown",this.handleTechClick_),this.on(this.tech_,"touchstart",this.handleTechTouchStart_),this.on(this.tech_,"touchmove",this.handleTechTouchMove_),this.on(this.tech_,"touchend",this.handleTechTouchEnd_),this.on(this.tech_,"tap",this.handleTechTap_)},t.prototype.removeTechControlsListeners_=function(){this.off(this.tech_,"tap",this.handleTechTap_),this.off(this.tech_,"touchstart",this.handleTechTouchStart_),this.off(this.tech_,"touchmove",this.handleTechTouchMove_),this.off(this.tech_,"touchend",this.handleTechTouchEnd_),this.off(this.tech_,"mousedown",this.handleTechClick_)},t.prototype.handleTechReady_=function(){if(this.triggerReady(),this.cache_.volume&&this.techCall_("setVolume",this.cache_.volume),this.handleTechPosterChange_(),this.handleTechDurationChange_(),(this.src()||this.currentSrc())&&this.tag&&this.options_.autoplay&&this.paused()){try{delete this.tag.poster}catch(e){Vt("deleting tag.poster throws in some browsers",e)}this.play()}},t.prototype.handleTechLoadStart_=function(){this.removeClass("vjs-ended"),this.removeClass("vjs-seeking"),this.error(null),this.paused()?(this.hasStarted(!1),this.trigger("loadstart")):(this.trigger("loadstart"),this.trigger("firstplay"))},t.prototype.hasStarted=function(e){return void 0!==e?void(this.hasStarted_!==e&&(this.hasStarted_=e,e?(this.addClass("vjs-has-started"),this.trigger("firstplay")):this.removeClass("vjs-has-started"))):!!this.hasStarted_},t.prototype.handleTechPlay_=function(){this.removeClass("vjs-ended"),this.removeClass("vjs-paused"),this.addClass("vjs-playing"),this.hasStarted(!0),this.trigger("play")},t.prototype.handleTechWaiting_=function(){var e=this;this.addClass("vjs-waiting"),this.trigger("waiting"),this.one("timeupdate",function(){return e.removeClass("vjs-waiting")})},t.prototype.handleTechCanPlay_=function(){this.removeClass("vjs-waiting"),this.trigger("canplay")},t.prototype.handleTechCanPlayThrough_=function(){this.removeClass("vjs-waiting"),this.trigger("canplaythrough")},t.prototype.handleTechPlaying_=function(){this.removeClass("vjs-waiting"),this.trigger("playing")},t.prototype.handleTechSeeking_=function(){this.addClass("vjs-seeking"),this.trigger("seeking")},t.prototype.handleTechSeeked_=function(){this.removeClass("vjs-seeking"),this.trigger("seeked")},t.prototype.handleTechFirstPlay_=function(){this.options_.starttime&&(Vt.warn("Passing the `starttime` option to the player will be deprecated in 6.0"),this.currentTime(this.options_.starttime)),this.addClass("vjs-has-started"),this.trigger("firstplay")},t.prototype.handleTechPause_=function(){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),this.trigger("pause")},t.prototype.handleTechEnded_=function(){this.addClass("vjs-ended"),this.options_.loop?(this.currentTime(0),this.play()):this.paused()||this.pause(),this.trigger("ended")},t.prototype.handleTechDurationChange_=function(){this.duration(this.techGet_("duration"))},t.prototype.handleTechClick_=function(e){0===e.button&&this.controls()&&(this.paused()?this.play():this.pause())},t.prototype.handleTechTap_=function(){this.userActive(!this.userActive())},t.prototype.handleTechTouchStart_=function(){this.userWasActive=this.userActive()},t.prototype.handleTechTouchMove_=function(){this.userWasActive&&this.reportUserActivity()},t.prototype.handleTechTouchEnd_=function(e){e.preventDefault()},t.prototype.handleFullscreenChange_=function(){this.isFullscreen()?this.addClass("vjs-fullscreen"):this.removeClass("vjs-fullscreen")},t.prototype.handleStageClick_=function(){this.reportUserActivity()},t.prototype.handleTechFullscreenChange_=function(e,t){t&&this.isFullscreen(t.isFullscreen),this.trigger("fullscreenchange")},t.prototype.handleTechError_=function(){var e=this.tech_.error();this.error(e)},t.prototype.handleTechTextData_=function(){var e=null;arguments.length>1&&(e=arguments[1]),this.trigger("textdata",e)},t.prototype.getCache=function(){return this.cache_},t.prototype.techCall_=function(e,t){this.ready(function(){if(e in Xn)return Ve(this.middleware_,this.tech_,e,t);try{this.tech_&&this.tech_[e](t)}catch(i){throw Vt(i),i}},!0)},t.prototype.techGet_=function(e){if(this.tech_&&this.tech_.isReady_){if(e in Vn)return We(this.middleware_,this.tech_,e);try{return this.tech_[e]()}catch(t){throw void 0===this.tech_[e]?Vt("Video.js: "+e+" method not defined for "+this.techName_+" playback technology.",t):"TypeError"===t.name?(Vt("Video.js: "+e+" unavailable on "+this.techName_+" playback technology element.",t),this.tech_.isReady_=!1):Vt(t),t}}},t.prototype.play=function(){if(this.changingSrc_)this.ready(function(){var e=this.techGet_("play");void 0!==e&&"function"==typeof e.then&&e.then(null,function(e){})});else{if(this.isReady_&&(this.src()||this.currentSrc()))return this.techGet_("play");this.ready(function(){this.tech_.one("loadstart",function(){var e=this.play();void 0!==e&&"function"==typeof e.then&&e.then(null,function(e){})})})}},t.prototype.pause=function(){this.techCall_("pause")},t.prototype.paused=function(){return this.techGet_("paused")!==!1},t.prototype.played=function(){return this.techGet_("played")||ie(0,0)},t.prototype.scrubbing=function(e){return"undefined"==typeof e?this.scrubbing_:(this.scrubbing_=!!e,void(e?this.addClass("vjs-scrubbing"):this.removeClass("vjs-scrubbing")))},t.prototype.currentTime=function(e){return"undefined"!=typeof e?void this.techCall_("setCurrentTime",e):(this.cache_.currentTime=this.techGet_("currentTime")||0,this.cache_.currentTime)},t.prototype.duration=function(e){return void 0===e?void 0!==this.cache_.duration?this.cache_.duration:NaN:(e=parseFloat(e),e<0&&(e=1/0),void(e!==this.cache_.duration&&(this.cache_.duration=e,e===1/0?this.addClass("vjs-live"):this.removeClass("vjs-live"),this.trigger("durationchange"))))},t.prototype.remainingTime=function(){return this.duration()-this.currentTime()},t.prototype.buffered=function i(){var i=this.techGet_("buffered");return i&&i.length||(i=ie(0,0)),i},t.prototype.bufferedPercent=function(){return ne(this.buffered(),this.duration())},t.prototype.bufferedEnd=function(){var e=this.buffered(),t=this.duration(),i=e.end(e.length-1);return i>t&&(i=t),i},t.prototype.volume=function(e){var t=void 0;return void 0!==e?(t=Math.max(0,Math.min(1,parseFloat(e))),this.cache_.volume=t,this.techCall_("setVolume",t),void(t>0&&this.lastVolume_(t))):(t=parseFloat(this.techGet_("volume")),isNaN(t)?1:t)},t.prototype.muted=function(e){return void 0!==e?void this.techCall_("setMuted",e):this.techGet_("muted")||!1},t.prototype.defaultMuted=function(e){return void 0!==e?this.techCall_("setDefaultMuted",e):this.techGet_("defaultMuted")||!1},t.prototype.lastVolume_=function(e){return void 0!==e&&0!==e?void(this.cache_.lastVolume=e):this.cache_.lastVolume},t.prototype.supportsFullScreen=function(){return this.techGet_("supportsFullScreen")||!1},t.prototype.isFullscreen=function(e){return void 0!==e?void(this.isFullscreen_=!!e):!!this.isFullscreen_},t.prototype.requestFullscreen=function(){var e=Ti;this.isFullscreen(!0),e.requestFullscreen?(q(ut,e.fullscreenchange,li(this,function t(i){this.isFullscreen(ut[e.fullscreenElement]),this.isFullscreen()===!1&&W(ut,e.fullscreenchange,t),this.trigger("fullscreenchange")})),this.el_[e.requestFullscreen]()):this.tech_.supportsFullScreen()?this.techCall_("enterFullScreen"):(this.enterFullWindow(),this.trigger("fullscreenchange"))},t.prototype.exitFullscreen=function(){var e=Ti;this.isFullscreen(!1),e.requestFullscreen?ut[e.exitFullscreen]():this.tech_.supportsFullScreen()?this.techCall_("exitFullScreen"):(this.exitFullWindow(),this.trigger("fullscreenchange"))},t.prototype.enterFullWindow=function(){this.isFullWindow=!0,this.docOrigOverflow=ut.documentElement.style.overflow,q(ut,"keydown",li(this,this.fullWindowOnEscKey)),ut.documentElement.style.overflow="hidden",y(ut.body,"vjs-full-window"),this.trigger("enterFullWindow")},t.prototype.fullWindowOnEscKey=function(e){27===e.keyCode&&(this.isFullscreen()===!0?this.exitFullscreen():this.exitFullWindow())},t.prototype.exitFullWindow=function(){this.isFullWindow=!1,W(ut,"keydown",this.fullWindowOnEscKey),ut.documentElement.style.overflow=this.docOrigOverflow,b(ut.body,"vjs-full-window"),this.trigger("exitFullWindow")},t.prototype.canPlayType=function(e){for(var t=void 0,i=0,n=this.options_.techOrder;i<n.length;i++){var r=n[i],o=qn.getTech(r);if(o||(o=wi.getComponent(r)),o){if(o.isSupported()&&(t=o.canPlayType(e)))return t}else Vt.error('The "'+r+'" tech is undefined. Skipped browser support check for that tech.')}return""},t.prototype.selectSource=function(e){var t=this,i=this.options_.techOrder.map(function(e){return[e,qn.getTech(e)]}).filter(function(e){var t=e[0],i=e[1];return i?i.isSupported():(Vt.error('The "'+t+'" tech is undefined. Skipped browser support check for that tech.'),!1)}),n=function(e,t,i){var n=void 0;return e.some(function(e){return t.some(function(t){if(n=i(e,t))return!0})}),n},r=void 0,o=function(e){return function(t,i){return e(i,t)}},s=function(e,i){var n=e[0],r=e[1];if(r.canPlaySource(i,t.options_[n.toLowerCase()]))return{source:i,tech:n}};return r=this.options_.sourceOrder?n(e,i,o(s)):n(i,e,s),r||!1},t.prototype.src=function(e){var t=this;if("undefined"==typeof e)return this.cache_.src;var i=Yn(e);return i.length?(this.cache_.sources=i,this.changingSrc_=!0,this.cache_.source=i[0],void Be(this,i[0],function(e,n){t.middleware_=n;var r=t.src_(e);return r?i.length>1?t.src(i.slice(1)):(t.setTimeout(function(){this.error({code:4,message:this.localize(this.options_.notSupportedMessage)})},0),void t.triggerReady()):(t.changingSrc_=!1,t.cache_.src=e.src,void qe(n,t.tech_))})):void this.setTimeout(function(){this.error({code:4,message:this.localize(this.options_.notSupportedMessage)})},0)},t.prototype.src_=function(e){var t=this.selectSource([e]);return!t||(Q(t.tech,this.techName_)?(this.ready(function(){this.tech_.constructor.prototype.hasOwnProperty("setSource")?this.techCall_("setSource",e):this.techCall_("src",e.src),"auto"===this.options_.preload&&this.load(),this.options_.autoplay&&this.play()},!0),!1):(this.changingSrc_=!0,this.loadTech_(t.tech,t.source),!1))},t.prototype.load=function(){this.techCall_("load")},t.prototype.reset=function(){this.loadTech_(this.options_.techOrder[0],null),this.techCall_("reset")},t.prototype.currentSources=function(){var e=this.currentSource(),t=[];return 0!==Object.keys(e).length&&t.push(e),this.cache_.sources||t},t.prototype.currentSource=function(){return this.cache_.source||{}},t.prototype.currentSrc=function(){return this.currentSource()&&this.currentSource().src||""},t.prototype.currentType=function(){return this.currentSource()&&this.currentSource().type||""},t.prototype.preload=function(e){return void 0!==e?(this.techCall_("setPreload",e),void(this.options_.preload=e)):this.techGet_("preload")},t.prototype.autoplay=function(e){return void 0!==e?(this.techCall_("setAutoplay",e),void(this.options_.autoplay=e)):this.techGet_("autoplay",e)},t.prototype.playsinline=function(e){return void 0!==e?(this.techCall_("setPlaysinline",e),this.options_.playsinline=e,this):this.techGet_("playsinline")},t.prototype.loop=function(e){return void 0!==e?(this.techCall_("setLoop",e),void(this.options_.loop=e)):this.techGet_("loop")},t.prototype.poster=function(e){return void 0===e?this.poster_:(e||(e=""),this.poster_=e,this.techCall_("setPoster",e),void this.trigger("posterchange"))},t.prototype.handleTechPosterChange_=function(){!this.poster_&&this.tech_&&this.tech_.poster&&(this.poster_=this.tech_.poster()||"",this.trigger("posterchange"))},t.prototype.controls=function(e){return void 0!==e?(e=!!e,void(this.controls_!==e&&(this.controls_=e,this.usingNativeControls()&&this.techCall_("setControls",e),e?(this.removeClass("vjs-controls-disabled"),this.addClass("vjs-controls-enabled"),this.trigger("controlsenabled"),this.usingNativeControls()||this.addTechControlsListeners_()):(this.removeClass("vjs-controls-enabled"),this.addClass("vjs-controls-disabled"),this.trigger("controlsdisabled"),this.usingNativeControls()||this.removeTechControlsListeners_())))):!!this.controls_},t.prototype.usingNativeControls=function(e){return void 0!==e?(e=!!e,void(this.usingNativeControls_!==e&&(this.usingNativeControls_=e,e?(this.addClass("vjs-using-native-controls"),this.trigger("usingnativecontrols")):(this.removeClass("vjs-using-native-controls"),this.trigger("usingcustomcontrols"))))):!!this.usingNativeControls_},t.prototype.error=function(e){return void 0===e?this.error_||null:null===e?(this.error_=e,this.removeClass("vjs-error"),void(this.errorDisplay&&this.errorDisplay.close())):(this.error_=new re(e),this.addClass("vjs-error"),Vt.error("(CODE:"+this.error_.code+" "+re.errorTypes[this.error_.code]+")",this.error_.message,this.error_),void this.trigger("error"))},t.prototype.reportUserActivity=function(e){this.userActivity_=!0},t.prototype.userActive=function(e){return void 0!==e?(e=!!e,void(e!==this.userActive_&&(this.userActive_=e,e?(this.userActivity_=!0,this.removeClass("vjs-user-inactive"),this.addClass("vjs-user-active"),this.trigger("useractive")):(this.userActivity_=!1,this.tech_&&this.tech_.one("mousemove",function(e){e.stopPropagation(),e.preventDefault()}),this.removeClass("vjs-user-active"),this.addClass("vjs-user-inactive"),this.trigger("userinactive"))))):this.userActive_},t.prototype.listenForUserActivity_=function(){var e=void 0,t=void 0,i=void 0,n=li(this,this.reportUserActivity),r=function(e){e.screenX===t&&e.screenY===i||(t=e.screenX,i=e.screenY,n())},o=function(){n(),this.clearInterval(e),e=this.setInterval(n,250)},s=function(t){n(),this.clearInterval(e)};this.on("mousedown",o),this.on("mousemove",r),this.on("mouseup",s),this.on("keydown",n),this.on("keyup",n);var a=void 0;this.setInterval(function(){if(this.userActivity_){this.userActivity_=!1,this.userActive(!0),this.clearTimeout(a);var e=this.options_.inactivityTimeout;e>0&&(a=this.setTimeout(function(){this.userActivity_||this.userActive(!1)},e))}},250)},t.prototype.playbackRate=function(e){return void 0!==e?void this.techCall_("setPlaybackRate",e):this.tech_&&this.tech_.featuresPlaybackRate?this.techGet_("playbackRate"):1},t.prototype.defaultPlaybackRate=function(e){return void 0!==e?this.techCall_("setDefaultPlaybackRate",e):this.tech_&&this.tech_.featuresPlaybackRate?this.techGet_("defaultPlaybackRate"):1},t.prototype.isAudio=function(e){return void 0!==e?void(this.isAudio_=!!e):!!this.isAudio_},t.prototype.addTextTrack=function(e,t,i){if(this.tech_)return this.tech_.addTextTrack(e,t,i)},t.prototype.addRemoteTextTrack=function(e,t){if(this.tech_)return this.tech_.addRemoteTextTrack(e,t)},t.prototype.removeRemoteTextTrack=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.track,i=void 0===t?arguments[0]:t;if(this.tech_)return this.tech_.removeRemoteTextTrack(i)},t.prototype.getVideoPlaybackQuality=function(){return this.techGet_("getVideoPlaybackQuality")},t.prototype.videoWidth=function(){return this.tech_&&this.tech_.videoWidth&&this.tech_.videoWidth()||0},t.prototype.videoHeight=function(){return this.tech_&&this.tech_.videoHeight&&this.tech_.videoHeight()||0},t.prototype.language=function(e){return void 0===e?this.language_:void(this.language_=String(e).toLowerCase())},t.prototype.languages=function(){return J(t.prototype.options_.languages,this.languages_)},t.prototype.toJSON=function(){var e=J(this.options_),t=e.tracks;e.tracks=[];for(var i=0;i<t.length;i++){var n=t[i];n=J(n),n.player=void 0,e.tracks[i]=n}return e},t.prototype.createModal=function(e,t){var i=this;t=t||{},t.content=e||"";var n=new $i(this,t);return this.addChild(n),n.on("dispose",function(){i.removeChild(n)}),n.open(),n},t.getTagSettings=function(e){var t={sources:[],tracks:[]},i=C(e),r=i["data-setup"];if(m(e,"vjs-fluid")&&(i.fluid=!0),null!==r){var o=Ai(r||"{}"),s=o[0],a=o[1];s&&Vt.error(s),n(i,a)}if(n(t,i),e.hasChildNodes())for(var l=e.childNodes,c=0,u=l.length;c<u;c++){var d=l[c],p=d.nodeName.toLowerCase();"source"===p?t.sources.push(C(d)):"track"===p&&t.tracks.push(C(d))}return t},t.prototype.flexNotSupported_=function(){var e=ut.createElement("i");return!("flexBasis"in e.style||"webkitFlexBasis"in e.style||"mozFlexBasis"in e.style||"msFlexBasis"in e.style||"msFlexOrder"in e.style)},t}(wi);Sn.names.forEach(function(e){var t=Sn[e];yo.prototype[t.getterName]=function(){return this.tech_?this.tech_[t.getterName]():(this[t.privateName]=this[t.privateName]||new t.ListClass,this[t.privateName])}}),yo.players={};var bo=ot.navigator;yo.prototype.options_={techOrder:qn.defaultTechOrder_,html5:{},flash:{},inactivityTimeout:2e3,playbackRates:[],children:["mediaLoader","posterImage","textTrackDisplay","loadingSpinner","bigPlayButton","controlBar","errorDisplay","textTrackSettings"],language:bo&&(bo.languages&&bo.languages[0]||bo.userLanguage||bo.language)||"en",languages:{},notSupportedMessage:"No compatible source was found for this media."},["ended","seeking","seekable","networkState","readyState"].forEach(function(e){yo.prototype[e]=function(){return this.techGet_(e)}}),mo.forEach(function(e){yo.prototype["handleTech"+K(e)+"_"]=function(){return this.trigger(e)}}),wi.registerComponent("Player",yo);var wo="plugin",To="activePlugins_",Co={},xo=function(e){return Co.hasOwnProperty(e)},ko=function(e){return xo(e)?Co[e]:void 0},So=function(e,t){e[To]=e[To]||{},e[To][t]=!0},_o=function(e,t,i){var n=(i?"before":"")+"pluginsetup";e.trigger(n,t),e.trigger(n+":"+t.name,t)},Eo=function(e,t){var i=function(){_o(this,{name:e,plugin:t,instance:null},!0);var i=t.apply(this,arguments);return So(this,e),_o(this,{name:e,plugin:t,instance:i}),i};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i},Ao=function(e,t){return t.prototype.name=e,function(){_o(this,{name:e,plugin:t,instance:null},!0);for(var i=arguments.length,n=Array(i),r=0;r<i;r++)n[r]=arguments[r];var o=new(Function.prototype.bind.apply(t,[null].concat([this].concat(n))));return this[e]=function(){return o},_o(this,o.getEventHash()),o}},Po=function(){function e(t){if($t(this,e),this.constructor===e)throw new Error("Plugin must be sub-classed; not directly instantiated.");this.player=t,G(this),delete this.trigger,U(this,this.constructor.defaultState),So(t,this.name),this.dispose=li(this,this.dispose),t.on("dispose",this.dispose)}return e.prototype.getEventHash=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.name=this.name,e.plugin=this.constructor,e.instance=this,e},e.prototype.trigger=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return V(this.eventBusEl_,e,this.getEventHash(t))},e.prototype.handleStateChanged=function(e){},e.prototype.dispose=function(){var e=this.name,t=this.player;this.trigger("dispose"),this.off(),t.off("dispose",this.dispose),t[To][e]=!1,this.player=this.state=null,t[e]=Ao(e,Co[e])},e.isBasic=function(t){var i="string"==typeof t?ko(t):t;return"function"==typeof i&&!e.prototype.isPrototypeOf(i.prototype)},e.registerPlugin=function(t,i){if("string"!=typeof t)throw new Error('Illegal plugin name, "'+t+'", must be a string, was '+("undefined"==typeof t?"undefined":Dt(t))+".");if(xo(t))Vt.warn('A plugin named "'+t+'" already exists. You may want to avoid re-registering plugins!');else if(yo.prototype.hasOwnProperty(t))throw new Error('Illegal plugin name, "'+t+'", cannot share a name with an existing player method!');if("function"!=typeof i)throw new Error('Illegal plugin for "'+t+'", must be a function, was '+("undefined"==typeof i?"undefined":Dt(i))+".");return Co[t]=i,t!==wo&&(e.isBasic(i)?yo.prototype[t]=Eo(t,i):yo.prototype[t]=Ao(t,i)),i},e.deregisterPlugin=function(e){if(e===wo)throw new Error("Cannot de-register base plugin.");xo(e)&&(delete Co[e],delete yo.prototype[e])},e.getPlugins=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.keys(Co),t=void 0;return e.forEach(function(e){var i=ko(e);i&&(t=t||{},t[e]=i)}),t},e.getPluginVersion=function(e){var t=ko(e);return t&&t.VERSION||""},e}();Po.getPlugin=ko,Po.BASE_PLUGIN_NAME=wo,Po.registerPlugin(wo,Po),yo.prototype.usingPlugin=function(e){return!!this[To]&&this[To][e]===!0},yo.prototype.hasPlugin=function(e){return!!xo(e)};var Mo=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":Dt(t)));
e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.super_=t)},jo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=function(){e.apply(this,arguments)},n={};"object"===("undefined"==typeof t?"undefined":Dt(t))?(t.constructor!==Object.prototype.constructor&&(i=t.constructor),n=t):"function"==typeof t&&(i=t),Mo(i,e);for(var r in n)n.hasOwnProperty(r)&&(i.prototype[r]=n[r]);return i};if("undefined"==typeof HTMLVideoElement&&d()&&(ut.createElement("video"),ut.createElement("audio"),ut.createElement("track")),et.hooks_={},et.hooks=function(e,t){return et.hooks_[e]=et.hooks_[e]||[],t&&(et.hooks_[e]=et.hooks_[e].concat(t)),et.hooks_[e]},et.hook=function(e,t){et.hooks(e,t)},et.removeHook=function(e,t){var i=et.hooks(e).indexOf(t);return!(i<=-1)&&(et.hooks_[e]=et.hooks_[e].slice(),et.hooks_[e].splice(i,1),!0)},ot.VIDEOJS_NO_DYNAMIC_STYLE!==!0&&d()){var Oo=Gt(".vjs-styles-defaults");if(!Oo){Oo=si("vjs-styles-defaults");var No=Gt("head");No&&No.insertBefore(Oo,No.firstChild),ai(Oo,"\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ")}}return Y(1,et),et.VERSION=it,et.options=yo.prototype.options_,et.getPlayers=function(){return yo.players},et.players=yo.players,et.getComponent=wi.getComponent,et.registerComponent=function(e,t){qn.isTech(t)&&Vt.warn("The "+e+" tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)"),wi.registerComponent.call(wi,e,t)},et.getTech=qn.getTech,et.registerTech=qn.registerTech,et.use=Re,et.browser=Nt,et.TOUCH_ENABLED=jt,et.extend=jo,et.mergeOptions=J,et.bind=li,et.registerPlugin=Po.registerPlugin,et.plugin=function(e,t){return Vt.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"),Po.registerPlugin(e,t)},et.getPlugins=Po.getPlugins,et.getPlugin=Po.getPlugin,et.getPluginVersion=Po.getPluginVersion,et.addLanguage=function(e,t){var i;return e=(""+e).toLowerCase(),et.options.languages=J(et.options.languages,(i={},i[e]=t,i)),et.options.languages[e]},et.log=Vt,et.createTimeRange=et.createTimeRanges=ie,et.formatTime=Ke,et.parseUrl=Ki,et.isCrossOrigin=Zi,et.EventTarget=ui,et.on=q,et.one=X,et.off=W,et.trigger=V,et.xhr=pn,et.TextTrack=vn,et.AudioTrack=gn,et.VideoTrack=mn,["isEl","isTextNode","createEl","hasClass","addClass","removeClass","toggleClass","setAttributes","getAttributes","emptyEl","appendContent","insertContent"].forEach(function(e){et[e]=function(){return Vt.warn("videojs."+e+"() is deprecated; use videojs.dom."+e+"() instead"),Kt[e].apply(null,arguments)}}),et.computedStyle=a,et.dom=Kt,et.url=en,et}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){"use strict";function t(e,t,i){var n;return function(){var r=this,o=arguments,s=function(){n=null,i||e.apply(r,o)},a=i&&!n;clearTimeout(n),n=setTimeout(s,t),a&&e.apply(r,o)}}function i(e){var t=++c;return String(null==e?"rmjs-":e)+t}function n(e){var t=e.clone().css({height:"auto",width:e.width(),maxHeight:"none",overflow:"hidden"}).insertAfter(e),i=t.outerHeight(),n=parseInt(t.css({maxHeight:""}).css("max-height").replace(/[^-\d\.]/g,""),10),r=e.data("defaultHeight");t.remove();var o=n||e.data("collapsedHeight")||r;e.data({expandedHeight:i,maxHeight:n,collapsedHeight:o}).css({maxHeight:"none"})}function r(e){if(!l[e.selector]){var t=" ";e.embedCSS&&""!==e.blockCSS&&(t+=e.selector+" + [data-readmore-toggle], "+e.selector+"[data-readmore]{"+e.blockCSS+"}"),t+=e.selector+"[data-readmore]{transition: height "+e.speed+"ms;overflow: hidden;}",function(e,t){var i=e.createElement("style");i.type="text/css",i.styleSheet?i.styleSheet.cssText=t:i.appendChild(e.createTextNode(t)),e.getElementsByTagName("head")[0].appendChild(i)}(document,t),l[e.selector]=!0}}function o(t,i){this.element=t,this.options=e.extend({},a,i),r(this.options),this._defaults=a,this._name=s,this.init(),window.addEventListener?(window.addEventListener("load",u),window.addEventListener("resize",u)):(window.attachEvent("load",u),window.attachEvent("resize",u))}var s="readmore",a={speed:100,collapsedHeight:200,heightMargin:16,moreLink:'<a href="#">Read More</a>',lessLink:'<a href="#">Close</a>',embedCSS:!0,blockCSS:"display: block; width: 100%;",startOpen:!1,blockProcessed:function(){},beforeToggle:function(){},afterToggle:function(){}},l={},c=0,u=t(function(){e("[data-readmore]").each(function(){var t=e(this),i="true"===t.attr("aria-expanded");n(t),t.css({height:t.data(i?"expandedHeight":"collapsedHeight")})})},100);o.prototype={init:function(){var t=e(this.element);t.data({defaultHeight:this.options.collapsedHeight,heightMargin:this.options.heightMargin}),n(t);var r=t.data("collapsedHeight"),o=t.data("heightMargin");if(t.outerHeight(!0)<=r+o)return this.options.blockProcessed&&"function"==typeof this.options.blockProcessed&&this.options.blockProcessed(t,!1),!0;var s=t.attr("id")||i(),a=this.options.startOpen?this.options.lessLink:this.options.moreLink;t.attr({"data-readmore":"","aria-expanded":this.options.startOpen,id:s}),t.after(e(a).on("click",function(e){return function(i){e.toggle(this,t[0],i)}}(this)).attr({"data-readmore-toggle":s,"aria-controls":s})),this.options.startOpen||t.css({height:r}),this.options.blockProcessed&&"function"==typeof this.options.blockProcessed&&this.options.blockProcessed(t,!0)},toggle:function(t,i,n){n&&n.preventDefault(),t||(t=e('[aria-controls="'+this.element.id+'"]')[0]),i||(i=this.element);var r=e(i),o="",s="",a=!1,l=r.data("collapsedHeight");r.height()<=l?(o=r.data("expandedHeight")+"px",s="lessLink",a=!0):(o=l,s="moreLink"),this.options.beforeToggle&&"function"==typeof this.options.beforeToggle&&this.options.beforeToggle(t,r,!a),r.css({height:o}),r.on("transitionend",function(i){return function(){i.options.afterToggle&&"function"==typeof i.options.afterToggle&&i.options.afterToggle(t,r,a),e(this).attr({"aria-expanded":a}).off("transitionend")}}(this)),e(t).replaceWith(e(this.options[s]).on("click",function(e){return function(t){e.toggle(this,i,t)}}(this)).attr({"data-readmore-toggle":r.attr("id"),"aria-controls":r.attr("id")}))},destroy:function(){e(this.element).each(function(){var t=e(this);t.attr({"data-readmore":null,"aria-expanded":null}).css({maxHeight:"",height:""}).next("[data-readmore-toggle]").remove(),t.removeData()})}},e.fn.readmore=function(t){var i=arguments,n=this.selector;return t=t||{},"object"==typeof t?this.each(function(){if(e.data(this,"plugin_"+s)){var i=e.data(this,"plugin_"+s);i.destroy.apply(i)}t.selector=n,e.data(this,"plugin_"+s,new o(this,t))}):"string"==typeof t&&"_"!==t[0]&&"init"!==t?this.each(function(){var n=e.data(this,"plugin_"+s);n instanceof o&&"function"==typeof n[t]&&n[t].apply(n,Array.prototype.slice.call(i,1))}):void 0}}),$(document).ready(function(){$(".nav-icon").click(function(){$(this).toggleClass("open"),$(".closed-menu").fadeToggle()}),$("#desktop-menu > li a").each(function(){$(this).parent().width($(this).width()+4)}),$("#desktop-menu > li:first-child a").each(function(){$(this).parent().width($(this).width()+17)}),$("#desktop-menu li > .subMenu").parent().hover(function(){var e=$(this).children(".subMenu");$(e).is(":hidden")?$(e).slideDown(200):$(e).slideUp(200)}),$(".slider").slick({arrows:!1,dots:!0,mobileFirst:!0});new Swiper(".swiper-container",{pagination:".swiper-pagination",effect:"coverflow",grabCursor:!0,centeredSlides:!0,slidesPerView:"auto",loop:!0,pagination:{el:".swiper-pagination",type:"bullets",clickable:!0}});$(".education-wrapper").viewportChecker({callbackFunction:function(e,t){var i=new ProgressBar.Circle("#read",{strokeWidth:6,color:"#fff",duration:1400,trailWidth:6,trailColor:"#1b6a9e",from:{color:"#fff",width:6},to:{color:"#fff",width:6},step:function(e,t){t.path.setAttribute("stroke",e.color),t.path.setAttribute("stroke-width",e.width);var i=Math.round(100*t.value());0===i?t.setText(""):t.setText(i)},text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"}});i.animate(.1);var n=new ProgressBar.Circle("#seen",{strokeWidth:6,color:"#fff",duration:1400,trailWidth:6,trailColor:"#1b6a9e",from:{color:"#fff",width:6},to:{color:"#fff",width:6},step:function(e,t){t.path.setAttribute("stroke",e.color),t.path.setAttribute("stroke-width",e.width);var i=Math.round(100*t.value());0===i?t.setText(""):t.setText(i)},text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"}});n.animate(.3);var r=new ProgressBar.Circle("#feel",{strokeWidth:6,color:"#fff",duration:1400,trailWidth:6,trailColor:"#1b6a9e",from:{color:"#fff",width:6},to:{color:"#fff",width:6},step:function(e,t){t.path.setAttribute("stroke",e.color),t.path.setAttribute("stroke-width",e.width);var i=Math.round(100*t.value());0===i?t.setText(""):t.setText(i)},text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"}});r.animate(.9)}});var e=$(".portfolio-wrapper .item").css({height:0,position:"absolute",overflow:"hidden"}),t=$(window).width();i=t>1024?6:3;var i,e=$(".item"),n=1,r=0;$(".portfolio-wrapper .send").on("click",function(){r=i*n++,e.slice(0,r).css({height:"inherit",position:"static",overflow:"visible"}),$(this)[r>=e.length?"hide":"show"]()}).click();var o=$(".portfolio-content .item");"none"!=o.css("display")&&"block"!=o.css("display")||o.children(".descr").readmore({speed:500,collapsedHeight:25,moreLink:'<a class="read-more" href="#">Read more</a>',lessLink:'<a class="read-more" href="#">Read less</a>'});var s=document.getElementsByTagName("video");for(n=0;n<s.length;n++){var a=s[n];a.className.indexOf("video-js")>-1&&videojs(a.id,{controls:!0,autoplay:!1,preload:"auto",flued:!0,height:200})}$(".video-js").addClass("forPoster"),$(".vjs-big-play-button").on("click",function(){var e=$(this).parent();e.removeClass("forPoster")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
